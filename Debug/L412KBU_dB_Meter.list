
L412KBU_dB_Meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08006c18  08006c18  00016c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cc4  08006cc4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006cc4  08006cc4  00016cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ccc  08006ccc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ccc  08006ccc  00016ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cd0  08006cd0  00016cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006cd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003b58  20000010  08006ce4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003b68  08006ce4  00023b68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023249  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ddf  00000000  00000000  00043289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a98  00000000  00000000  00047068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001920  00000000  00000000  00048b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e437  00000000  00000000  0004a420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d597  00000000  00000000  00068857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c76fb  00000000  00000000  00085dee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014d4e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000711c  00000000  00000000  0014d53c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c00 	.word	0x08006c00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08006c00 	.word	0x08006c00

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <illegal_memory_access_attempt>:
	(*p_entry_number)++;
	ouroboris(p_entry_number);
}

void illegal_memory_access_attempt(void)
{
 80004c8:	b490      	push	{r4, r7}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MOV %0, LR\n" : "=r" (result) );
 80004ce:	4673      	mov	r3, lr
 80004d0:	461c      	mov	r4, r3
  return(result);
 80004d2:	4623      	mov	r3, r4
	// Store the lasst known return address
	uint32_t last_known_return_address = __get_LR();
 80004d4:	60fb      	str	r3, [r7, #12]
	// Pointer to reserved memory address
	uint32_t* p_reserved_address;
	p_reserved_address = RESERVED_ADDRESS;
 80004d6:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <illegal_memory_access_attempt+0x30>)
 80004d8:	60bb      	str	r3, [r7, #8]
	// Attempt to read; a Hard Fault will be caused here
	uint32_t contents = *p_reserved_address;
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	607b      	str	r3, [r7, #4]
	// Modify contents
	contents++;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	3301      	adds	r3, #1
 80004e4:	607b      	str	r3, [r7, #4]
	// Attempt to write
	*p_reserved_address = contents;
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	687a      	ldr	r2, [r7, #4]
 80004ea:	601a      	str	r2, [r3, #0]
}
 80004ec:	bf00      	nop
 80004ee:	3710      	adds	r7, #16
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bc90      	pop	{r4, r7}
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	08020001 	.word	0x08020001

080004fc <vAuxiliaryTask>:

/* TASK DEFINITIONS BEGIN */
void vAuxiliaryTask(void* pvParams)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]

	/* Create any mutexes, semaphores, gueues, or other intertask communication mechanisms, here */

	/* Write task specific code, here */
	// entry_number = 0;
	illegal_memory_access_attempt();
 8000504:	f7ff ffe0 	bl	80004c8 <illegal_memory_access_attempt>

	/* Note that the following segment consists of code that the RTOS cycles through. */

	for(;;)
 8000508:	e7fe      	b.n	8000508 <vAuxiliaryTask+0xc>
	...

0800050c <initialize_auxiliary_task_block>:
}
/* TASK DEFINITIONS END */

/* BEGIN TASK BLOCKS */
void initialize_auxiliary_task_block(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
	auxiliary_task_block.p_task_function = vAuxiliaryTask;
 8000510:	4b0d      	ldr	r3, [pc, #52]	; (8000548 <initialize_auxiliary_task_block+0x3c>)
 8000512:	4a0e      	ldr	r2, [pc, #56]	; (800054c <initialize_auxiliary_task_block+0x40>)
 8000514:	601a      	str	r2, [r3, #0]
	auxiliary_task_block.task_name = auxiliary_task_name;
 8000516:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <initialize_auxiliary_task_block+0x44>)
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <initialize_auxiliary_task_block+0x3c>)
 800051a:	605a      	str	r2, [r3, #4]
	auxiliary_task_block.stack_depth = AUXILIARY_TASK_STACK_SIZE;
 800051c:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <initialize_auxiliary_task_block+0x3c>)
 800051e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000522:	609a      	str	r2, [r3, #8]
	auxiliary_task_block.p_params = p_auxiliary_params;
 8000524:	2200      	movs	r2, #0
 8000526:	4b08      	ldr	r3, [pc, #32]	; (8000548 <initialize_auxiliary_task_block+0x3c>)
 8000528:	60da      	str	r2, [r3, #12]
	auxiliary_task_block.priority = AUXILIARY_TASK_PRIORITY;
 800052a:	4b07      	ldr	r3, [pc, #28]	; (8000548 <initialize_auxiliary_task_block+0x3c>)
 800052c:	2201      	movs	r2, #1
 800052e:	611a      	str	r2, [r3, #16]
	auxiliary_task_block.p_stack_buffer = auxiliary_stack_buffer;
 8000530:	4b05      	ldr	r3, [pc, #20]	; (8000548 <initialize_auxiliary_task_block+0x3c>)
 8000532:	4a08      	ldr	r2, [pc, #32]	; (8000554 <initialize_auxiliary_task_block+0x48>)
 8000534:	615a      	str	r2, [r3, #20]
	auxiliary_task_block.p_task_buffer = &auxiliary_task_buffer;
 8000536:	4b04      	ldr	r3, [pc, #16]	; (8000548 <initialize_auxiliary_task_block+0x3c>)
 8000538:	4a07      	ldr	r2, [pc, #28]	; (8000558 <initialize_auxiliary_task_block+0x4c>)
 800053a:	619a      	str	r2, [r3, #24]
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	200038fc 	.word	0x200038fc
 800054c:	080004fd 	.word	0x080004fd
 8000550:	08006c18 	.word	0x08006c18
 8000554:	200018fc 	.word	0x200018fc
 8000558:	20003990 	.word	0x20003990

0800055c <create_auxiliary_task>:
/* END TASK BLOCKS */

/* BEGIN TASK CREATION */

void create_auxiliary_task(void)
{
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	b085      	sub	sp, #20
 8000560:	af04      	add	r7, sp, #16
	initialize_auxiliary_task_block();
 8000562:	f7ff ffd3 	bl	800050c <initialize_auxiliary_task_block>
	auxiliaryTaskHandle = xTaskCreateStatic(auxiliary_task_block.p_task_function,
 8000566:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <create_auxiliary_task+0x44>)
 8000568:	6818      	ldr	r0, [r3, #0]
			auxiliary_task_block.task_name,
 800056a:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <create_auxiliary_task+0x44>)
 800056c:	685c      	ldr	r4, [r3, #4]
	auxiliaryTaskHandle = xTaskCreateStatic(auxiliary_task_block.p_task_function,
 800056e:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <create_auxiliary_task+0x44>)
 8000570:	689d      	ldr	r5, [r3, #8]
 8000572:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <create_auxiliary_task+0x44>)
 8000574:	68de      	ldr	r6, [r3, #12]
 8000576:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <create_auxiliary_task+0x44>)
 8000578:	691b      	ldr	r3, [r3, #16]
 800057a:	4a09      	ldr	r2, [pc, #36]	; (80005a0 <create_auxiliary_task+0x44>)
 800057c:	6952      	ldr	r2, [r2, #20]
 800057e:	4908      	ldr	r1, [pc, #32]	; (80005a0 <create_auxiliary_task+0x44>)
 8000580:	6989      	ldr	r1, [r1, #24]
 8000582:	9102      	str	r1, [sp, #8]
 8000584:	9201      	str	r2, [sp, #4]
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	4633      	mov	r3, r6
 800058a:	462a      	mov	r2, r5
 800058c:	4621      	mov	r1, r4
 800058e:	f004 fc55 	bl	8004e3c <xTaskCreateStatic>
 8000592:	4603      	mov	r3, r0
 8000594:	4a03      	ldr	r2, [pc, #12]	; (80005a4 <create_auxiliary_task+0x48>)
 8000596:	6013      	str	r3, [r2, #0]
			auxiliary_task_block.stack_depth,
			auxiliary_task_block.p_params,
			auxiliary_task_block.priority,
			auxiliary_task_block.p_stack_buffer,
			auxiliary_task_block.p_task_buffer);
}
 8000598:	bf00      	nop
 800059a:	3704      	adds	r7, #4
 800059c:	46bd      	mov	sp, r7
 800059e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a0:	200038fc 	.word	0x200038fc
 80005a4:	2000002c 	.word	0x2000002c

080005a8 <vApplicationStackOverflowHook>:

#include "FreeRTOS.h"
#include "task.h"

void vApplicationStackOverflowHook(TaskHandle_t xTask, signed char *pcTaskName)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
	while(1)
	{
		continue;
 80005b2:	e7fe      	b.n	80005b2 <vApplicationStackOverflowHook+0xa>

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f000 fb43 	bl	8000c42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f828 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 f928 	bl	8000814 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005c4:	f000 f8f6 	bl	80007b4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80005c8:	f000 f87e 	bl	80006c8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  /* Test GPIO */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	2180      	movs	r1, #128	; 0x80
 80005d0:	480b      	ldr	r0, [pc, #44]	; (8000600 <main+0x4c>)
 80005d2:	f001 fd9d 	bl	8002110 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80005d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005da:	f000 fb6b 	bl	8000cb4 <HAL_Delay>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005de:	f003 fd61 	bl	80040a4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005e2:	4a08      	ldr	r2, [pc, #32]	; (8000604 <main+0x50>)
 80005e4:	2100      	movs	r1, #0
 80005e6:	4808      	ldr	r0, [pc, #32]	; (8000608 <main+0x54>)
 80005e8:	f003 fda6 	bl	8004138 <osThreadNew>
 80005ec:	4603      	mov	r3, r0
 80005ee:	4a07      	ldr	r2, [pc, #28]	; (800060c <main+0x58>)
 80005f0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  create_system_task();
 80005f2:	f000 fad7 	bl	8000ba4 <create_system_task>
  create_auxiliary_task();
 80005f6:	f7ff ffb1 	bl	800055c <create_auxiliary_task>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005fa:	f003 fd77 	bl	80040ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fe:	e7fe      	b.n	80005fe <main+0x4a>
 8000600:	48000400 	.word	0x48000400
 8000604:	08006c58 	.word	0x08006c58
 8000608:	08000891 	.word	0x08000891
 800060c:	200039ec 	.word	0x200039ec

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b0a4      	sub	sp, #144	; 0x90
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800061a:	2244      	movs	r2, #68	; 0x44
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f006 fae6 	bl	8006bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2234      	movs	r2, #52	; 0x34
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f006 fad8 	bl	8006bf0 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000640:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000644:	f001 fda4 	bl	8002190 <HAL_PWREx_ControlVoltageScaling>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x42>
  {
    Error_Handler();
 800064e:	f000 f939 	bl	80008c4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000652:	2310      	movs	r3, #16
 8000654:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000656:	2301      	movs	r3, #1
 8000658:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800065e:	2360      	movs	r3, #96	; 0x60
 8000660:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000662:	2300      	movs	r3, #0
 8000664:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000666:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800066a:	4618      	mov	r0, r3
 800066c:	f001 fde6 	bl	800223c <HAL_RCC_OscConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000676:	f000 f925 	bl	80008c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067a:	230f      	movs	r3, #15
 800067c:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800067e:	2300      	movs	r3, #0
 8000680:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800068e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000692:	2100      	movs	r1, #0
 8000694:	4618      	mov	r0, r3
 8000696:	f002 fa33 	bl	8002b00 <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a0:	f000 f910 	bl	80008c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC;
 80006a4:	f244 0301 	movw	r3, #16385	; 0x4001
 80006a8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 fc7b 	bl	8002fac <HAL_RCCEx_PeriphCLKConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80006bc:	f000 f902 	bl	80008c4 <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3790      	adds	r7, #144	; 0x90
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	; 0x28
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
 80006e8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006ea:	4b2f      	ldr	r3, [pc, #188]	; (80007a8 <MX_ADC1_Init+0xe0>)
 80006ec:	4a2f      	ldr	r2, [pc, #188]	; (80007ac <MX_ADC1_Init+0xe4>)
 80006ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006f0:	4b2d      	ldr	r3, [pc, #180]	; (80007a8 <MX_ADC1_Init+0xe0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006f6:	4b2c      	ldr	r3, [pc, #176]	; (80007a8 <MX_ADC1_Init+0xe0>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006fc:	4b2a      	ldr	r3, [pc, #168]	; (80007a8 <MX_ADC1_Init+0xe0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000702:	4b29      	ldr	r3, [pc, #164]	; (80007a8 <MX_ADC1_Init+0xe0>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000708:	4b27      	ldr	r3, [pc, #156]	; (80007a8 <MX_ADC1_Init+0xe0>)
 800070a:	2204      	movs	r2, #4
 800070c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800070e:	4b26      	ldr	r3, [pc, #152]	; (80007a8 <MX_ADC1_Init+0xe0>)
 8000710:	2200      	movs	r2, #0
 8000712:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000714:	4b24      	ldr	r3, [pc, #144]	; (80007a8 <MX_ADC1_Init+0xe0>)
 8000716:	2200      	movs	r2, #0
 8000718:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800071a:	4b23      	ldr	r3, [pc, #140]	; (80007a8 <MX_ADC1_Init+0xe0>)
 800071c:	2201      	movs	r2, #1
 800071e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000720:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <MX_ADC1_Init+0xe0>)
 8000722:	2200      	movs	r2, #0
 8000724:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <MX_ADC1_Init+0xe0>)
 800072a:	2200      	movs	r2, #0
 800072c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072e:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <MX_ADC1_Init+0xe0>)
 8000730:	2200      	movs	r2, #0
 8000732:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000734:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <MX_ADC1_Init+0xe0>)
 8000736:	2200      	movs	r2, #0
 8000738:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800073c:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <MX_ADC1_Init+0xe0>)
 800073e:	2200      	movs	r2, #0
 8000740:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <MX_ADC1_Init+0xe0>)
 8000744:	2200      	movs	r2, #0
 8000746:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800074a:	4817      	ldr	r0, [pc, #92]	; (80007a8 <MX_ADC1_Init+0xe0>)
 800074c:	f000 fc76 	bl	800103c <HAL_ADC_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000756:	f000 f8b5 	bl	80008c4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	4619      	mov	r1, r3
 8000764:	4810      	ldr	r0, [pc, #64]	; (80007a8 <MX_ADC1_Init+0xe0>)
 8000766:	f001 f9db 	bl	8001b20 <HAL_ADCEx_MultiModeConfigChannel>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000770:	f000 f8a8 	bl	80008c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_ADC1_Init+0xe8>)
 8000776:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000778:	2306      	movs	r3, #6
 800077a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000780:	237f      	movs	r3, #127	; 0x7f
 8000782:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000784:	2304      	movs	r3, #4
 8000786:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	4619      	mov	r1, r3
 8000790:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_ADC1_Init+0xe0>)
 8000792:	f000 fda3 	bl	80012dc <HAL_ADC_ConfigChannel>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800079c:	f000 f892 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	3728      	adds	r7, #40	; 0x28
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200039f0 	.word	0x200039f0
 80007ac:	50040000 	.word	0x50040000
 80007b0:	14f00020 	.word	0x14f00020

080007b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007ba:	4a15      	ldr	r2, [pc, #84]	; (8000810 <MX_USART1_UART_Init+0x5c>)
 80007bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007f8:	f002 ffde 	bl	80037b8 <HAL_UART_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000802:	f000 f85f 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20003a54 	.word	0x20003a54
 8000810:	40013800 	.word	0x40013800

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b088      	sub	sp, #32
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	4b17      	ldr	r3, [pc, #92]	; (8000888 <MX_GPIO_Init+0x74>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	4a16      	ldr	r2, [pc, #88]	; (8000888 <MX_GPIO_Init+0x74>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000836:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_GPIO_Init+0x74>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_GPIO_Init+0x74>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	4a10      	ldr	r2, [pc, #64]	; (8000888 <MX_GPIO_Init+0x74>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_GPIO_Init+0x74>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2108      	movs	r1, #8
 800085e:	480b      	ldr	r0, [pc, #44]	; (800088c <MX_GPIO_Init+0x78>)
 8000860:	f001 fc56 	bl	8002110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000864:	2308      	movs	r3, #8
 8000866:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000868:	2301      	movs	r3, #1
 800086a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	4619      	mov	r1, r3
 800087a:	4804      	ldr	r0, [pc, #16]	; (800088c <MX_GPIO_Init+0x78>)
 800087c:	f001 fad6 	bl	8001e2c <HAL_GPIO_Init>

}
 8000880:	bf00      	nop
 8000882:	3720      	adds	r7, #32
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40021000 	.word	0x40021000
 800088c:	48000400 	.word	0x48000400

08000890 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000898:	2001      	movs	r0, #1
 800089a:	f003 fcdf 	bl	800425c <osDelay>
 800089e:	e7fb      	b.n	8000898 <StartDefaultTask+0x8>

080008a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a04      	ldr	r2, [pc, #16]	; (80008c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d101      	bne.n	80008b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008b2:	f000 f9df 	bl	8000c74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40012c00 	.word	0x40012c00

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008cc:	e7fe      	b.n	80008cc <Error_Handler+0x8>
	...

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <HAL_MspInit+0x4c>)
 80008d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008da:	4a10      	ldr	r2, [pc, #64]	; (800091c <HAL_MspInit+0x4c>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6613      	str	r3, [r2, #96]	; 0x60
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <HAL_MspInit+0x4c>)
 80008e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <HAL_MspInit+0x4c>)
 80008f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f2:	4a0a      	ldr	r2, [pc, #40]	; (800091c <HAL_MspInit+0x4c>)
 80008f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f8:	6593      	str	r3, [r2, #88]	; 0x58
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <HAL_MspInit+0x4c>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	210f      	movs	r1, #15
 800090a:	f06f 0001 	mvn.w	r0, #1
 800090e:	f001 fa63 	bl	8001dd8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40021000 	.word	0x40021000

08000920 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	; 0x28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a15      	ldr	r2, [pc, #84]	; (8000994 <HAL_ADC_MspInit+0x74>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d124      	bne.n	800098c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <HAL_ADC_MspInit+0x78>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	4a14      	ldr	r2, [pc, #80]	; (8000998 <HAL_ADC_MspInit+0x78>)
 8000948:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800094c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094e:	4b12      	ldr	r3, [pc, #72]	; (8000998 <HAL_ADC_MspInit+0x78>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <HAL_ADC_MspInit+0x78>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4a0e      	ldr	r2, [pc, #56]	; (8000998 <HAL_ADC_MspInit+0x78>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <HAL_ADC_MspInit+0x78>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-CK_IN     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000972:	2301      	movs	r3, #1
 8000974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000976:	230b      	movs	r3, #11
 8000978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000988:	f001 fa50 	bl	8001e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800098c:	bf00      	nop
 800098e:	3728      	adds	r7, #40	; 0x28
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	50040000 	.word	0x50040000
 8000998:	40021000 	.word	0x40021000

0800099c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a18      	ldr	r2, [pc, #96]	; (8000a1c <HAL_UART_MspInit+0x80>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d129      	bne.n	8000a12 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <HAL_UART_MspInit+0x84>)
 80009c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009c2:	4a17      	ldr	r2, [pc, #92]	; (8000a20 <HAL_UART_MspInit+0x84>)
 80009c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c8:	6613      	str	r3, [r2, #96]	; 0x60
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <HAL_UART_MspInit+0x84>)
 80009cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <HAL_UART_MspInit+0x84>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	4a11      	ldr	r2, [pc, #68]	; (8000a20 <HAL_UART_MspInit+0x84>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <HAL_UART_MspInit+0x84>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fc:	2303      	movs	r3, #3
 80009fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a00:	2307      	movs	r3, #7
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0e:	f001 fa0d 	bl	8001e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a12:	bf00      	nop
 8000a14:	3728      	adds	r7, #40	; 0x28
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40013800 	.word	0x40013800
 8000a20:	40021000 	.word	0x40021000

08000a24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08c      	sub	sp, #48	; 0x30
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	2019      	movs	r0, #25
 8000a3a:	f001 f9cd 	bl	8001dd8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a3e:	2019      	movs	r0, #25
 8000a40:	f001 f9e6 	bl	8001e10 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a44:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <HAL_InitTick+0x9c>)
 8000a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a48:	4a1d      	ldr	r2, [pc, #116]	; (8000ac0 <HAL_InitTick+0x9c>)
 8000a4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a4e:	6613      	str	r3, [r2, #96]	; 0x60
 8000a50:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <HAL_InitTick+0x9c>)
 8000a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a5c:	f107 0210 	add.w	r2, r7, #16
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4611      	mov	r1, r2
 8000a66:	4618      	mov	r0, r3
 8000a68:	f002 fa0e 	bl	8002e88 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a6c:	f002 f9f6 	bl	8002e5c <HAL_RCC_GetPCLK2Freq>
 8000a70:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a74:	4a13      	ldr	r2, [pc, #76]	; (8000ac4 <HAL_InitTick+0xa0>)
 8000a76:	fba2 2303 	umull	r2, r3, r2, r3
 8000a7a:	0c9b      	lsrs	r3, r3, #18
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <HAL_InitTick+0xa4>)
 8000a82:	4a12      	ldr	r2, [pc, #72]	; (8000acc <HAL_InitTick+0xa8>)
 8000a84:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <HAL_InitTick+0xa4>)
 8000a88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a8c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a8e:	4a0e      	ldr	r2, [pc, #56]	; (8000ac8 <HAL_InitTick+0xa4>)
 8000a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a92:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <HAL_InitTick+0xa4>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <HAL_InitTick+0xa4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000aa0:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <HAL_InitTick+0xa4>)
 8000aa2:	f002 fc09 	bl	80032b8 <HAL_TIM_Base_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d104      	bne.n	8000ab6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000aac:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <HAL_InitTick+0xa4>)
 8000aae:	f002 fc65 	bl	800337c <HAL_TIM_Base_Start_IT>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	e000      	b.n	8000ab8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3730      	adds	r7, #48	; 0x30
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	431bde83 	.word	0x431bde83
 8000ac8:	20003ad8 	.word	0x20003ad8
 8000acc:	40012c00 	.word	0x40012c00

08000ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <NMI_Handler+0x4>

08000ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <HardFault_Handler+0x4>

08000adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <MemManage_Handler+0x4>

08000ae2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae6:	e7fe      	b.n	8000ae6 <BusFault_Handler+0x4>

08000ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <UsageFault_Handler+0x4>

08000aee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b00:	4802      	ldr	r0, [pc, #8]	; (8000b0c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b02:	f002 fc8f 	bl	8003424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20003ad8 	.word	0x20003ad8

08000b10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <SystemInit+0x20>)
 8000b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b1a:	4a05      	ldr	r2, [pc, #20]	; (8000b30 <SystemInit+0x20>)
 8000b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <vSystemTask>:
#define HEARTBEAT_HALF_PERIOD_MS 500
/* END SYSTEM TASK SPECIFIC DEFINITIONS */

/* TASK DEFINITIONS BEGIN */
void vSystemTask(void* pvParams)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		/* Write application specific code, here */

		// Heartbeat LED
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000b3c:	2108      	movs	r1, #8
 8000b3e:	4804      	ldr	r0, [pc, #16]	; (8000b50 <vSystemTask+0x1c>)
 8000b40:	f001 fafe 	bl	8002140 <HAL_GPIO_TogglePin>
		HAL_Delay(HEARTBEAT_HALF_PERIOD_MS);
 8000b44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b48:	f000 f8b4 	bl	8000cb4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000b4c:	e7f6      	b.n	8000b3c <vSystemTask+0x8>
 8000b4e:	bf00      	nop
 8000b50:	48000400 	.word	0x48000400

08000b54 <initialize_system_task_block>:
}
/* TASK DEFINITIONS END */

/* BEGIN TASK BLOCKS */
void initialize_system_task_block(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
	system_task_block.p_task_function = vSystemTask;
 8000b58:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <initialize_system_task_block+0x3c>)
 8000b5a:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <initialize_system_task_block+0x40>)
 8000b5c:	601a      	str	r2, [r3, #0]
	system_task_block.task_name = system_task_name;
 8000b5e:	4a0e      	ldr	r2, [pc, #56]	; (8000b98 <initialize_system_task_block+0x44>)
 8000b60:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <initialize_system_task_block+0x3c>)
 8000b62:	605a      	str	r2, [r3, #4]
	system_task_block.stack_depth = SYSTEM_TASK_STACK_SIZE;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <initialize_system_task_block+0x3c>)
 8000b66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b6a:	609a      	str	r2, [r3, #8]
	system_task_block.p_params = p_system_params;
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <initialize_system_task_block+0x3c>)
 8000b70:	60da      	str	r2, [r3, #12]
	system_task_block.priority = SYSTEM_TASK_PRIORITY;
 8000b72:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <initialize_system_task_block+0x3c>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	611a      	str	r2, [r3, #16]
	system_task_block.p_stack_buffer = system_stack_buffer;
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <initialize_system_task_block+0x3c>)
 8000b7a:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <initialize_system_task_block+0x48>)
 8000b7c:	615a      	str	r2, [r3, #20]
	system_task_block.p_task_buffer = &system_task_buffer;
 8000b7e:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <initialize_system_task_block+0x3c>)
 8000b80:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <initialize_system_task_block+0x4c>)
 8000b82:	619a      	str	r2, [r3, #24]
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20003974 	.word	0x20003974
 8000b94:	08000b35 	.word	0x08000b35
 8000b98:	08006c34 	.word	0x08006c34
 8000b9c:	200028fc 	.word	0x200028fc
 8000ba0:	20003918 	.word	0x20003918

08000ba4 <create_system_task>:
/* END TASK BLOCKS */

/* BEGIN TASK CREATION */

void create_system_task(void)
{
 8000ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af04      	add	r7, sp, #16
	initialize_system_task_block();
 8000baa:	f7ff ffd3 	bl	8000b54 <initialize_system_task_block>
	systemTaskHandle = xTaskCreateStatic(system_task_block.p_task_function,
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <create_system_task+0x44>)
 8000bb0:	6818      	ldr	r0, [r3, #0]
			  system_task_block.task_name,
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <create_system_task+0x44>)
 8000bb4:	685c      	ldr	r4, [r3, #4]
	systemTaskHandle = xTaskCreateStatic(system_task_block.p_task_function,
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <create_system_task+0x44>)
 8000bb8:	689d      	ldr	r5, [r3, #8]
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <create_system_task+0x44>)
 8000bbc:	68de      	ldr	r6, [r3, #12]
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <create_system_task+0x44>)
 8000bc0:	691b      	ldr	r3, [r3, #16]
 8000bc2:	4a09      	ldr	r2, [pc, #36]	; (8000be8 <create_system_task+0x44>)
 8000bc4:	6952      	ldr	r2, [r2, #20]
 8000bc6:	4908      	ldr	r1, [pc, #32]	; (8000be8 <create_system_task+0x44>)
 8000bc8:	6989      	ldr	r1, [r1, #24]
 8000bca:	9102      	str	r1, [sp, #8]
 8000bcc:	9201      	str	r2, [sp, #4]
 8000bce:	9300      	str	r3, [sp, #0]
 8000bd0:	4633      	mov	r3, r6
 8000bd2:	462a      	mov	r2, r5
 8000bd4:	4621      	mov	r1, r4
 8000bd6:	f004 f931 	bl	8004e3c <xTaskCreateStatic>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	4a03      	ldr	r2, [pc, #12]	; (8000bec <create_system_task+0x48>)
 8000bde:	6013      	str	r3, [r2, #0]
			  system_task_block.stack_depth,
			  system_task_block.p_params,
			  system_task_block.priority,
			  system_task_block.p_stack_buffer,
			  system_task_block.p_task_buffer);
}
 8000be0:	bf00      	nop
 8000be2:	3704      	adds	r7, #4
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be8:	20003974 	.word	0x20003974
 8000bec:	20000030 	.word	0x20000030

08000bf0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bf4:	f7ff ff8c 	bl	8000b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf8:	480c      	ldr	r0, [pc, #48]	; (8000c2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bfa:	490d      	ldr	r1, [pc, #52]	; (8000c30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	; (8000c34 <LoopForever+0xe>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c00:	e002      	b.n	8000c08 <LoopCopyDataInit>

08000c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c06:	3304      	adds	r3, #4

08000c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c0c:	d3f9      	bcc.n	8000c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c10:	4c0a      	ldr	r4, [pc, #40]	; (8000c3c <LoopForever+0x16>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c14:	e001      	b.n	8000c1a <LoopFillZerobss>

08000c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c18:	3204      	adds	r2, #4

08000c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c1c:	d3fb      	bcc.n	8000c16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c1e:	f005 ffb5 	bl	8006b8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c22:	f7ff fcc7 	bl	80005b4 <main>

08000c26 <LoopForever>:

LoopForever:
    b LoopForever
 8000c26:	e7fe      	b.n	8000c26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c28:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c30:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c34:	08006cd4 	.word	0x08006cd4
  ldr r2, =_sbss
 8000c38:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c3c:	20003b68 	.word	0x20003b68

08000c40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c40:	e7fe      	b.n	8000c40 <ADC1_2_IRQHandler>

08000c42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c4c:	2003      	movs	r0, #3
 8000c4e:	f001 f8b8 	bl	8001dc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c52:	2000      	movs	r0, #0
 8000c54:	f7ff fee6 	bl	8000a24 <HAL_InitTick>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d002      	beq.n	8000c64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	71fb      	strb	r3, [r7, #7]
 8000c62:	e001      	b.n	8000c68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c64:	f7ff fe34 	bl	80008d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c68:	79fb      	ldrb	r3, [r7, #7]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_IncTick+0x20>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_IncTick+0x24>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <HAL_IncTick+0x24>)
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000008 	.word	0x20000008
 8000c98:	20003b24 	.word	0x20003b24

08000c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <HAL_GetTick+0x14>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20003b24 	.word	0x20003b24

08000cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cbc:	f7ff ffee 	bl	8000c9c <HAL_GetTick>
 8000cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ccc:	d005      	beq.n	8000cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cce:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <HAL_Delay+0x44>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cda:	bf00      	nop
 8000cdc:	f7ff ffde 	bl	8000c9c <HAL_GetTick>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d8f7      	bhi.n	8000cdc <HAL_Delay+0x28>
  {
  }
}
 8000cec:	bf00      	nop
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000008 	.word	0x20000008

08000cfc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	431a      	orrs	r2, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	609a      	str	r2, [r3, #8]
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
 8000d2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	431a      	orrs	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b087      	sub	sp, #28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	3360      	adds	r3, #96	; 0x60
 8000d76:	461a      	mov	r2, r3
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	4413      	add	r3, r2
 8000d7e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <LL_ADC_SetOffset+0x44>)
 8000d86:	4013      	ands	r3, r2
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000d8e:	683a      	ldr	r2, [r7, #0]
 8000d90:	430a      	orrs	r2, r1
 8000d92:	4313      	orrs	r3, r2
 8000d94:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d9c:	bf00      	nop
 8000d9e:	371c      	adds	r7, #28
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	03fff000 	.word	0x03fff000

08000dac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	3360      	adds	r3, #96	; 0x60
 8000dba:	461a      	mov	r2, r3
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	4413      	add	r3, r2
 8000dc2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b087      	sub	sp, #28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	3360      	adds	r3, #96	; 0x60
 8000de8:	461a      	mov	r2, r3
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	4413      	add	r3, r2
 8000df0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	431a      	orrs	r2, r3
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e02:	bf00      	nop
 8000e04:	371c      	adds	r7, #28
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
 8000e16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	431a      	orrs	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	615a      	str	r2, [r3, #20]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b087      	sub	sp, #28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	3330      	adds	r3, #48	; 0x30
 8000e44:	461a      	mov	r2, r3
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	f003 030c 	and.w	r3, r3, #12
 8000e50:	4413      	add	r3, r2
 8000e52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	f003 031f 	and.w	r3, r3, #31
 8000e5e:	211f      	movs	r1, #31
 8000e60:	fa01 f303 	lsl.w	r3, r1, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	401a      	ands	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	0e9b      	lsrs	r3, r3, #26
 8000e6c:	f003 011f 	and.w	r1, r3, #31
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	f003 031f 	and.w	r3, r3, #31
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	431a      	orrs	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e80:	bf00      	nop
 8000e82:	371c      	adds	r7, #28
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b087      	sub	sp, #28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	3314      	adds	r3, #20
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	0e5b      	lsrs	r3, r3, #25
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	f003 0304 	and.w	r3, r3, #4
 8000ea8:	4413      	add	r3, r2
 8000eaa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	0d1b      	lsrs	r3, r3, #20
 8000eb4:	f003 031f 	and.w	r3, r3, #31
 8000eb8:	2107      	movs	r1, #7
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	401a      	ands	r2, r3
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	0d1b      	lsrs	r3, r3, #20
 8000ec6:	f003 031f 	and.w	r3, r3, #31
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000ed6:	bf00      	nop
 8000ed8:	371c      	adds	r7, #28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000efc:	43db      	mvns	r3, r3
 8000efe:	401a      	ands	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f003 0318 	and.w	r3, r3, #24
 8000f06:	4908      	ldr	r1, [pc, #32]	; (8000f28 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f08:	40d9      	lsrs	r1, r3
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	400b      	ands	r3, r1
 8000f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f12:	431a      	orrs	r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000f1a:	bf00      	nop
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	0007ffff 	.word	0x0007ffff

08000f2c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000f3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	6093      	str	r3, [r2, #8]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f64:	d101      	bne.n	8000f6a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f66:	2301      	movs	r3, #1
 8000f68:	e000      	b.n	8000f6c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000f88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000fb4:	d101      	bne.n	8000fba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d101      	bne.n	8000fe0 <LL_ADC_IsEnabled+0x18>
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e000      	b.n	8000fe2 <LL_ADC_IsEnabled+0x1a>
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	f003 0304 	and.w	r3, r3, #4
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	d101      	bne.n	8001006 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001002:	2301      	movs	r3, #1
 8001004:	e000      	b.n	8001008 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001006:	2300      	movs	r3, #0
}
 8001008:	4618      	mov	r0, r3
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	f003 0308 	and.w	r3, r3, #8
 8001024:	2b08      	cmp	r3, #8
 8001026:	d101      	bne.n	800102c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001028:	2301      	movs	r3, #1
 800102a:	e000      	b.n	800102e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800103c:	b590      	push	{r4, r7, lr}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001044:	2300      	movs	r3, #0
 8001046:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e131      	b.n	80012ba <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001060:	2b00      	cmp	r3, #0
 8001062:	d109      	bne.n	8001078 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff fc5b 	bl	8000920 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff67 	bl	8000f50 <LL_ADC_IsDeepPowerDownEnabled>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d004      	beq.n	8001092 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff4d 	bl	8000f2c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff82 	bl	8000fa0 <LL_ADC_IsInternalRegulatorEnabled>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d115      	bne.n	80010ce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff ff66 	bl	8000f78 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80010ac:	4b85      	ldr	r3, [pc, #532]	; (80012c4 <HAL_ADC_Init+0x288>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	099b      	lsrs	r3, r3, #6
 80010b2:	4a85      	ldr	r2, [pc, #532]	; (80012c8 <HAL_ADC_Init+0x28c>)
 80010b4:	fba2 2303 	umull	r2, r3, r2, r3
 80010b8:	099b      	lsrs	r3, r3, #6
 80010ba:	3301      	adds	r3, #1
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80010c0:	e002      	b.n	80010c8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	3b01      	subs	r3, #1
 80010c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1f9      	bne.n	80010c2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ff64 	bl	8000fa0 <LL_ADC_IsInternalRegulatorEnabled>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10d      	bne.n	80010fa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010e2:	f043 0210 	orr.w	r2, r3, #16
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ee:	f043 0201 	orr.w	r2, r3, #1
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff ff75 	bl	8000fee <LL_ADC_REG_IsConversionOngoing>
 8001104:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800110a:	f003 0310 	and.w	r3, r3, #16
 800110e:	2b00      	cmp	r3, #0
 8001110:	f040 80ca 	bne.w	80012a8 <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	2b00      	cmp	r3, #0
 8001118:	f040 80c6 	bne.w	80012a8 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001120:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001124:	f043 0202 	orr.w	r2, r3, #2
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff49 	bl	8000fc8 <LL_ADC_IsEnabled>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d110      	bne.n	800115e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800113c:	4863      	ldr	r0, [pc, #396]	; (80012cc <HAL_ADC_Init+0x290>)
 800113e:	f7ff ff43 	bl	8000fc8 <LL_ADC_IsEnabled>
 8001142:	4604      	mov	r4, r0
 8001144:	4862      	ldr	r0, [pc, #392]	; (80012d0 <HAL_ADC_Init+0x294>)
 8001146:	f7ff ff3f 	bl	8000fc8 <LL_ADC_IsEnabled>
 800114a:	4603      	mov	r3, r0
 800114c:	4323      	orrs	r3, r4
 800114e:	2b00      	cmp	r3, #0
 8001150:	d105      	bne.n	800115e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	4619      	mov	r1, r3
 8001158:	485e      	ldr	r0, [pc, #376]	; (80012d4 <HAL_ADC_Init+0x298>)
 800115a:	f7ff fdcf 	bl	8000cfc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	7e5b      	ldrb	r3, [r3, #25]
 8001162:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001168:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800116e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001174:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f893 3020 	ldrb.w	r3, [r3, #32]
 800117c:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d106      	bne.n	800119a <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001190:	3b01      	subs	r3, #1
 8001192:	045b      	lsls	r3, r3, #17
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d009      	beq.n	80011b6 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a6:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ae:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	68da      	ldr	r2, [r3, #12]
 80011bc:	4b46      	ldr	r3, [pc, #280]	; (80012d8 <HAL_ADC_Init+0x29c>)
 80011be:	4013      	ands	r3, r2
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	6812      	ldr	r2, [r2, #0]
 80011c4:	69b9      	ldr	r1, [r7, #24]
 80011c6:	430b      	orrs	r3, r1
 80011c8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff ff0d 	bl	8000fee <LL_ADC_REG_IsConversionOngoing>
 80011d4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff1a 	bl	8001014 <LL_ADC_INJ_IsConversionOngoing>
 80011e0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d13d      	bne.n	8001264 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d13a      	bne.n	8001264 <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011f2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80011fa:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800120a:	f023 0302 	bic.w	r3, r3, #2
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	6812      	ldr	r2, [r2, #0]
 8001212:	69b9      	ldr	r1, [r7, #24]
 8001214:	430b      	orrs	r3, r1
 8001216:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800121e:	2b01      	cmp	r3, #1
 8001220:	d118      	bne.n	8001254 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800122c:	f023 0304 	bic.w	r3, r3, #4
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001238:	4311      	orrs	r1, r2
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800123e:	4311      	orrs	r1, r2
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001244:	430a      	orrs	r2, r1
 8001246:	431a      	orrs	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f042 0201 	orr.w	r2, r2, #1
 8001250:	611a      	str	r2, [r3, #16]
 8001252:	e007      	b.n	8001264 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	691a      	ldr	r2, [r3, #16]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 0201 	bic.w	r2, r2, #1
 8001262:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d10c      	bne.n	8001286 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f023 010f 	bic.w	r1, r3, #15
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	1e5a      	subs	r2, r3, #1
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	430a      	orrs	r2, r1
 8001282:	631a      	str	r2, [r3, #48]	; 0x30
 8001284:	e007      	b.n	8001296 <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f022 020f 	bic.w	r2, r2, #15
 8001294:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800129a:	f023 0303 	bic.w	r3, r3, #3
 800129e:	f043 0201 	orr.w	r2, r3, #1
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	655a      	str	r2, [r3, #84]	; 0x54
 80012a6:	e007      	b.n	80012b8 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ac:	f043 0210 	orr.w	r2, r3, #16
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80012b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3724      	adds	r7, #36	; 0x24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd90      	pop	{r4, r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000000 	.word	0x20000000
 80012c8:	053e2d63 	.word	0x053e2d63
 80012cc:	50040000 	.word	0x50040000
 80012d0:	50040100 	.word	0x50040100
 80012d4:	50040300 	.word	0x50040300
 80012d8:	fff0c007 	.word	0xfff0c007

080012dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b0b6      	sub	sp, #216	; 0xd8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012e6:	2300      	movs	r3, #0
 80012e8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d101      	bne.n	80012fe <HAL_ADC_ConfigChannel+0x22>
 80012fa:	2302      	movs	r3, #2
 80012fc:	e3d5      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x7ce>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2201      	movs	r2, #1
 8001302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fe6f 	bl	8000fee <LL_ADC_REG_IsConversionOngoing>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	f040 83ba 	bne.w	8001a8c <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b05      	cmp	r3, #5
 800131e:	d824      	bhi.n	800136a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	3b02      	subs	r3, #2
 8001326:	2b03      	cmp	r3, #3
 8001328:	d81b      	bhi.n	8001362 <HAL_ADC_ConfigChannel+0x86>
 800132a:	a201      	add	r2, pc, #4	; (adr r2, 8001330 <HAL_ADC_ConfigChannel+0x54>)
 800132c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001330:	08001341 	.word	0x08001341
 8001334:	08001349 	.word	0x08001349
 8001338:	08001351 	.word	0x08001351
 800133c:	08001359 	.word	0x08001359
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	220c      	movs	r2, #12
 8001344:	605a      	str	r2, [r3, #4]
          break;
 8001346:	e011      	b.n	800136c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	2212      	movs	r2, #18
 800134c:	605a      	str	r2, [r3, #4]
          break;
 800134e:	e00d      	b.n	800136c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	2218      	movs	r2, #24
 8001354:	605a      	str	r2, [r3, #4]
          break;
 8001356:	e009      	b.n	800136c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800135e:	605a      	str	r2, [r3, #4]
          break;
 8001360:	e004      	b.n	800136c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	2206      	movs	r2, #6
 8001366:	605a      	str	r2, [r3, #4]
          break;
 8001368:	e000      	b.n	800136c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800136a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6818      	ldr	r0, [r3, #0]
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	6859      	ldr	r1, [r3, #4]
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	f7ff fd5b 	bl	8000e34 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fe33 	bl	8000fee <LL_ADC_REG_IsConversionOngoing>
 8001388:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fe3f 	bl	8001014 <LL_ADC_INJ_IsConversionOngoing>
 8001396:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800139a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f040 81c1 	bne.w	8001726 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80013a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f040 81bc 	bne.w	8001726 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80013b6:	d10f      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6818      	ldr	r0, [r3, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2200      	movs	r2, #0
 80013c2:	4619      	mov	r1, r3
 80013c4:	f7ff fd62 	bl	8000e8c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fd1c 	bl	8000e0e <LL_ADC_SetSamplingTimeCommonConfig>
 80013d6:	e00e      	b.n	80013f6 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6818      	ldr	r0, [r3, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	6819      	ldr	r1, [r3, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	461a      	mov	r2, r3
 80013e6:	f7ff fd51 	bl	8000e8c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2100      	movs	r1, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fd0c 	bl	8000e0e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	695a      	ldr	r2, [r3, #20]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	08db      	lsrs	r3, r3, #3
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	2b04      	cmp	r3, #4
 8001416:	d00a      	beq.n	800142e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6818      	ldr	r0, [r3, #0]
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	6919      	ldr	r1, [r3, #16]
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001428:	f7ff fc9c 	bl	8000d64 <LL_ADC_SetOffset>
 800142c:	e17b      	b.n	8001726 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2100      	movs	r1, #0
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fcb9 	bl	8000dac <LL_ADC_GetOffsetChannel>
 800143a:	4603      	mov	r3, r0
 800143c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001440:	2b00      	cmp	r3, #0
 8001442:	d10a      	bne.n	800145a <HAL_ADC_ConfigChannel+0x17e>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fcae 	bl	8000dac <LL_ADC_GetOffsetChannel>
 8001450:	4603      	mov	r3, r0
 8001452:	0e9b      	lsrs	r3, r3, #26
 8001454:	f003 021f 	and.w	r2, r3, #31
 8001458:	e01e      	b.n	8001498 <HAL_ADC_ConfigChannel+0x1bc>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2100      	movs	r1, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fca3 	bl	8000dac <LL_ADC_GetOffsetChannel>
 8001466:	4603      	mov	r3, r0
 8001468:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001470:	fa93 f3a3 	rbit	r3, r3
 8001474:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001478:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800147c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001480:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001488:	2320      	movs	r3, #32
 800148a:	e004      	b.n	8001496 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800148c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001490:	fab3 f383 	clz	r3, r3
 8001494:	b2db      	uxtb	r3, r3
 8001496:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d105      	bne.n	80014b0 <HAL_ADC_ConfigChannel+0x1d4>
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	0e9b      	lsrs	r3, r3, #26
 80014aa:	f003 031f 	and.w	r3, r3, #31
 80014ae:	e018      	b.n	80014e2 <HAL_ADC_ConfigChannel+0x206>
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80014bc:	fa93 f3a3 	rbit	r3, r3
 80014c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80014c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80014cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d101      	bne.n	80014d8 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80014d4:	2320      	movs	r3, #32
 80014d6:	e004      	b.n	80014e2 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80014d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80014dc:	fab3 f383 	clz	r3, r3
 80014e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d106      	bne.n	80014f4 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fc72 	bl	8000dd8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2101      	movs	r1, #1
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fc56 	bl	8000dac <LL_ADC_GetOffsetChannel>
 8001500:	4603      	mov	r3, r0
 8001502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10a      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x244>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2101      	movs	r1, #1
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fc4b 	bl	8000dac <LL_ADC_GetOffsetChannel>
 8001516:	4603      	mov	r3, r0
 8001518:	0e9b      	lsrs	r3, r3, #26
 800151a:	f003 021f 	and.w	r2, r3, #31
 800151e:	e01e      	b.n	800155e <HAL_ADC_ConfigChannel+0x282>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2101      	movs	r1, #1
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fc40 	bl	8000dac <LL_ADC_GetOffsetChannel>
 800152c:	4603      	mov	r3, r0
 800152e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001532:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001536:	fa93 f3a3 	rbit	r3, r3
 800153a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800153e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001542:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001546:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800154e:	2320      	movs	r3, #32
 8001550:	e004      	b.n	800155c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001552:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001556:	fab3 f383 	clz	r3, r3
 800155a:	b2db      	uxtb	r3, r3
 800155c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001566:	2b00      	cmp	r3, #0
 8001568:	d105      	bne.n	8001576 <HAL_ADC_ConfigChannel+0x29a>
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	0e9b      	lsrs	r3, r3, #26
 8001570:	f003 031f 	and.w	r3, r3, #31
 8001574:	e018      	b.n	80015a8 <HAL_ADC_ConfigChannel+0x2cc>
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001582:	fa93 f3a3 	rbit	r3, r3
 8001586:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800158a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800158e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001592:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800159a:	2320      	movs	r3, #32
 800159c:	e004      	b.n	80015a8 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800159e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80015a2:	fab3 f383 	clz	r3, r3
 80015a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d106      	bne.n	80015ba <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2200      	movs	r2, #0
 80015b2:	2101      	movs	r1, #1
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fc0f 	bl	8000dd8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2102      	movs	r1, #2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fbf3 	bl	8000dac <LL_ADC_GetOffsetChannel>
 80015c6:	4603      	mov	r3, r0
 80015c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d10a      	bne.n	80015e6 <HAL_ADC_ConfigChannel+0x30a>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2102      	movs	r1, #2
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fbe8 	bl	8000dac <LL_ADC_GetOffsetChannel>
 80015dc:	4603      	mov	r3, r0
 80015de:	0e9b      	lsrs	r3, r3, #26
 80015e0:	f003 021f 	and.w	r2, r3, #31
 80015e4:	e01e      	b.n	8001624 <HAL_ADC_ConfigChannel+0x348>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2102      	movs	r1, #2
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fbdd 	bl	8000dac <LL_ADC_GetOffsetChannel>
 80015f2:	4603      	mov	r3, r0
 80015f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015fc:	fa93 f3a3 	rbit	r3, r3
 8001600:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001604:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001608:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800160c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001614:	2320      	movs	r3, #32
 8001616:	e004      	b.n	8001622 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001618:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800161c:	fab3 f383 	clz	r3, r3
 8001620:	b2db      	uxtb	r3, r3
 8001622:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800162c:	2b00      	cmp	r3, #0
 800162e:	d105      	bne.n	800163c <HAL_ADC_ConfigChannel+0x360>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	0e9b      	lsrs	r3, r3, #26
 8001636:	f003 031f 	and.w	r3, r3, #31
 800163a:	e016      	b.n	800166a <HAL_ADC_ConfigChannel+0x38e>
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001644:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001648:	fa93 f3a3 	rbit	r3, r3
 800164c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800164e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001650:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001654:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800165c:	2320      	movs	r3, #32
 800165e:	e004      	b.n	800166a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001660:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001664:	fab3 f383 	clz	r3, r3
 8001668:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800166a:	429a      	cmp	r2, r3
 800166c:	d106      	bne.n	800167c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2200      	movs	r2, #0
 8001674:	2102      	movs	r1, #2
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fbae 	bl	8000dd8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2103      	movs	r1, #3
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fb92 	bl	8000dac <LL_ADC_GetOffsetChannel>
 8001688:	4603      	mov	r3, r0
 800168a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10a      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x3cc>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2103      	movs	r1, #3
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fb87 	bl	8000dac <LL_ADC_GetOffsetChannel>
 800169e:	4603      	mov	r3, r0
 80016a0:	0e9b      	lsrs	r3, r3, #26
 80016a2:	f003 021f 	and.w	r2, r3, #31
 80016a6:	e017      	b.n	80016d8 <HAL_ADC_ConfigChannel+0x3fc>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2103      	movs	r1, #3
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fb7c 	bl	8000dac <LL_ADC_GetOffsetChannel>
 80016b4:	4603      	mov	r3, r0
 80016b6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80016ba:	fa93 f3a3 	rbit	r3, r3
 80016be:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80016c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016c2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80016c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80016ca:	2320      	movs	r3, #32
 80016cc:	e003      	b.n	80016d6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80016ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016d0:	fab3 f383 	clz	r3, r3
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d105      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x414>
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	0e9b      	lsrs	r3, r3, #26
 80016ea:	f003 031f 	and.w	r3, r3, #31
 80016ee:	e011      	b.n	8001714 <HAL_ADC_ConfigChannel+0x438>
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016f8:	fa93 f3a3 	rbit	r3, r3
 80016fc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80016fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001700:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001708:	2320      	movs	r3, #32
 800170a:	e003      	b.n	8001714 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800170c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800170e:	fab3 f383 	clz	r3, r3
 8001712:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001714:	429a      	cmp	r2, r3
 8001716:	d106      	bne.n	8001726 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2200      	movs	r2, #0
 800171e:	2103      	movs	r1, #3
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fb59 	bl	8000dd8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fc4c 	bl	8000fc8 <LL_ADC_IsEnabled>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	f040 8140 	bne.w	80019b8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6818      	ldr	r0, [r3, #0]
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	6819      	ldr	r1, [r3, #0]
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	461a      	mov	r2, r3
 8001746:	f7ff fbcd 	bl	8000ee4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	4a8f      	ldr	r2, [pc, #572]	; (800198c <HAL_ADC_ConfigChannel+0x6b0>)
 8001750:	4293      	cmp	r3, r2
 8001752:	f040 8131 	bne.w	80019b8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001762:	2b00      	cmp	r3, #0
 8001764:	d10b      	bne.n	800177e <HAL_ADC_ConfigChannel+0x4a2>
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	0e9b      	lsrs	r3, r3, #26
 800176c:	3301      	adds	r3, #1
 800176e:	f003 031f 	and.w	r3, r3, #31
 8001772:	2b09      	cmp	r3, #9
 8001774:	bf94      	ite	ls
 8001776:	2301      	movls	r3, #1
 8001778:	2300      	movhi	r3, #0
 800177a:	b2db      	uxtb	r3, r3
 800177c:	e019      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x4d6>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001784:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001786:	fa93 f3a3 	rbit	r3, r3
 800178a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800178c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800178e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001790:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001796:	2320      	movs	r3, #32
 8001798:	e003      	b.n	80017a2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800179a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800179c:	fab3 f383 	clz	r3, r3
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	3301      	adds	r3, #1
 80017a4:	f003 031f 	and.w	r3, r3, #31
 80017a8:	2b09      	cmp	r3, #9
 80017aa:	bf94      	ite	ls
 80017ac:	2301      	movls	r3, #1
 80017ae:	2300      	movhi	r3, #0
 80017b0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d079      	beq.n	80018aa <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d107      	bne.n	80017d2 <HAL_ADC_ConfigChannel+0x4f6>
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	0e9b      	lsrs	r3, r3, #26
 80017c8:	3301      	adds	r3, #1
 80017ca:	069b      	lsls	r3, r3, #26
 80017cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017d0:	e015      	b.n	80017fe <HAL_ADC_ConfigChannel+0x522>
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017da:	fa93 f3a3 	rbit	r3, r3
 80017de:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80017e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017e2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80017e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80017ea:	2320      	movs	r3, #32
 80017ec:	e003      	b.n	80017f6 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80017ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017f0:	fab3 f383 	clz	r3, r3
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	3301      	adds	r3, #1
 80017f8:	069b      	lsls	r3, r3, #26
 80017fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001806:	2b00      	cmp	r3, #0
 8001808:	d109      	bne.n	800181e <HAL_ADC_ConfigChannel+0x542>
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	0e9b      	lsrs	r3, r3, #26
 8001810:	3301      	adds	r3, #1
 8001812:	f003 031f 	and.w	r3, r3, #31
 8001816:	2101      	movs	r1, #1
 8001818:	fa01 f303 	lsl.w	r3, r1, r3
 800181c:	e017      	b.n	800184e <HAL_ADC_ConfigChannel+0x572>
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001826:	fa93 f3a3 	rbit	r3, r3
 800182a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800182c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800182e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001830:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001836:	2320      	movs	r3, #32
 8001838:	e003      	b.n	8001842 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800183a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800183c:	fab3 f383 	clz	r3, r3
 8001840:	b2db      	uxtb	r3, r3
 8001842:	3301      	adds	r3, #1
 8001844:	f003 031f 	and.w	r3, r3, #31
 8001848:	2101      	movs	r1, #1
 800184a:	fa01 f303 	lsl.w	r3, r1, r3
 800184e:	ea42 0103 	orr.w	r1, r2, r3
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10a      	bne.n	8001874 <HAL_ADC_ConfigChannel+0x598>
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	0e9b      	lsrs	r3, r3, #26
 8001864:	3301      	adds	r3, #1
 8001866:	f003 021f 	and.w	r2, r3, #31
 800186a:	4613      	mov	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	051b      	lsls	r3, r3, #20
 8001872:	e018      	b.n	80018a6 <HAL_ADC_ConfigChannel+0x5ca>
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800187c:	fa93 f3a3 	rbit	r3, r3
 8001880:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001884:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 800188c:	2320      	movs	r3, #32
 800188e:	e003      	b.n	8001898 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001892:	fab3 f383 	clz	r3, r3
 8001896:	b2db      	uxtb	r3, r3
 8001898:	3301      	adds	r3, #1
 800189a:	f003 021f 	and.w	r2, r3, #31
 800189e:	4613      	mov	r3, r2
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	4413      	add	r3, r2
 80018a4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018a6:	430b      	orrs	r3, r1
 80018a8:	e081      	b.n	80019ae <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d107      	bne.n	80018c6 <HAL_ADC_ConfigChannel+0x5ea>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	0e9b      	lsrs	r3, r3, #26
 80018bc:	3301      	adds	r3, #1
 80018be:	069b      	lsls	r3, r3, #26
 80018c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018c4:	e015      	b.n	80018f2 <HAL_ADC_ConfigChannel+0x616>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ce:	fa93 f3a3 	rbit	r3, r3
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80018d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80018d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80018de:	2320      	movs	r3, #32
 80018e0:	e003      	b.n	80018ea <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80018e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018e4:	fab3 f383 	clz	r3, r3
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	3301      	adds	r3, #1
 80018ec:	069b      	lsls	r3, r3, #26
 80018ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d109      	bne.n	8001912 <HAL_ADC_ConfigChannel+0x636>
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	0e9b      	lsrs	r3, r3, #26
 8001904:	3301      	adds	r3, #1
 8001906:	f003 031f 	and.w	r3, r3, #31
 800190a:	2101      	movs	r1, #1
 800190c:	fa01 f303 	lsl.w	r3, r1, r3
 8001910:	e017      	b.n	8001942 <HAL_ADC_ConfigChannel+0x666>
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001918:	6a3b      	ldr	r3, [r7, #32]
 800191a:	fa93 f3a3 	rbit	r3, r3
 800191e:	61fb      	str	r3, [r7, #28]
  return result;
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800192a:	2320      	movs	r3, #32
 800192c:	e003      	b.n	8001936 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	fab3 f383 	clz	r3, r3
 8001934:	b2db      	uxtb	r3, r3
 8001936:	3301      	adds	r3, #1
 8001938:	f003 031f 	and.w	r3, r3, #31
 800193c:	2101      	movs	r1, #1
 800193e:	fa01 f303 	lsl.w	r3, r1, r3
 8001942:	ea42 0103 	orr.w	r1, r2, r3
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10d      	bne.n	800196e <HAL_ADC_ConfigChannel+0x692>
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	0e9b      	lsrs	r3, r3, #26
 8001958:	3301      	adds	r3, #1
 800195a:	f003 021f 	and.w	r2, r3, #31
 800195e:	4613      	mov	r3, r2
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	4413      	add	r3, r2
 8001964:	3b1e      	subs	r3, #30
 8001966:	051b      	lsls	r3, r3, #20
 8001968:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800196c:	e01e      	b.n	80019ac <HAL_ADC_ConfigChannel+0x6d0>
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	fa93 f3a3 	rbit	r3, r3
 800197a:	613b      	str	r3, [r7, #16]
  return result;
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d104      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001986:	2320      	movs	r3, #32
 8001988:	e006      	b.n	8001998 <HAL_ADC_ConfigChannel+0x6bc>
 800198a:	bf00      	nop
 800198c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	fab3 f383 	clz	r3, r3
 8001996:	b2db      	uxtb	r3, r3
 8001998:	3301      	adds	r3, #1
 800199a:	f003 021f 	and.w	r2, r3, #31
 800199e:	4613      	mov	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	4413      	add	r3, r2
 80019a4:	3b1e      	subs	r3, #30
 80019a6:	051b      	lsls	r3, r3, #20
 80019a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019ac:	430b      	orrs	r3, r1
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	6892      	ldr	r2, [r2, #8]
 80019b2:	4619      	mov	r1, r3
 80019b4:	f7ff fa6a 	bl	8000e8c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4b3d      	ldr	r3, [pc, #244]	; (8001ab4 <HAL_ADC_ConfigChannel+0x7d8>)
 80019be:	4013      	ands	r3, r2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d06c      	beq.n	8001a9e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019c4:	483c      	ldr	r0, [pc, #240]	; (8001ab8 <HAL_ADC_ConfigChannel+0x7dc>)
 80019c6:	f7ff f9bf 	bl	8000d48 <LL_ADC_GetCommonPathInternalCh>
 80019ca:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a3a      	ldr	r2, [pc, #232]	; (8001abc <HAL_ADC_ConfigChannel+0x7e0>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d127      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80019d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80019dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d121      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a35      	ldr	r2, [pc, #212]	; (8001ac0 <HAL_ADC_ConfigChannel+0x7e4>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d157      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80019f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019f6:	4619      	mov	r1, r3
 80019f8:	482f      	ldr	r0, [pc, #188]	; (8001ab8 <HAL_ADC_ConfigChannel+0x7dc>)
 80019fa:	f7ff f992 	bl	8000d22 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019fe:	4b31      	ldr	r3, [pc, #196]	; (8001ac4 <HAL_ADC_ConfigChannel+0x7e8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	099b      	lsrs	r3, r3, #6
 8001a04:	4a30      	ldr	r2, [pc, #192]	; (8001ac8 <HAL_ADC_ConfigChannel+0x7ec>)
 8001a06:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0a:	099b      	lsrs	r3, r3, #6
 8001a0c:	1c5a      	adds	r2, r3, #1
 8001a0e:	4613      	mov	r3, r2
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	4413      	add	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a18:	e002      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f9      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a26:	e03a      	b.n	8001a9e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a27      	ldr	r2, [pc, #156]	; (8001acc <HAL_ADC_ConfigChannel+0x7f0>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d113      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x77e>
 8001a32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10d      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a1f      	ldr	r2, [pc, #124]	; (8001ac0 <HAL_ADC_ConfigChannel+0x7e4>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d12a      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a50:	4619      	mov	r1, r3
 8001a52:	4819      	ldr	r0, [pc, #100]	; (8001ab8 <HAL_ADC_ConfigChannel+0x7dc>)
 8001a54:	f7ff f965 	bl	8000d22 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a58:	e021      	b.n	8001a9e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a1c      	ldr	r2, [pc, #112]	; (8001ad0 <HAL_ADC_ConfigChannel+0x7f4>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d11c      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001a64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d116      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a12      	ldr	r2, [pc, #72]	; (8001ac0 <HAL_ADC_ConfigChannel+0x7e4>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d111      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a82:	4619      	mov	r1, r3
 8001a84:	480c      	ldr	r0, [pc, #48]	; (8001ab8 <HAL_ADC_ConfigChannel+0x7dc>)
 8001a86:	f7ff f94c 	bl	8000d22 <LL_ADC_SetCommonPathInternalCh>
 8001a8a:	e008      	b.n	8001a9e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a90:	f043 0220 	orr.w	r2, r3, #32
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001aa6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	37d8      	adds	r7, #216	; 0xd8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	80080000 	.word	0x80080000
 8001ab8:	50040300 	.word	0x50040300
 8001abc:	c7520000 	.word	0xc7520000
 8001ac0:	50040000 	.word	0x50040000
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	053e2d63 	.word	0x053e2d63
 8001acc:	cb840000 	.word	0xcb840000
 8001ad0:	80000001 	.word	0x80000001

08001ad4 <LL_ADC_IsEnabled>:
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d101      	bne.n	8001aec <LL_ADC_IsEnabled+0x18>
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <LL_ADC_IsEnabled+0x1a>
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <LL_ADC_REG_IsConversionOngoing>:
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d101      	bne.n	8001b12 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001b20:	b590      	push	{r4, r7, lr}
 8001b22:	b09f      	sub	sp, #124	; 0x7c
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d101      	bne.n	8001b3e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e089      	b.n	8001c52 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001b46:	2300      	movs	r3, #0
 8001b48:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a42      	ldr	r2, [pc, #264]	; (8001c5c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d102      	bne.n	8001b5e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001b58:	4b41      	ldr	r3, [pc, #260]	; (8001c60 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	e001      	b.n	8001b62 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d10b      	bne.n	8001b80 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6c:	f043 0220 	orr.w	r2, r3, #32
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e068      	b.n	8001c52 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff ffb9 	bl	8001afa <LL_ADC_REG_IsConversionOngoing>
 8001b88:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff ffb3 	bl	8001afa <LL_ADC_REG_IsConversionOngoing>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d14a      	bne.n	8001c30 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001b9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d147      	bne.n	8001c30 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001ba0:	4b30      	ldr	r3, [pc, #192]	; (8001c64 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8001ba2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d027      	beq.n	8001bfc <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	6859      	ldr	r1, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bbe:	035b      	lsls	r3, r3, #13
 8001bc0:	430b      	orrs	r3, r1
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bc6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bc8:	4824      	ldr	r0, [pc, #144]	; (8001c5c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001bca:	f7ff ff83 	bl	8001ad4 <LL_ADC_IsEnabled>
 8001bce:	4604      	mov	r4, r0
 8001bd0:	4823      	ldr	r0, [pc, #140]	; (8001c60 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001bd2:	f7ff ff7f 	bl	8001ad4 <LL_ADC_IsEnabled>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	4323      	orrs	r3, r4
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d132      	bne.n	8001c44 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001be6:	f023 030f 	bic.w	r3, r3, #15
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	6811      	ldr	r1, [r2, #0]
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	6892      	ldr	r2, [r2, #8]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bf8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001bfa:	e023      	b.n	8001c44 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c06:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c08:	4814      	ldr	r0, [pc, #80]	; (8001c5c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001c0a:	f7ff ff63 	bl	8001ad4 <LL_ADC_IsEnabled>
 8001c0e:	4604      	mov	r4, r0
 8001c10:	4813      	ldr	r0, [pc, #76]	; (8001c60 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001c12:	f7ff ff5f 	bl	8001ad4 <LL_ADC_IsEnabled>
 8001c16:	4603      	mov	r3, r0
 8001c18:	4323      	orrs	r3, r4
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d112      	bne.n	8001c44 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001c26:	f023 030f 	bic.w	r3, r3, #15
 8001c2a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001c2c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c2e:	e009      	b.n	8001c44 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c34:	f043 0220 	orr.w	r2, r3, #32
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001c42:	e000      	b.n	8001c46 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c44:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c4e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	377c      	adds	r7, #124	; 0x7c
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd90      	pop	{r4, r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	50040000 	.word	0x50040000
 8001c60:	50040100 	.word	0x50040100
 8001c64:	50040300 	.word	0x50040300

08001c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c84:	4013      	ands	r3, r2
 8001c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c9a:	4a04      	ldr	r2, [pc, #16]	; (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	60d3      	str	r3, [r2, #12]
}
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb4:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	0a1b      	lsrs	r3, r3, #8
 8001cba:	f003 0307 	and.w	r3, r3, #7
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	db0b      	blt.n	8001cf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	f003 021f 	and.w	r2, r3, #31
 8001ce4:	4907      	ldr	r1, [pc, #28]	; (8001d04 <__NVIC_EnableIRQ+0x38>)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	095b      	lsrs	r3, r3, #5
 8001cec:	2001      	movs	r0, #1
 8001cee:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000e100 	.word	0xe000e100

08001d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	6039      	str	r1, [r7, #0]
 8001d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	db0a      	blt.n	8001d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	490c      	ldr	r1, [pc, #48]	; (8001d54 <__NVIC_SetPriority+0x4c>)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	0112      	lsls	r2, r2, #4
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d30:	e00a      	b.n	8001d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	4908      	ldr	r1, [pc, #32]	; (8001d58 <__NVIC_SetPriority+0x50>)
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	3b04      	subs	r3, #4
 8001d40:	0112      	lsls	r2, r2, #4
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	440b      	add	r3, r1
 8001d46:	761a      	strb	r2, [r3, #24]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000e100 	.word	0xe000e100
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b089      	sub	sp, #36	; 0x24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f1c3 0307 	rsb	r3, r3, #7
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	bf28      	it	cs
 8001d7a:	2304      	movcs	r3, #4
 8001d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3304      	adds	r3, #4
 8001d82:	2b06      	cmp	r3, #6
 8001d84:	d902      	bls.n	8001d8c <NVIC_EncodePriority+0x30>
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3b03      	subs	r3, #3
 8001d8a:	e000      	b.n	8001d8e <NVIC_EncodePriority+0x32>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43da      	mvns	r2, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	401a      	ands	r2, r3
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	43d9      	mvns	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db4:	4313      	orrs	r3, r2
         );
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3724      	adds	r7, #36	; 0x24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff ff4c 	bl	8001c68 <__NVIC_SetPriorityGrouping>
}
 8001dd0:	bf00      	nop
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dea:	f7ff ff61 	bl	8001cb0 <__NVIC_GetPriorityGrouping>
 8001dee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	68b9      	ldr	r1, [r7, #8]
 8001df4:	6978      	ldr	r0, [r7, #20]
 8001df6:	f7ff ffb1 	bl	8001d5c <NVIC_EncodePriority>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e00:	4611      	mov	r1, r2
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff ff80 	bl	8001d08 <__NVIC_SetPriority>
}
 8001e08:	bf00      	nop
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff ff54 	bl	8001ccc <__NVIC_EnableIRQ>
}
 8001e24:	bf00      	nop
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b087      	sub	sp, #28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e3a:	e14e      	b.n	80020da <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	2101      	movs	r1, #1
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	fa01 f303 	lsl.w	r3, r1, r3
 8001e48:	4013      	ands	r3, r2
 8001e4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 8140 	beq.w	80020d4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d005      	beq.n	8001e6c <HAL_GPIO_Init+0x40>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 0303 	and.w	r3, r3, #3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d130      	bne.n	8001ece <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	2203      	movs	r2, #3
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	091b      	lsrs	r3, r3, #4
 8001eb8:	f003 0201 	and.w	r2, r3, #1
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	d017      	beq.n	8001f0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d123      	bne.n	8001f5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	08da      	lsrs	r2, r3, #3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3208      	adds	r2, #8
 8001f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	220f      	movs	r2, #15
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4013      	ands	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	691a      	ldr	r2, [r3, #16]
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	08da      	lsrs	r2, r3, #3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3208      	adds	r2, #8
 8001f58:	6939      	ldr	r1, [r7, #16]
 8001f5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	2203      	movs	r2, #3
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4013      	ands	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 0203 	and.w	r2, r3, #3
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 809a 	beq.w	80020d4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa0:	4b55      	ldr	r3, [pc, #340]	; (80020f8 <HAL_GPIO_Init+0x2cc>)
 8001fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa4:	4a54      	ldr	r2, [pc, #336]	; (80020f8 <HAL_GPIO_Init+0x2cc>)
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	6613      	str	r3, [r2, #96]	; 0x60
 8001fac:	4b52      	ldr	r3, [pc, #328]	; (80020f8 <HAL_GPIO_Init+0x2cc>)
 8001fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fb8:	4a50      	ldr	r2, [pc, #320]	; (80020fc <HAL_GPIO_Init+0x2d0>)
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	089b      	lsrs	r3, r3, #2
 8001fbe:	3302      	adds	r3, #2
 8001fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	220f      	movs	r2, #15
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fe2:	d013      	beq.n	800200c <HAL_GPIO_Init+0x1e0>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a46      	ldr	r2, [pc, #280]	; (8002100 <HAL_GPIO_Init+0x2d4>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d00d      	beq.n	8002008 <HAL_GPIO_Init+0x1dc>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a45      	ldr	r2, [pc, #276]	; (8002104 <HAL_GPIO_Init+0x2d8>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d007      	beq.n	8002004 <HAL_GPIO_Init+0x1d8>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a44      	ldr	r2, [pc, #272]	; (8002108 <HAL_GPIO_Init+0x2dc>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d101      	bne.n	8002000 <HAL_GPIO_Init+0x1d4>
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e006      	b.n	800200e <HAL_GPIO_Init+0x1e2>
 8002000:	2307      	movs	r3, #7
 8002002:	e004      	b.n	800200e <HAL_GPIO_Init+0x1e2>
 8002004:	2302      	movs	r3, #2
 8002006:	e002      	b.n	800200e <HAL_GPIO_Init+0x1e2>
 8002008:	2301      	movs	r3, #1
 800200a:	e000      	b.n	800200e <HAL_GPIO_Init+0x1e2>
 800200c:	2300      	movs	r3, #0
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	f002 0203 	and.w	r2, r2, #3
 8002014:	0092      	lsls	r2, r2, #2
 8002016:	4093      	lsls	r3, r2
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800201e:	4937      	ldr	r1, [pc, #220]	; (80020fc <HAL_GPIO_Init+0x2d0>)
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	3302      	adds	r3, #2
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800202c:	4b37      	ldr	r3, [pc, #220]	; (800210c <HAL_GPIO_Init+0x2e0>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	43db      	mvns	r3, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4313      	orrs	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002050:	4a2e      	ldr	r2, [pc, #184]	; (800210c <HAL_GPIO_Init+0x2e0>)
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002056:	4b2d      	ldr	r3, [pc, #180]	; (800210c <HAL_GPIO_Init+0x2e0>)
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	43db      	mvns	r3, r3
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4013      	ands	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4313      	orrs	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800207a:	4a24      	ldr	r2, [pc, #144]	; (800210c <HAL_GPIO_Init+0x2e0>)
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002080:	4b22      	ldr	r3, [pc, #136]	; (800210c <HAL_GPIO_Init+0x2e0>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	43db      	mvns	r3, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020a4:	4a19      	ldr	r2, [pc, #100]	; (800210c <HAL_GPIO_Init+0x2e0>)
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020aa:	4b18      	ldr	r3, [pc, #96]	; (800210c <HAL_GPIO_Init+0x2e0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4013      	ands	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020ce:	4a0f      	ldr	r2, [pc, #60]	; (800210c <HAL_GPIO_Init+0x2e0>)
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	3301      	adds	r3, #1
 80020d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	fa22 f303 	lsr.w	r3, r2, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f47f aea9 	bne.w	8001e3c <HAL_GPIO_Init+0x10>
  }
}
 80020ea:	bf00      	nop
 80020ec:	bf00      	nop
 80020ee:	371c      	adds	r7, #28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40010000 	.word	0x40010000
 8002100:	48000400 	.word	0x48000400
 8002104:	48000800 	.word	0x48000800
 8002108:	48000c00 	.word	0x48000c00
 800210c:	40010400 	.word	0x40010400

08002110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	807b      	strh	r3, [r7, #2]
 800211c:	4613      	mov	r3, r2
 800211e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002120:	787b      	ldrb	r3, [r7, #1]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002126:	887a      	ldrh	r2, [r7, #2]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800212c:	e002      	b.n	8002134 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800212e:	887a      	ldrh	r2, [r7, #2]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002152:	887a      	ldrh	r2, [r7, #2]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4013      	ands	r3, r2
 8002158:	041a      	lsls	r2, r3, #16
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	43d9      	mvns	r1, r3
 800215e:	887b      	ldrh	r3, [r7, #2]
 8002160:	400b      	ands	r3, r1
 8002162:	431a      	orrs	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	619a      	str	r2, [r3, #24]
}
 8002168:	bf00      	nop
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002178:	4b04      	ldr	r3, [pc, #16]	; (800218c <HAL_PWREx_GetVoltageRange+0x18>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002180:	4618      	mov	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40007000 	.word	0x40007000

08002190 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800219e:	d130      	bne.n	8002202 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021a0:	4b23      	ldr	r3, [pc, #140]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021ac:	d038      	beq.n	8002220 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021ae:	4b20      	ldr	r3, [pc, #128]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021b6:	4a1e      	ldr	r2, [pc, #120]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021be:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2232      	movs	r2, #50	; 0x32
 80021c4:	fb02 f303 	mul.w	r3, r2, r3
 80021c8:	4a1b      	ldr	r2, [pc, #108]	; (8002238 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021ca:	fba2 2303 	umull	r2, r3, r2, r3
 80021ce:	0c9b      	lsrs	r3, r3, #18
 80021d0:	3301      	adds	r3, #1
 80021d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021d4:	e002      	b.n	80021dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	3b01      	subs	r3, #1
 80021da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021dc:	4b14      	ldr	r3, [pc, #80]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021e8:	d102      	bne.n	80021f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f2      	bne.n	80021d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021fc:	d110      	bne.n	8002220 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e00f      	b.n	8002222 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002202:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800220a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800220e:	d007      	beq.n	8002220 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002210:	4b07      	ldr	r3, [pc, #28]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002218:	4a05      	ldr	r2, [pc, #20]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800221a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800221e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40007000 	.word	0x40007000
 8002234:	20000000 	.word	0x20000000
 8002238:	431bde83 	.word	0x431bde83

0800223c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08a      	sub	sp, #40	; 0x28
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d102      	bne.n	8002250 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	f000 bc52 	b.w	8002af4 <HAL_RCC_OscConfig+0x8b8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002250:	4ba1      	ldr	r3, [pc, #644]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 030c 	and.w	r3, r3, #12
 8002258:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800225a:	4b9f      	ldr	r3, [pc, #636]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0310 	and.w	r3, r3, #16
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 80e6 	beq.w	800243e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d007      	beq.n	8002288 <HAL_RCC_OscConfig+0x4c>
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	2b0c      	cmp	r3, #12
 800227c:	f040 808d 	bne.w	800239a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	2b01      	cmp	r3, #1
 8002284:	f040 8089 	bne.w	800239a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002288:	4b93      	ldr	r3, [pc, #588]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d006      	beq.n	80022a2 <HAL_RCC_OscConfig+0x66>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d102      	bne.n	80022a2 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	f000 bc29 	b.w	8002af4 <HAL_RCC_OscConfig+0x8b8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022a6:	4b8c      	ldr	r3, [pc, #560]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d004      	beq.n	80022bc <HAL_RCC_OscConfig+0x80>
 80022b2:	4b89      	ldr	r3, [pc, #548]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ba:	e005      	b.n	80022c8 <HAL_RCC_OscConfig+0x8c>
 80022bc:	4b86      	ldr	r3, [pc, #536]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80022be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022c2:	091b      	lsrs	r3, r3, #4
 80022c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d224      	bcs.n	8002316 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 fe0b 	bl	8002eec <RCC_SetFlashLatencyFromMSIRange>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d002      	beq.n	80022e2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	f000 bc09 	b.w	8002af4 <HAL_RCC_OscConfig+0x8b8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022e2:	4b7d      	ldr	r3, [pc, #500]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a7c      	ldr	r2, [pc, #496]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80022e8:	f043 0308 	orr.w	r3, r3, #8
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	4b7a      	ldr	r3, [pc, #488]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	4977      	ldr	r1, [pc, #476]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002300:	4b75      	ldr	r3, [pc, #468]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	021b      	lsls	r3, r3, #8
 800230e:	4972      	ldr	r1, [pc, #456]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 8002310:	4313      	orrs	r3, r2
 8002312:	604b      	str	r3, [r1, #4]
 8002314:	e025      	b.n	8002362 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002316:	4b70      	ldr	r3, [pc, #448]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a6f      	ldr	r2, [pc, #444]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 800231c:	f043 0308 	orr.w	r3, r3, #8
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	4b6d      	ldr	r3, [pc, #436]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	496a      	ldr	r1, [pc, #424]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 8002330:	4313      	orrs	r3, r2
 8002332:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002334:	4b68      	ldr	r3, [pc, #416]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	021b      	lsls	r3, r3, #8
 8002342:	4965      	ldr	r1, [pc, #404]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 8002344:	4313      	orrs	r3, r2
 8002346:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d109      	bne.n	8002362 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	4618      	mov	r0, r3
 8002354:	f000 fdca 	bl	8002eec <RCC_SetFlashLatencyFromMSIRange>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e3c8      	b.n	8002af4 <HAL_RCC_OscConfig+0x8b8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002362:	f000 fccd 	bl	8002d00 <HAL_RCC_GetSysClockFreq>
 8002366:	4602      	mov	r2, r0
 8002368:	4b5b      	ldr	r3, [pc, #364]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	091b      	lsrs	r3, r3, #4
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	495a      	ldr	r1, [pc, #360]	; (80024dc <HAL_RCC_OscConfig+0x2a0>)
 8002374:	5ccb      	ldrb	r3, [r1, r3]
 8002376:	f003 031f 	and.w	r3, r3, #31
 800237a:	fa22 f303 	lsr.w	r3, r2, r3
 800237e:	4a58      	ldr	r2, [pc, #352]	; (80024e0 <HAL_RCC_OscConfig+0x2a4>)
 8002380:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002382:	4b58      	ldr	r3, [pc, #352]	; (80024e4 <HAL_RCC_OscConfig+0x2a8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f7fe fb4c 	bl	8000a24 <HAL_InitTick>
 800238c:	4603      	mov	r3, r0
 800238e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002390:	7dfb      	ldrb	r3, [r7, #23]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d052      	beq.n	800243c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002396:	7dfb      	ldrb	r3, [r7, #23]
 8002398:	e3ac      	b.n	8002af4 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d032      	beq.n	8002408 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023a2:	4b4d      	ldr	r3, [pc, #308]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a4c      	ldr	r2, [pc, #304]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023ae:	f7fe fc75 	bl	8000c9c <HAL_GetTick>
 80023b2:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023b6:	f7fe fc71 	bl	8000c9c <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e395      	b.n	8002af4 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023c8:	4b43      	ldr	r3, [pc, #268]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0f0      	beq.n	80023b6 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023d4:	4b40      	ldr	r3, [pc, #256]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a3f      	ldr	r2, [pc, #252]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80023da:	f043 0308 	orr.w	r3, r3, #8
 80023de:	6013      	str	r3, [r2, #0]
 80023e0:	4b3d      	ldr	r3, [pc, #244]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	493a      	ldr	r1, [pc, #232]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023f2:	4b39      	ldr	r3, [pc, #228]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	021b      	lsls	r3, r3, #8
 8002400:	4935      	ldr	r1, [pc, #212]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 8002402:	4313      	orrs	r3, r2
 8002404:	604b      	str	r3, [r1, #4]
 8002406:	e01a      	b.n	800243e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002408:	4b33      	ldr	r3, [pc, #204]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a32      	ldr	r2, [pc, #200]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 800240e:	f023 0301 	bic.w	r3, r3, #1
 8002412:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002414:	f7fe fc42 	bl	8000c9c <HAL_GetTick>
 8002418:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800241c:	f7fe fc3e 	bl	8000c9c <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e362      	b.n	8002af4 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800242e:	4b2a      	ldr	r3, [pc, #168]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x1e0>
 800243a:	e000      	b.n	800243e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800243c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d073      	beq.n	8002532 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	2b08      	cmp	r3, #8
 800244e:	d005      	beq.n	800245c <HAL_RCC_OscConfig+0x220>
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	2b0c      	cmp	r3, #12
 8002454:	d10e      	bne.n	8002474 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	2b03      	cmp	r3, #3
 800245a:	d10b      	bne.n	8002474 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800245c:	4b1e      	ldr	r3, [pc, #120]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d063      	beq.n	8002530 <HAL_RCC_OscConfig+0x2f4>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d15f      	bne.n	8002530 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e33f      	b.n	8002af4 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800247c:	d106      	bne.n	800248c <HAL_RCC_OscConfig+0x250>
 800247e:	4b16      	ldr	r3, [pc, #88]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a15      	ldr	r2, [pc, #84]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 8002484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	e01d      	b.n	80024c8 <HAL_RCC_OscConfig+0x28c>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002494:	d10c      	bne.n	80024b0 <HAL_RCC_OscConfig+0x274>
 8002496:	4b10      	ldr	r3, [pc, #64]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a0f      	ldr	r2, [pc, #60]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 800249c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a0c      	ldr	r2, [pc, #48]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80024a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	e00b      	b.n	80024c8 <HAL_RCC_OscConfig+0x28c>
 80024b0:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a08      	ldr	r2, [pc, #32]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80024b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a05      	ldr	r2, [pc, #20]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80024c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d01b      	beq.n	8002508 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7fe fbe4 	bl	8000c9c <HAL_GetTick>
 80024d4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024d6:	e010      	b.n	80024fa <HAL_RCC_OscConfig+0x2be>
 80024d8:	40021000 	.word	0x40021000
 80024dc:	08006c7c 	.word	0x08006c7c
 80024e0:	20000000 	.word	0x20000000
 80024e4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e8:	f7fe fbd8 	bl	8000c9c <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b64      	cmp	r3, #100	; 0x64
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e2fc      	b.n	8002af4 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024fa:	4ba0      	ldr	r3, [pc, #640]	; (800277c <HAL_RCC_OscConfig+0x540>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0x2ac>
 8002506:	e014      	b.n	8002532 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002508:	f7fe fbc8 	bl	8000c9c <HAL_GetTick>
 800250c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002510:	f7fe fbc4 	bl	8000c9c <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b64      	cmp	r3, #100	; 0x64
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e2e8      	b.n	8002af4 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002522:	4b96      	ldr	r3, [pc, #600]	; (800277c <HAL_RCC_OscConfig+0x540>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x2d4>
 800252e:	e000      	b.n	8002532 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d060      	beq.n	8002600 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	2b04      	cmp	r3, #4
 8002542:	d005      	beq.n	8002550 <HAL_RCC_OscConfig+0x314>
 8002544:	6a3b      	ldr	r3, [r7, #32]
 8002546:	2b0c      	cmp	r3, #12
 8002548:	d119      	bne.n	800257e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	2b02      	cmp	r3, #2
 800254e:	d116      	bne.n	800257e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002550:	4b8a      	ldr	r3, [pc, #552]	; (800277c <HAL_RCC_OscConfig+0x540>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <HAL_RCC_OscConfig+0x32c>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e2c5      	b.n	8002af4 <HAL_RCC_OscConfig+0x8b8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002568:	4b84      	ldr	r3, [pc, #528]	; (800277c <HAL_RCC_OscConfig+0x540>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	061b      	lsls	r3, r3, #24
 8002576:	4981      	ldr	r1, [pc, #516]	; (800277c <HAL_RCC_OscConfig+0x540>)
 8002578:	4313      	orrs	r3, r2
 800257a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800257c:	e040      	b.n	8002600 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d023      	beq.n	80025ce <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002586:	4b7d      	ldr	r3, [pc, #500]	; (800277c <HAL_RCC_OscConfig+0x540>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a7c      	ldr	r2, [pc, #496]	; (800277c <HAL_RCC_OscConfig+0x540>)
 800258c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002592:	f7fe fb83 	bl	8000c9c <HAL_GetTick>
 8002596:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259a:	f7fe fb7f 	bl	8000c9c <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e2a3      	b.n	8002af4 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025ac:	4b73      	ldr	r3, [pc, #460]	; (800277c <HAL_RCC_OscConfig+0x540>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b8:	4b70      	ldr	r3, [pc, #448]	; (800277c <HAL_RCC_OscConfig+0x540>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	061b      	lsls	r3, r3, #24
 80025c6:	496d      	ldr	r1, [pc, #436]	; (800277c <HAL_RCC_OscConfig+0x540>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]
 80025cc:	e018      	b.n	8002600 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ce:	4b6b      	ldr	r3, [pc, #428]	; (800277c <HAL_RCC_OscConfig+0x540>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a6a      	ldr	r2, [pc, #424]	; (800277c <HAL_RCC_OscConfig+0x540>)
 80025d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025da:	f7fe fb5f 	bl	8000c9c <HAL_GetTick>
 80025de:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e2:	f7fe fb5b 	bl	8000c9c <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e27f      	b.n	8002af4 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025f4:	4b61      	ldr	r3, [pc, #388]	; (800277c <HAL_RCC_OscConfig+0x540>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1f0      	bne.n	80025e2 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	2b00      	cmp	r3, #0
 800260a:	d07f      	beq.n	800270c <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d05f      	beq.n	80026d4 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002614:	4b59      	ldr	r3, [pc, #356]	; (800277c <HAL_RCC_OscConfig+0x540>)
 8002616:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800261a:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	699a      	ldr	r2, [r3, #24]
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	f003 0310 	and.w	r3, r3, #16
 8002626:	429a      	cmp	r2, r3
 8002628:	d037      	beq.n	800269a <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d006      	beq.n	8002642 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e258      	b.n	8002af4 <HAL_RCC_OscConfig+0x8b8>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b00      	cmp	r3, #0
 800264a:	d01b      	beq.n	8002684 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 800264c:	4b4b      	ldr	r3, [pc, #300]	; (800277c <HAL_RCC_OscConfig+0x540>)
 800264e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002652:	4a4a      	ldr	r2, [pc, #296]	; (800277c <HAL_RCC_OscConfig+0x540>)
 8002654:	f023 0301 	bic.w	r3, r3, #1
 8002658:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800265c:	f7fe fb1e 	bl	8000c9c <HAL_GetTick>
 8002660:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002664:	f7fe fb1a 	bl	8000c9c <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b11      	cmp	r3, #17
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e23e      	b.n	8002af4 <HAL_RCC_OscConfig+0x8b8>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002676:	4b41      	ldr	r3, [pc, #260]	; (800277c <HAL_RCC_OscConfig+0x540>)
 8002678:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1ef      	bne.n	8002664 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002684:	4b3d      	ldr	r3, [pc, #244]	; (800277c <HAL_RCC_OscConfig+0x540>)
 8002686:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800268a:	f023 0210 	bic.w	r2, r3, #16
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	493a      	ldr	r1, [pc, #232]	; (800277c <HAL_RCC_OscConfig+0x540>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800269a:	4b38      	ldr	r3, [pc, #224]	; (800277c <HAL_RCC_OscConfig+0x540>)
 800269c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026a0:	4a36      	ldr	r2, [pc, #216]	; (800277c <HAL_RCC_OscConfig+0x540>)
 80026a2:	f043 0301 	orr.w	r3, r3, #1
 80026a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026aa:	f7fe faf7 	bl	8000c9c <HAL_GetTick>
 80026ae:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b2:	f7fe faf3 	bl	8000c9c <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b11      	cmp	r3, #17
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e217      	b.n	8002af4 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026c4:	4b2d      	ldr	r3, [pc, #180]	; (800277c <HAL_RCC_OscConfig+0x540>)
 80026c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0ef      	beq.n	80026b2 <HAL_RCC_OscConfig+0x476>
 80026d2:	e01b      	b.n	800270c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026d4:	4b29      	ldr	r3, [pc, #164]	; (800277c <HAL_RCC_OscConfig+0x540>)
 80026d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026da:	4a28      	ldr	r2, [pc, #160]	; (800277c <HAL_RCC_OscConfig+0x540>)
 80026dc:	f023 0301 	bic.w	r3, r3, #1
 80026e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e4:	f7fe fada 	bl	8000c9c <HAL_GetTick>
 80026e8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ec:	f7fe fad6 	bl	8000c9c <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b11      	cmp	r3, #17
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e1fa      	b.n	8002af4 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026fe:	4b1f      	ldr	r3, [pc, #124]	; (800277c <HAL_RCC_OscConfig+0x540>)
 8002700:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1ef      	bne.n	80026ec <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 80c1 	beq.w	800289c <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 800271a:	2300      	movs	r3, #0
 800271c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002720:	4b16      	ldr	r3, [pc, #88]	; (800277c <HAL_RCC_OscConfig+0x540>)
 8002722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10e      	bne.n	800274a <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800272c:	4b13      	ldr	r3, [pc, #76]	; (800277c <HAL_RCC_OscConfig+0x540>)
 800272e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002730:	4a12      	ldr	r2, [pc, #72]	; (800277c <HAL_RCC_OscConfig+0x540>)
 8002732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002736:	6593      	str	r3, [r2, #88]	; 0x58
 8002738:	4b10      	ldr	r3, [pc, #64]	; (800277c <HAL_RCC_OscConfig+0x540>)
 800273a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002744:	2301      	movs	r3, #1
 8002746:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800274a:	4b0d      	ldr	r3, [pc, #52]	; (8002780 <HAL_RCC_OscConfig+0x544>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002752:	2b00      	cmp	r3, #0
 8002754:	d11c      	bne.n	8002790 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002756:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <HAL_RCC_OscConfig+0x544>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a09      	ldr	r2, [pc, #36]	; (8002780 <HAL_RCC_OscConfig+0x544>)
 800275c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002762:	f7fe fa9b 	bl	8000c9c <HAL_GetTick>
 8002766:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002768:	e00c      	b.n	8002784 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276a:	f7fe fa97 	bl	8000c9c <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d905      	bls.n	8002784 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e1bb      	b.n	8002af4 <HAL_RCC_OscConfig+0x8b8>
 800277c:	40021000 	.word	0x40021000
 8002780:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002784:	4bb1      	ldr	r3, [pc, #708]	; (8002a4c <HAL_RCC_OscConfig+0x810>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0ec      	beq.n	800276a <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b00      	cmp	r3, #0
 800279a:	d02c      	beq.n	80027f6 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800279c:	4bac      	ldr	r3, [pc, #688]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 800279e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ae:	49a8      	ldr	r1, [pc, #672]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d010      	beq.n	80027e4 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80027c2:	4ba3      	ldr	r3, [pc, #652]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 80027c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c8:	4aa1      	ldr	r2, [pc, #644]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 80027ca:	f043 0304 	orr.w	r3, r3, #4
 80027ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027d2:	4b9f      	ldr	r3, [pc, #636]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 80027d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d8:	4a9d      	ldr	r2, [pc, #628]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027e2:	e018      	b.n	8002816 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027e4:	4b9a      	ldr	r3, [pc, #616]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 80027e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ea:	4a99      	ldr	r2, [pc, #612]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027f4:	e00f      	b.n	8002816 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027f6:	4b96      	ldr	r3, [pc, #600]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 80027f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fc:	4a94      	ldr	r2, [pc, #592]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 80027fe:	f023 0301 	bic.w	r3, r3, #1
 8002802:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002806:	4b92      	ldr	r3, [pc, #584]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 8002808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280c:	4a90      	ldr	r2, [pc, #576]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 800280e:	f023 0304 	bic.w	r3, r3, #4
 8002812:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d016      	beq.n	800284c <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281e:	f7fe fa3d 	bl	8000c9c <HAL_GetTick>
 8002822:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002824:	e00a      	b.n	800283c <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002826:	f7fe fa39 	bl	8000c9c <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	f241 3288 	movw	r2, #5000	; 0x1388
 8002834:	4293      	cmp	r3, r2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e15b      	b.n	8002af4 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800283c:	4b84      	ldr	r3, [pc, #528]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 800283e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0ed      	beq.n	8002826 <HAL_RCC_OscConfig+0x5ea>
 800284a:	e01d      	b.n	8002888 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284c:	f7fe fa26 	bl	8000c9c <HAL_GetTick>
 8002850:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002852:	e00a      	b.n	800286a <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002854:	f7fe fa22 	bl	8000c9c <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002862:	4293      	cmp	r3, r2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e144      	b.n	8002af4 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800286a:	4b79      	ldr	r3, [pc, #484]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 800286c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1ed      	bne.n	8002854 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002878:	4b75      	ldr	r3, [pc, #468]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 800287a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287e:	4a74      	ldr	r2, [pc, #464]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 8002880:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800288c:	2b01      	cmp	r3, #1
 800288e:	d105      	bne.n	800289c <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002890:	4b6f      	ldr	r3, [pc, #444]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 8002892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002894:	4a6e      	ldr	r2, [pc, #440]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 8002896:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800289a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0320 	and.w	r3, r3, #32
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d03c      	beq.n	8002922 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d01c      	beq.n	80028ea <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028b0:	4b67      	ldr	r3, [pc, #412]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 80028b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028b6:	4a66      	ldr	r2, [pc, #408]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c0:	f7fe f9ec 	bl	8000c9c <HAL_GetTick>
 80028c4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028c8:	f7fe f9e8 	bl	8000c9c <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e10c      	b.n	8002af4 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028da:	4b5d      	ldr	r3, [pc, #372]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 80028dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0ef      	beq.n	80028c8 <HAL_RCC_OscConfig+0x68c>
 80028e8:	e01b      	b.n	8002922 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028ea:	4b59      	ldr	r3, [pc, #356]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 80028ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028f0:	4a57      	ldr	r2, [pc, #348]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 80028f2:	f023 0301 	bic.w	r3, r3, #1
 80028f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fa:	f7fe f9cf 	bl	8000c9c <HAL_GetTick>
 80028fe:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002902:	f7fe f9cb 	bl	8000c9c <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e0ef      	b.n	8002af4 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002914:	4b4e      	ldr	r3, [pc, #312]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 8002916:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1ef      	bne.n	8002902 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 80e3 	beq.w	8002af2 <HAL_RCC_OscConfig+0x8b6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002930:	2b02      	cmp	r3, #2
 8002932:	f040 80b7 	bne.w	8002aa4 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002936:	4b46      	ldr	r3, [pc, #280]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f003 0203 	and.w	r2, r3, #3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	429a      	cmp	r2, r3
 8002948:	d124      	bne.n	8002994 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002954:	3b01      	subs	r3, #1
 8002956:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002958:	429a      	cmp	r2, r3
 800295a:	d11b      	bne.n	8002994 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002966:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d113      	bne.n	8002994 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002976:	085b      	lsrs	r3, r3, #1
 8002978:	3b01      	subs	r3, #1
 800297a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800297c:	429a      	cmp	r2, r3
 800297e:	d109      	bne.n	8002994 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	085b      	lsrs	r3, r3, #1
 800298c:	3b01      	subs	r3, #1
 800298e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002990:	429a      	cmp	r2, r3
 8002992:	d061      	beq.n	8002a58 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	2b0c      	cmp	r3, #12
 8002998:	d056      	beq.n	8002a48 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800299a:	4b2d      	ldr	r3, [pc, #180]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a2c      	ldr	r2, [pc, #176]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 80029a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029a4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029a6:	f7fe f979 	bl	8000c9c <HAL_GetTick>
 80029aa:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ae:	f7fe f975 	bl	8000c9c <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e099      	b.n	8002af4 <HAL_RCC_OscConfig+0x8b8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029c0:	4b23      	ldr	r3, [pc, #140]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1f0      	bne.n	80029ae <HAL_RCC_OscConfig+0x772>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029cc:	4b20      	ldr	r3, [pc, #128]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 80029ce:	68da      	ldr	r2, [r3, #12]
 80029d0:	4b20      	ldr	r3, [pc, #128]	; (8002a54 <HAL_RCC_OscConfig+0x818>)
 80029d2:	4013      	ands	r3, r2
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029dc:	3a01      	subs	r2, #1
 80029de:	0112      	lsls	r2, r2, #4
 80029e0:	4311      	orrs	r1, r2
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029e6:	0212      	lsls	r2, r2, #8
 80029e8:	4311      	orrs	r1, r2
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029ee:	0852      	lsrs	r2, r2, #1
 80029f0:	3a01      	subs	r2, #1
 80029f2:	0552      	lsls	r2, r2, #21
 80029f4:	4311      	orrs	r1, r2
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029fa:	0852      	lsrs	r2, r2, #1
 80029fc:	3a01      	subs	r2, #1
 80029fe:	0652      	lsls	r2, r2, #25
 8002a00:	430a      	orrs	r2, r1
 8002a02:	4913      	ldr	r1, [pc, #76]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a08:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a10      	ldr	r2, [pc, #64]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 8002a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a12:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a14:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	4a0d      	ldr	r2, [pc, #52]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 8002a1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a20:	f7fe f93c 	bl	8000c9c <HAL_GetTick>
 8002a24:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a28:	f7fe f938 	bl	8000c9c <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e05c      	b.n	8002af4 <HAL_RCC_OscConfig+0x8b8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a3a:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <HAL_RCC_OscConfig+0x814>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f0      	beq.n	8002a28 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a46:	e054      	b.n	8002af2 <HAL_RCC_OscConfig+0x8b6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e053      	b.n	8002af4 <HAL_RCC_OscConfig+0x8b8>
 8002a4c:	40007000 	.word	0x40007000
 8002a50:	40021000 	.word	0x40021000
 8002a54:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a58:	4b28      	ldr	r3, [pc, #160]	; (8002afc <HAL_RCC_OscConfig+0x8c0>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d146      	bne.n	8002af2 <HAL_RCC_OscConfig+0x8b6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a64:	4b25      	ldr	r3, [pc, #148]	; (8002afc <HAL_RCC_OscConfig+0x8c0>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a24      	ldr	r2, [pc, #144]	; (8002afc <HAL_RCC_OscConfig+0x8c0>)
 8002a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a70:	4b22      	ldr	r3, [pc, #136]	; (8002afc <HAL_RCC_OscConfig+0x8c0>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	4a21      	ldr	r2, [pc, #132]	; (8002afc <HAL_RCC_OscConfig+0x8c0>)
 8002a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a7c:	f7fe f90e 	bl	8000c9c <HAL_GetTick>
 8002a80:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a84:	f7fe f90a 	bl	8000c9c <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e02e      	b.n	8002af4 <HAL_RCC_OscConfig+0x8b8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a96:	4b19      	ldr	r3, [pc, #100]	; (8002afc <HAL_RCC_OscConfig+0x8c0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f0      	beq.n	8002a84 <HAL_RCC_OscConfig+0x848>
 8002aa2:	e026      	b.n	8002af2 <HAL_RCC_OscConfig+0x8b6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	2b0c      	cmp	r3, #12
 8002aa8:	d021      	beq.n	8002aee <HAL_RCC_OscConfig+0x8b2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aaa:	4b14      	ldr	r3, [pc, #80]	; (8002afc <HAL_RCC_OscConfig+0x8c0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a13      	ldr	r2, [pc, #76]	; (8002afc <HAL_RCC_OscConfig+0x8c0>)
 8002ab0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ab4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab6:	f7fe f8f1 	bl	8000c9c <HAL_GetTick>
 8002aba:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x894>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002abe:	f7fe f8ed 	bl	8000c9c <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x894>
          {
            return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e011      	b.n	8002af4 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ad0:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <HAL_RCC_OscConfig+0x8c0>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1f0      	bne.n	8002abe <HAL_RCC_OscConfig+0x882>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002adc:	4b07      	ldr	r3, [pc, #28]	; (8002afc <HAL_RCC_OscConfig+0x8c0>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	4a06      	ldr	r2, [pc, #24]	; (8002afc <HAL_RCC_OscConfig+0x8c0>)
 8002ae2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002ae6:	f023 0303 	bic.w	r3, r3, #3
 8002aea:	60d3      	str	r3, [r2, #12]
 8002aec:	e001      	b.n	8002af2 <HAL_RCC_OscConfig+0x8b6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <HAL_RCC_OscConfig+0x8b8>
      }
    }
  }
  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3728      	adds	r7, #40	; 0x28
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40021000 	.word	0x40021000

08002b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0e7      	b.n	8002ce4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b14:	4b75      	ldr	r3, [pc, #468]	; (8002cec <HAL_RCC_ClockConfig+0x1ec>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d910      	bls.n	8002b44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b22:	4b72      	ldr	r3, [pc, #456]	; (8002cec <HAL_RCC_ClockConfig+0x1ec>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 0207 	bic.w	r2, r3, #7
 8002b2a:	4970      	ldr	r1, [pc, #448]	; (8002cec <HAL_RCC_ClockConfig+0x1ec>)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b32:	4b6e      	ldr	r3, [pc, #440]	; (8002cec <HAL_RCC_ClockConfig+0x1ec>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d001      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e0cf      	b.n	8002ce4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d010      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	4b66      	ldr	r3, [pc, #408]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d908      	bls.n	8002b72 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b60:	4b63      	ldr	r3, [pc, #396]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	4960      	ldr	r1, [pc, #384]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d04c      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b03      	cmp	r3, #3
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b86:	4b5a      	ldr	r3, [pc, #360]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d121      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e0a6      	b.n	8002ce4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b9e:	4b54      	ldr	r3, [pc, #336]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d115      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e09a      	b.n	8002ce4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d107      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bb6:	4b4e      	ldr	r3, [pc, #312]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d109      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e08e      	b.n	8002ce4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bc6:	4b4a      	ldr	r3, [pc, #296]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e086      	b.n	8002ce4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bd6:	4b46      	ldr	r3, [pc, #280]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f023 0203 	bic.w	r2, r3, #3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	4943      	ldr	r1, [pc, #268]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002be8:	f7fe f858 	bl	8000c9c <HAL_GetTick>
 8002bec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bee:	e00a      	b.n	8002c06 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf0:	f7fe f854 	bl	8000c9c <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e06e      	b.n	8002ce4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c06:	4b3a      	ldr	r3, [pc, #232]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 020c 	and.w	r2, r3, #12
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d1eb      	bne.n	8002bf0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d010      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	4b31      	ldr	r3, [pc, #196]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d208      	bcs.n	8002c46 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c34:	4b2e      	ldr	r3, [pc, #184]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	492b      	ldr	r1, [pc, #172]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c46:	4b29      	ldr	r3, [pc, #164]	; (8002cec <HAL_RCC_ClockConfig+0x1ec>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d210      	bcs.n	8002c76 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c54:	4b25      	ldr	r3, [pc, #148]	; (8002cec <HAL_RCC_ClockConfig+0x1ec>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f023 0207 	bic.w	r2, r3, #7
 8002c5c:	4923      	ldr	r1, [pc, #140]	; (8002cec <HAL_RCC_ClockConfig+0x1ec>)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c64:	4b21      	ldr	r3, [pc, #132]	; (8002cec <HAL_RCC_ClockConfig+0x1ec>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d001      	beq.n	8002c76 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e036      	b.n	8002ce4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0304 	and.w	r3, r3, #4
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d008      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c82:	4b1b      	ldr	r3, [pc, #108]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	4918      	ldr	r1, [pc, #96]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0308 	and.w	r3, r3, #8
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d009      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ca0:	4b13      	ldr	r3, [pc, #76]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4910      	ldr	r1, [pc, #64]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cb4:	f000 f824 	bl	8002d00 <HAL_RCC_GetSysClockFreq>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	091b      	lsrs	r3, r3, #4
 8002cc0:	f003 030f 	and.w	r3, r3, #15
 8002cc4:	490b      	ldr	r1, [pc, #44]	; (8002cf4 <HAL_RCC_ClockConfig+0x1f4>)
 8002cc6:	5ccb      	ldrb	r3, [r1, r3]
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd0:	4a09      	ldr	r2, [pc, #36]	; (8002cf8 <HAL_RCC_ClockConfig+0x1f8>)
 8002cd2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002cd4:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <HAL_RCC_ClockConfig+0x1fc>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fd fea3 	bl	8000a24 <HAL_InitTick>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ce2:	7afb      	ldrb	r3, [r7, #11]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40022000 	.word	0x40022000
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	08006c7c 	.word	0x08006c7c
 8002cf8:	20000000 	.word	0x20000000
 8002cfc:	20000004 	.word	0x20000004

08002d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b089      	sub	sp, #36	; 0x24
 8002d04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61fb      	str	r3, [r7, #28]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d0e:	4b3e      	ldr	r3, [pc, #248]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d18:	4b3b      	ldr	r3, [pc, #236]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f003 0303 	and.w	r3, r3, #3
 8002d20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <HAL_RCC_GetSysClockFreq+0x34>
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	2b0c      	cmp	r3, #12
 8002d2c:	d121      	bne.n	8002d72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d11e      	bne.n	8002d72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d34:	4b34      	ldr	r3, [pc, #208]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d107      	bne.n	8002d50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d40:	4b31      	ldr	r3, [pc, #196]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d46:	0a1b      	lsrs	r3, r3, #8
 8002d48:	f003 030f 	and.w	r3, r3, #15
 8002d4c:	61fb      	str	r3, [r7, #28]
 8002d4e:	e005      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d50:	4b2d      	ldr	r3, [pc, #180]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	091b      	lsrs	r3, r3, #4
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d5c:	4a2b      	ldr	r2, [pc, #172]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10d      	bne.n	8002d88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d70:	e00a      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d102      	bne.n	8002d7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d78:	4b25      	ldr	r3, [pc, #148]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d7a:	61bb      	str	r3, [r7, #24]
 8002d7c:	e004      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	2b08      	cmp	r3, #8
 8002d82:	d101      	bne.n	8002d88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d84:	4b23      	ldr	r3, [pc, #140]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	2b0c      	cmp	r3, #12
 8002d8c:	d134      	bne.n	8002df8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d8e:	4b1e      	ldr	r3, [pc, #120]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d003      	beq.n	8002da6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2b03      	cmp	r3, #3
 8002da2:	d003      	beq.n	8002dac <HAL_RCC_GetSysClockFreq+0xac>
 8002da4:	e005      	b.n	8002db2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002da6:	4b1a      	ldr	r3, [pc, #104]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x110>)
 8002da8:	617b      	str	r3, [r7, #20]
      break;
 8002daa:	e005      	b.n	8002db8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002dac:	4b19      	ldr	r3, [pc, #100]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x114>)
 8002dae:	617b      	str	r3, [r7, #20]
      break;
 8002db0:	e002      	b.n	8002db8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	617b      	str	r3, [r7, #20]
      break;
 8002db6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002db8:	4b13      	ldr	r3, [pc, #76]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	091b      	lsrs	r3, r3, #4
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002dc6:	4b10      	ldr	r3, [pc, #64]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	0a1b      	lsrs	r3, r3, #8
 8002dcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	fb02 f203 	mul.w	r2, r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ddc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dde:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	0e5b      	lsrs	r3, r3, #25
 8002de4:	f003 0303 	and.w	r3, r3, #3
 8002de8:	3301      	adds	r3, #1
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002df8:	69bb      	ldr	r3, [r7, #24]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3724      	adds	r7, #36	; 0x24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	08006c94 	.word	0x08006c94
 8002e10:	00f42400 	.word	0x00f42400
 8002e14:	007a1200 	.word	0x007a1200

08002e18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e1c:	4b03      	ldr	r3, [pc, #12]	; (8002e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	20000000 	.word	0x20000000

08002e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e34:	f7ff fff0 	bl	8002e18 <HAL_RCC_GetHCLKFreq>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	0a1b      	lsrs	r3, r3, #8
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	4904      	ldr	r1, [pc, #16]	; (8002e58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e46:	5ccb      	ldrb	r3, [r1, r3]
 8002e48:	f003 031f 	and.w	r3, r3, #31
 8002e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40021000 	.word	0x40021000
 8002e58:	08006c8c 	.word	0x08006c8c

08002e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e60:	f7ff ffda 	bl	8002e18 <HAL_RCC_GetHCLKFreq>
 8002e64:	4602      	mov	r2, r0
 8002e66:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	0adb      	lsrs	r3, r3, #11
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	4904      	ldr	r1, [pc, #16]	; (8002e84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e72:	5ccb      	ldrb	r3, [r1, r3]
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40021000 	.word	0x40021000
 8002e84:	08006c8c 	.word	0x08006c8c

08002e88 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	220f      	movs	r2, #15
 8002e96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002e98:	4b12      	ldr	r3, [pc, #72]	; (8002ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 0203 	and.w	r2, r3, #3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002ea4:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002eb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002ebc:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	08db      	lsrs	r3, r3, #3
 8002ec2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002eca:	4b07      	ldr	r3, [pc, #28]	; (8002ee8 <HAL_RCC_GetClockConfig+0x60>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0207 	and.w	r2, r3, #7
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	601a      	str	r2, [r3, #0]
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40022000 	.word	0x40022000

08002eec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ef8:	4b2a      	ldr	r3, [pc, #168]	; (8002fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f04:	f7ff f936 	bl	8002174 <HAL_PWREx_GetVoltageRange>
 8002f08:	6178      	str	r0, [r7, #20]
 8002f0a:	e014      	b.n	8002f36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f0c:	4b25      	ldr	r3, [pc, #148]	; (8002fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f10:	4a24      	ldr	r2, [pc, #144]	; (8002fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f16:	6593      	str	r3, [r2, #88]	; 0x58
 8002f18:	4b22      	ldr	r3, [pc, #136]	; (8002fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f24:	f7ff f926 	bl	8002174 <HAL_PWREx_GetVoltageRange>
 8002f28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f2a:	4b1e      	ldr	r3, [pc, #120]	; (8002fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2e:	4a1d      	ldr	r2, [pc, #116]	; (8002fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f34:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f3c:	d10b      	bne.n	8002f56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b80      	cmp	r3, #128	; 0x80
 8002f42:	d919      	bls.n	8002f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2ba0      	cmp	r3, #160	; 0xa0
 8002f48:	d902      	bls.n	8002f50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	e013      	b.n	8002f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f50:	2301      	movs	r3, #1
 8002f52:	613b      	str	r3, [r7, #16]
 8002f54:	e010      	b.n	8002f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b80      	cmp	r3, #128	; 0x80
 8002f5a:	d902      	bls.n	8002f62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	613b      	str	r3, [r7, #16]
 8002f60:	e00a      	b.n	8002f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b80      	cmp	r3, #128	; 0x80
 8002f66:	d102      	bne.n	8002f6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f68:	2302      	movs	r3, #2
 8002f6a:	613b      	str	r3, [r7, #16]
 8002f6c:	e004      	b.n	8002f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b70      	cmp	r3, #112	; 0x70
 8002f72:	d101      	bne.n	8002f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f74:	2301      	movs	r3, #1
 8002f76:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f78:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f023 0207 	bic.w	r2, r3, #7
 8002f80:	4909      	ldr	r1, [pc, #36]	; (8002fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f88:	4b07      	ldr	r3, [pc, #28]	; (8002fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d001      	beq.n	8002f9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	40022000 	.word	0x40022000

08002fac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fb8:	2300      	movs	r3, #0
 8002fba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 809e 	beq.w	8003106 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fce:	4b46      	ldr	r3, [pc, #280]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00d      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe4:	4b40      	ldr	r3, [pc, #256]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe8:	4a3f      	ldr	r2, [pc, #252]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fee:	6593      	str	r3, [r2, #88]	; 0x58
 8002ff0:	4b3d      	ldr	r3, [pc, #244]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003000:	4b3a      	ldr	r3, [pc, #232]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a39      	ldr	r2, [pc, #228]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800300a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800300c:	f7fd fe46 	bl	8000c9c <HAL_GetTick>
 8003010:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003012:	e009      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003014:	f7fd fe42 	bl	8000c9c <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d902      	bls.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	74fb      	strb	r3, [r7, #19]
        break;
 8003026:	e005      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003028:	4b30      	ldr	r3, [pc, #192]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0ef      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8003034:	7cfb      	ldrb	r3, [r7, #19]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d15a      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800303a:	4b2b      	ldr	r3, [pc, #172]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800303c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003040:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003044:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d01e      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0xde>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	429a      	cmp	r2, r3
 8003054:	d019      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003056:	4b24      	ldr	r3, [pc, #144]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003060:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003062:	4b21      	ldr	r3, [pc, #132]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003068:	4a1f      	ldr	r2, [pc, #124]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800306a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800306e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003072:	4b1d      	ldr	r3, [pc, #116]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003078:	4a1b      	ldr	r2, [pc, #108]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800307a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800307e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003082:	4a19      	ldr	r2, [pc, #100]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d016      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7fd fe02 	bl	8000c9c <HAL_GetTick>
 8003098:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800309a:	e00b      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800309c:	f7fd fdfe 	bl	8000c9c <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d902      	bls.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	74fb      	strb	r3, [r7, #19]
            break;
 80030b2:	e006      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030b4:	4b0c      	ldr	r3, [pc, #48]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80030b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0ec      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80030c2:	7cfb      	ldrb	r3, [r7, #19]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10b      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030c8:	4b07      	ldr	r3, [pc, #28]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80030ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	4904      	ldr	r1, [pc, #16]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030de:	e009      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030e0:	7cfb      	ldrb	r3, [r7, #19]
 80030e2:	74bb      	strb	r3, [r7, #18]
 80030e4:	e006      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80030e6:	bf00      	nop
 80030e8:	40021000 	.word	0x40021000
 80030ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f0:	7cfb      	ldrb	r3, [r7, #19]
 80030f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030f4:	7c7b      	ldrb	r3, [r7, #17]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d105      	bne.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030fa:	4b6e      	ldr	r3, [pc, #440]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80030fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fe:	4a6d      	ldr	r2, [pc, #436]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003104:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003112:	4b68      	ldr	r3, [pc, #416]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003118:	f023 0203 	bic.w	r2, r3, #3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	4964      	ldr	r1, [pc, #400]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003122:	4313      	orrs	r3, r2
 8003124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00a      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003134:	4b5f      	ldr	r3, [pc, #380]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313a:	f023 020c 	bic.w	r2, r3, #12
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	495c      	ldr	r1, [pc, #368]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003144:	4313      	orrs	r3, r2
 8003146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0304 	and.w	r3, r3, #4
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00a      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003156:	4b57      	ldr	r3, [pc, #348]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	4953      	ldr	r1, [pc, #332]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003166:	4313      	orrs	r3, r2
 8003168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0320 	and.w	r3, r3, #32
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00a      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003178:	4b4e      	ldr	r3, [pc, #312]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800317a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	494b      	ldr	r1, [pc, #300]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003188:	4313      	orrs	r3, r2
 800318a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00a      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800319a:	4b46      	ldr	r3, [pc, #280]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800319c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	4942      	ldr	r1, [pc, #264]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00a      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031bc:	4b3d      	ldr	r3, [pc, #244]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	493a      	ldr	r1, [pc, #232]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00a      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031de:	4b35      	ldr	r3, [pc, #212]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	4931      	ldr	r1, [pc, #196]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00a      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003200:	4b2c      	ldr	r3, [pc, #176]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003206:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	4929      	ldr	r1, [pc, #164]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003210:	4313      	orrs	r3, r2
 8003212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00a      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003222:	4b24      	ldr	r3, [pc, #144]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003228:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	4920      	ldr	r1, [pc, #128]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003232:	4313      	orrs	r3, r2
 8003234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d015      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003244:	4b1b      	ldr	r3, [pc, #108]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003252:	4918      	ldr	r1, [pc, #96]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003254:	4313      	orrs	r3, r2
 8003256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003262:	d105      	bne.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003264:	4b13      	ldr	r3, [pc, #76]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	4a12      	ldr	r2, [pc, #72]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800326a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800326e:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d015      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800327c:	4b0d      	ldr	r3, [pc, #52]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800327e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003282:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	490a      	ldr	r1, [pc, #40]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800328c:	4313      	orrs	r3, r2
 800328e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003296:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800329a:	d105      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800329c:	4b05      	ldr	r3, [pc, #20]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	4a04      	ldr	r2, [pc, #16]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80032a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032a6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80032a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40021000 	.word	0x40021000

080032b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e049      	b.n	800335e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d106      	bne.n	80032e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f841 	bl	8003366 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3304      	adds	r3, #4
 80032f4:	4619      	mov	r1, r3
 80032f6:	4610      	mov	r0, r2
 80032f8:	f000 f9dc 	bl	80036b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
	...

0800337c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b01      	cmp	r3, #1
 800338e:	d001      	beq.n	8003394 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e03b      	b.n	800340c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0201 	orr.w	r2, r2, #1
 80033aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a19      	ldr	r2, [pc, #100]	; (8003418 <HAL_TIM_Base_Start_IT+0x9c>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d009      	beq.n	80033ca <HAL_TIM_Base_Start_IT+0x4e>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033be:	d004      	beq.n	80033ca <HAL_TIM_Base_Start_IT+0x4e>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a15      	ldr	r2, [pc, #84]	; (800341c <HAL_TIM_Base_Start_IT+0xa0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d115      	bne.n	80033f6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	4b13      	ldr	r3, [pc, #76]	; (8003420 <HAL_TIM_Base_Start_IT+0xa4>)
 80033d2:	4013      	ands	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2b06      	cmp	r3, #6
 80033da:	d015      	beq.n	8003408 <HAL_TIM_Base_Start_IT+0x8c>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e2:	d011      	beq.n	8003408 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0201 	orr.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f4:	e008      	b.n	8003408 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f042 0201 	orr.w	r2, r2, #1
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	e000      	b.n	800340a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003408:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	40012c00 	.word	0x40012c00
 800341c:	40014000 	.word	0x40014000
 8003420:	00010007 	.word	0x00010007

08003424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b02      	cmp	r3, #2
 8003438:	d122      	bne.n	8003480 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b02      	cmp	r3, #2
 8003446:	d11b      	bne.n	8003480 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f06f 0202 	mvn.w	r2, #2
 8003450:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f905 	bl	8003676 <HAL_TIM_IC_CaptureCallback>
 800346c:	e005      	b.n	800347a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f8f7 	bl	8003662 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f908 	bl	800368a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b04      	cmp	r3, #4
 800348c:	d122      	bne.n	80034d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b04      	cmp	r3, #4
 800349a:	d11b      	bne.n	80034d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f06f 0204 	mvn.w	r2, #4
 80034a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2202      	movs	r2, #2
 80034aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f8db 	bl	8003676 <HAL_TIM_IC_CaptureCallback>
 80034c0:	e005      	b.n	80034ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f8cd 	bl	8003662 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f8de 	bl	800368a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b08      	cmp	r3, #8
 80034e0:	d122      	bne.n	8003528 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f003 0308 	and.w	r3, r3, #8
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	d11b      	bne.n	8003528 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f06f 0208 	mvn.w	r2, #8
 80034f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2204      	movs	r2, #4
 80034fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	f003 0303 	and.w	r3, r3, #3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f8b1 	bl	8003676 <HAL_TIM_IC_CaptureCallback>
 8003514:	e005      	b.n	8003522 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f8a3 	bl	8003662 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f8b4 	bl	800368a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f003 0310 	and.w	r3, r3, #16
 8003532:	2b10      	cmp	r3, #16
 8003534:	d122      	bne.n	800357c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	2b10      	cmp	r3, #16
 8003542:	d11b      	bne.n	800357c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f06f 0210 	mvn.w	r2, #16
 800354c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2208      	movs	r2, #8
 8003552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f887 	bl	8003676 <HAL_TIM_IC_CaptureCallback>
 8003568:	e005      	b.n	8003576 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f879 	bl	8003662 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f88a 	bl	800368a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b01      	cmp	r3, #1
 8003588:	d10e      	bne.n	80035a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b01      	cmp	r3, #1
 8003596:	d107      	bne.n	80035a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f06f 0201 	mvn.w	r2, #1
 80035a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fd f97c 	bl	80008a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b2:	2b80      	cmp	r3, #128	; 0x80
 80035b4:	d10e      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c0:	2b80      	cmp	r3, #128	; 0x80
 80035c2:	d107      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f8de 	bl	8003790 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035e2:	d10e      	bne.n	8003602 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ee:	2b80      	cmp	r3, #128	; 0x80
 80035f0:	d107      	bne.n	8003602 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80035fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f8d1 	bl	80037a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360c:	2b40      	cmp	r3, #64	; 0x40
 800360e:	d10e      	bne.n	800362e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361a:	2b40      	cmp	r3, #64	; 0x40
 800361c:	d107      	bne.n	800362e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f838 	bl	800369e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b20      	cmp	r3, #32
 800363a:	d10e      	bne.n	800365a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b20      	cmp	r3, #32
 8003648:	d107      	bne.n	800365a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f06f 0220 	mvn.w	r2, #32
 8003652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f891 	bl	800377c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800365a:	bf00      	nop
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
	...

080036b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a2a      	ldr	r2, [pc, #168]	; (8003770 <TIM_Base_SetConfig+0xbc>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d003      	beq.n	80036d4 <TIM_Base_SetConfig+0x20>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d2:	d108      	bne.n	80036e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a21      	ldr	r2, [pc, #132]	; (8003770 <TIM_Base_SetConfig+0xbc>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00b      	beq.n	8003706 <TIM_Base_SetConfig+0x52>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f4:	d007      	beq.n	8003706 <TIM_Base_SetConfig+0x52>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a1e      	ldr	r2, [pc, #120]	; (8003774 <TIM_Base_SetConfig+0xc0>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d003      	beq.n	8003706 <TIM_Base_SetConfig+0x52>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a1d      	ldr	r2, [pc, #116]	; (8003778 <TIM_Base_SetConfig+0xc4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d108      	bne.n	8003718 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800370c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	4313      	orrs	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	4313      	orrs	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a0c      	ldr	r2, [pc, #48]	; (8003770 <TIM_Base_SetConfig+0xbc>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d007      	beq.n	8003754 <TIM_Base_SetConfig+0xa0>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a0b      	ldr	r2, [pc, #44]	; (8003774 <TIM_Base_SetConfig+0xc0>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d003      	beq.n	8003754 <TIM_Base_SetConfig+0xa0>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a0a      	ldr	r2, [pc, #40]	; (8003778 <TIM_Base_SetConfig+0xc4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d103      	bne.n	800375c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	615a      	str	r2, [r3, #20]
}
 8003762:	bf00      	nop
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40012c00 	.word	0x40012c00
 8003774:	40014000 	.word	0x40014000
 8003778:	40014400 	.word	0x40014400

0800377c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e040      	b.n	800384c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7fd f8de 	bl	800099c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2224      	movs	r2, #36	; 0x24
 80037e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0201 	bic.w	r2, r2, #1
 80037f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f82c 	bl	8003854 <UART_SetConfig>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e022      	b.n	800384c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	2b00      	cmp	r3, #0
 800380c:	d002      	beq.n	8003814 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fa54 	bl	8003cbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003822:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003832:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0201 	orr.w	r2, r2, #1
 8003842:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 fadb 	bl	8003e00 <UART_CheckIdleState>
 800384a:	4603      	mov	r3, r0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003854:	b5b0      	push	{r4, r5, r7, lr}
 8003856:	b088      	sub	sp, #32
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800385c:	2300      	movs	r3, #0
 800385e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	431a      	orrs	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	4313      	orrs	r3, r2
 8003876:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	4baa      	ldr	r3, [pc, #680]	; (8003b28 <UART_SetConfig+0x2d4>)
 8003880:	4013      	ands	r3, r2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6812      	ldr	r2, [r2, #0]
 8003886:	69f9      	ldr	r1, [r7, #28]
 8003888:	430b      	orrs	r3, r1
 800388a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a9f      	ldr	r2, [pc, #636]	; (8003b2c <UART_SetConfig+0x2d8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d004      	beq.n	80038bc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	69fa      	ldr	r2, [r7, #28]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	69fa      	ldr	r2, [r7, #28]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a96      	ldr	r2, [pc, #600]	; (8003b30 <UART_SetConfig+0x2dc>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d121      	bne.n	800391e <UART_SetConfig+0xca>
 80038da:	4b96      	ldr	r3, [pc, #600]	; (8003b34 <UART_SetConfig+0x2e0>)
 80038dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e0:	f003 0303 	and.w	r3, r3, #3
 80038e4:	2b03      	cmp	r3, #3
 80038e6:	d817      	bhi.n	8003918 <UART_SetConfig+0xc4>
 80038e8:	a201      	add	r2, pc, #4	; (adr r2, 80038f0 <UART_SetConfig+0x9c>)
 80038ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ee:	bf00      	nop
 80038f0:	08003901 	.word	0x08003901
 80038f4:	0800390d 	.word	0x0800390d
 80038f8:	08003907 	.word	0x08003907
 80038fc:	08003913 	.word	0x08003913
 8003900:	2301      	movs	r3, #1
 8003902:	76fb      	strb	r3, [r7, #27]
 8003904:	e096      	b.n	8003a34 <UART_SetConfig+0x1e0>
 8003906:	2302      	movs	r3, #2
 8003908:	76fb      	strb	r3, [r7, #27]
 800390a:	e093      	b.n	8003a34 <UART_SetConfig+0x1e0>
 800390c:	2304      	movs	r3, #4
 800390e:	76fb      	strb	r3, [r7, #27]
 8003910:	e090      	b.n	8003a34 <UART_SetConfig+0x1e0>
 8003912:	2308      	movs	r3, #8
 8003914:	76fb      	strb	r3, [r7, #27]
 8003916:	e08d      	b.n	8003a34 <UART_SetConfig+0x1e0>
 8003918:	2310      	movs	r3, #16
 800391a:	76fb      	strb	r3, [r7, #27]
 800391c:	e08a      	b.n	8003a34 <UART_SetConfig+0x1e0>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a85      	ldr	r2, [pc, #532]	; (8003b38 <UART_SetConfig+0x2e4>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d132      	bne.n	800398e <UART_SetConfig+0x13a>
 8003928:	4b82      	ldr	r3, [pc, #520]	; (8003b34 <UART_SetConfig+0x2e0>)
 800392a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392e:	f003 030c 	and.w	r3, r3, #12
 8003932:	2b0c      	cmp	r3, #12
 8003934:	d828      	bhi.n	8003988 <UART_SetConfig+0x134>
 8003936:	a201      	add	r2, pc, #4	; (adr r2, 800393c <UART_SetConfig+0xe8>)
 8003938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393c:	08003971 	.word	0x08003971
 8003940:	08003989 	.word	0x08003989
 8003944:	08003989 	.word	0x08003989
 8003948:	08003989 	.word	0x08003989
 800394c:	0800397d 	.word	0x0800397d
 8003950:	08003989 	.word	0x08003989
 8003954:	08003989 	.word	0x08003989
 8003958:	08003989 	.word	0x08003989
 800395c:	08003977 	.word	0x08003977
 8003960:	08003989 	.word	0x08003989
 8003964:	08003989 	.word	0x08003989
 8003968:	08003989 	.word	0x08003989
 800396c:	08003983 	.word	0x08003983
 8003970:	2300      	movs	r3, #0
 8003972:	76fb      	strb	r3, [r7, #27]
 8003974:	e05e      	b.n	8003a34 <UART_SetConfig+0x1e0>
 8003976:	2302      	movs	r3, #2
 8003978:	76fb      	strb	r3, [r7, #27]
 800397a:	e05b      	b.n	8003a34 <UART_SetConfig+0x1e0>
 800397c:	2304      	movs	r3, #4
 800397e:	76fb      	strb	r3, [r7, #27]
 8003980:	e058      	b.n	8003a34 <UART_SetConfig+0x1e0>
 8003982:	2308      	movs	r3, #8
 8003984:	76fb      	strb	r3, [r7, #27]
 8003986:	e055      	b.n	8003a34 <UART_SetConfig+0x1e0>
 8003988:	2310      	movs	r3, #16
 800398a:	76fb      	strb	r3, [r7, #27]
 800398c:	e052      	b.n	8003a34 <UART_SetConfig+0x1e0>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a6a      	ldr	r2, [pc, #424]	; (8003b3c <UART_SetConfig+0x2e8>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d120      	bne.n	80039da <UART_SetConfig+0x186>
 8003998:	4b66      	ldr	r3, [pc, #408]	; (8003b34 <UART_SetConfig+0x2e0>)
 800399a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80039a2:	2b30      	cmp	r3, #48	; 0x30
 80039a4:	d013      	beq.n	80039ce <UART_SetConfig+0x17a>
 80039a6:	2b30      	cmp	r3, #48	; 0x30
 80039a8:	d814      	bhi.n	80039d4 <UART_SetConfig+0x180>
 80039aa:	2b20      	cmp	r3, #32
 80039ac:	d009      	beq.n	80039c2 <UART_SetConfig+0x16e>
 80039ae:	2b20      	cmp	r3, #32
 80039b0:	d810      	bhi.n	80039d4 <UART_SetConfig+0x180>
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <UART_SetConfig+0x168>
 80039b6:	2b10      	cmp	r3, #16
 80039b8:	d006      	beq.n	80039c8 <UART_SetConfig+0x174>
 80039ba:	e00b      	b.n	80039d4 <UART_SetConfig+0x180>
 80039bc:	2300      	movs	r3, #0
 80039be:	76fb      	strb	r3, [r7, #27]
 80039c0:	e038      	b.n	8003a34 <UART_SetConfig+0x1e0>
 80039c2:	2302      	movs	r3, #2
 80039c4:	76fb      	strb	r3, [r7, #27]
 80039c6:	e035      	b.n	8003a34 <UART_SetConfig+0x1e0>
 80039c8:	2304      	movs	r3, #4
 80039ca:	76fb      	strb	r3, [r7, #27]
 80039cc:	e032      	b.n	8003a34 <UART_SetConfig+0x1e0>
 80039ce:	2308      	movs	r3, #8
 80039d0:	76fb      	strb	r3, [r7, #27]
 80039d2:	e02f      	b.n	8003a34 <UART_SetConfig+0x1e0>
 80039d4:	2310      	movs	r3, #16
 80039d6:	76fb      	strb	r3, [r7, #27]
 80039d8:	e02c      	b.n	8003a34 <UART_SetConfig+0x1e0>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a53      	ldr	r2, [pc, #332]	; (8003b2c <UART_SetConfig+0x2d8>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d125      	bne.n	8003a30 <UART_SetConfig+0x1dc>
 80039e4:	4b53      	ldr	r3, [pc, #332]	; (8003b34 <UART_SetConfig+0x2e0>)
 80039e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80039ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039f2:	d017      	beq.n	8003a24 <UART_SetConfig+0x1d0>
 80039f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039f8:	d817      	bhi.n	8003a2a <UART_SetConfig+0x1d6>
 80039fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039fe:	d00b      	beq.n	8003a18 <UART_SetConfig+0x1c4>
 8003a00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a04:	d811      	bhi.n	8003a2a <UART_SetConfig+0x1d6>
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <UART_SetConfig+0x1be>
 8003a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a0e:	d006      	beq.n	8003a1e <UART_SetConfig+0x1ca>
 8003a10:	e00b      	b.n	8003a2a <UART_SetConfig+0x1d6>
 8003a12:	2300      	movs	r3, #0
 8003a14:	76fb      	strb	r3, [r7, #27]
 8003a16:	e00d      	b.n	8003a34 <UART_SetConfig+0x1e0>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	76fb      	strb	r3, [r7, #27]
 8003a1c:	e00a      	b.n	8003a34 <UART_SetConfig+0x1e0>
 8003a1e:	2304      	movs	r3, #4
 8003a20:	76fb      	strb	r3, [r7, #27]
 8003a22:	e007      	b.n	8003a34 <UART_SetConfig+0x1e0>
 8003a24:	2308      	movs	r3, #8
 8003a26:	76fb      	strb	r3, [r7, #27]
 8003a28:	e004      	b.n	8003a34 <UART_SetConfig+0x1e0>
 8003a2a:	2310      	movs	r3, #16
 8003a2c:	76fb      	strb	r3, [r7, #27]
 8003a2e:	e001      	b.n	8003a34 <UART_SetConfig+0x1e0>
 8003a30:	2310      	movs	r3, #16
 8003a32:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a3c      	ldr	r2, [pc, #240]	; (8003b2c <UART_SetConfig+0x2d8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	f040 8082 	bne.w	8003b44 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a40:	7efb      	ldrb	r3, [r7, #27]
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d823      	bhi.n	8003a8e <UART_SetConfig+0x23a>
 8003a46:	a201      	add	r2, pc, #4	; (adr r2, 8003a4c <UART_SetConfig+0x1f8>)
 8003a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4c:	08003a71 	.word	0x08003a71
 8003a50:	08003a8f 	.word	0x08003a8f
 8003a54:	08003a79 	.word	0x08003a79
 8003a58:	08003a8f 	.word	0x08003a8f
 8003a5c:	08003a7f 	.word	0x08003a7f
 8003a60:	08003a8f 	.word	0x08003a8f
 8003a64:	08003a8f 	.word	0x08003a8f
 8003a68:	08003a8f 	.word	0x08003a8f
 8003a6c:	08003a87 	.word	0x08003a87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a70:	f7ff f9de 	bl	8002e30 <HAL_RCC_GetPCLK1Freq>
 8003a74:	6178      	str	r0, [r7, #20]
        break;
 8003a76:	e00f      	b.n	8003a98 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a78:	4b31      	ldr	r3, [pc, #196]	; (8003b40 <UART_SetConfig+0x2ec>)
 8003a7a:	617b      	str	r3, [r7, #20]
        break;
 8003a7c:	e00c      	b.n	8003a98 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a7e:	f7ff f93f 	bl	8002d00 <HAL_RCC_GetSysClockFreq>
 8003a82:	6178      	str	r0, [r7, #20]
        break;
 8003a84:	e008      	b.n	8003a98 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a8a:	617b      	str	r3, [r7, #20]
        break;
 8003a8c:	e004      	b.n	8003a98 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	76bb      	strb	r3, [r7, #26]
        break;
 8003a96:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 8100 	beq.w	8003ca0 <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	4413      	add	r3, r2
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d305      	bcc.n	8003abc <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d902      	bls.n	8003ac2 <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	76bb      	strb	r3, [r7, #26]
 8003ac0:	e0ee      	b.n	8003ca0 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f04f 0100 	mov.w	r1, #0
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	020b      	lsls	r3, r1, #8
 8003ad4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003ad8:	0202      	lsls	r2, r0, #8
 8003ada:	6879      	ldr	r1, [r7, #4]
 8003adc:	6849      	ldr	r1, [r1, #4]
 8003ade:	0849      	lsrs	r1, r1, #1
 8003ae0:	4608      	mov	r0, r1
 8003ae2:	f04f 0100 	mov.w	r1, #0
 8003ae6:	1814      	adds	r4, r2, r0
 8003ae8:	eb43 0501 	adc.w	r5, r3, r1
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	461a      	mov	r2, r3
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	4620      	mov	r0, r4
 8003af8:	4629      	mov	r1, r5
 8003afa:	f7fc fb69 	bl	80001d0 <__aeabi_uldivmod>
 8003afe:	4602      	mov	r2, r0
 8003b00:	460b      	mov	r3, r1
 8003b02:	4613      	mov	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b0c:	d308      	bcc.n	8003b20 <UART_SetConfig+0x2cc>
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b14:	d204      	bcs.n	8003b20 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	60da      	str	r2, [r3, #12]
 8003b1e:	e0bf      	b.n	8003ca0 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	76bb      	strb	r3, [r7, #26]
 8003b24:	e0bc      	b.n	8003ca0 <UART_SetConfig+0x44c>
 8003b26:	bf00      	nop
 8003b28:	efff69f3 	.word	0xefff69f3
 8003b2c:	40008000 	.word	0x40008000
 8003b30:	40013800 	.word	0x40013800
 8003b34:	40021000 	.word	0x40021000
 8003b38:	40004400 	.word	0x40004400
 8003b3c:	40004800 	.word	0x40004800
 8003b40:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b4c:	d15b      	bne.n	8003c06 <UART_SetConfig+0x3b2>
  {
    switch (clocksource)
 8003b4e:	7efb      	ldrb	r3, [r7, #27]
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d828      	bhi.n	8003ba6 <UART_SetConfig+0x352>
 8003b54:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <UART_SetConfig+0x308>)
 8003b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5a:	bf00      	nop
 8003b5c:	08003b81 	.word	0x08003b81
 8003b60:	08003b89 	.word	0x08003b89
 8003b64:	08003b91 	.word	0x08003b91
 8003b68:	08003ba7 	.word	0x08003ba7
 8003b6c:	08003b97 	.word	0x08003b97
 8003b70:	08003ba7 	.word	0x08003ba7
 8003b74:	08003ba7 	.word	0x08003ba7
 8003b78:	08003ba7 	.word	0x08003ba7
 8003b7c:	08003b9f 	.word	0x08003b9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b80:	f7ff f956 	bl	8002e30 <HAL_RCC_GetPCLK1Freq>
 8003b84:	6178      	str	r0, [r7, #20]
        break;
 8003b86:	e013      	b.n	8003bb0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b88:	f7ff f968 	bl	8002e5c <HAL_RCC_GetPCLK2Freq>
 8003b8c:	6178      	str	r0, [r7, #20]
        break;
 8003b8e:	e00f      	b.n	8003bb0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b90:	4b49      	ldr	r3, [pc, #292]	; (8003cb8 <UART_SetConfig+0x464>)
 8003b92:	617b      	str	r3, [r7, #20]
        break;
 8003b94:	e00c      	b.n	8003bb0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b96:	f7ff f8b3 	bl	8002d00 <HAL_RCC_GetSysClockFreq>
 8003b9a:	6178      	str	r0, [r7, #20]
        break;
 8003b9c:	e008      	b.n	8003bb0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ba2:	617b      	str	r3, [r7, #20]
        break;
 8003ba4:	e004      	b.n	8003bb0 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	76bb      	strb	r3, [r7, #26]
        break;
 8003bae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d074      	beq.n	8003ca0 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	005a      	lsls	r2, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	085b      	lsrs	r3, r3, #1
 8003bc0:	441a      	add	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bca:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	2b0f      	cmp	r3, #15
 8003bd0:	d916      	bls.n	8003c00 <UART_SetConfig+0x3ac>
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd8:	d212      	bcs.n	8003c00 <UART_SetConfig+0x3ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	f023 030f 	bic.w	r3, r3, #15
 8003be2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	085b      	lsrs	r3, r3, #1
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	89fb      	ldrh	r3, [r7, #14]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	89fa      	ldrh	r2, [r7, #14]
 8003bfc:	60da      	str	r2, [r3, #12]
 8003bfe:	e04f      	b.n	8003ca0 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	76bb      	strb	r3, [r7, #26]
 8003c04:	e04c      	b.n	8003ca0 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c06:	7efb      	ldrb	r3, [r7, #27]
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d828      	bhi.n	8003c5e <UART_SetConfig+0x40a>
 8003c0c:	a201      	add	r2, pc, #4	; (adr r2, 8003c14 <UART_SetConfig+0x3c0>)
 8003c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c12:	bf00      	nop
 8003c14:	08003c39 	.word	0x08003c39
 8003c18:	08003c41 	.word	0x08003c41
 8003c1c:	08003c49 	.word	0x08003c49
 8003c20:	08003c5f 	.word	0x08003c5f
 8003c24:	08003c4f 	.word	0x08003c4f
 8003c28:	08003c5f 	.word	0x08003c5f
 8003c2c:	08003c5f 	.word	0x08003c5f
 8003c30:	08003c5f 	.word	0x08003c5f
 8003c34:	08003c57 	.word	0x08003c57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c38:	f7ff f8fa 	bl	8002e30 <HAL_RCC_GetPCLK1Freq>
 8003c3c:	6178      	str	r0, [r7, #20]
        break;
 8003c3e:	e013      	b.n	8003c68 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c40:	f7ff f90c 	bl	8002e5c <HAL_RCC_GetPCLK2Freq>
 8003c44:	6178      	str	r0, [r7, #20]
        break;
 8003c46:	e00f      	b.n	8003c68 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c48:	4b1b      	ldr	r3, [pc, #108]	; (8003cb8 <UART_SetConfig+0x464>)
 8003c4a:	617b      	str	r3, [r7, #20]
        break;
 8003c4c:	e00c      	b.n	8003c68 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c4e:	f7ff f857 	bl	8002d00 <HAL_RCC_GetSysClockFreq>
 8003c52:	6178      	str	r0, [r7, #20]
        break;
 8003c54:	e008      	b.n	8003c68 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c5a:	617b      	str	r3, [r7, #20]
        break;
 8003c5c:	e004      	b.n	8003c68 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	76bb      	strb	r3, [r7, #26]
        break;
 8003c66:	bf00      	nop
    }

    if (pclk != 0U)
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d018      	beq.n	8003ca0 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	085a      	lsrs	r2, r3, #1
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	441a      	add	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c80:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	2b0f      	cmp	r3, #15
 8003c86:	d909      	bls.n	8003c9c <UART_SetConfig+0x448>
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c8e:	d205      	bcs.n	8003c9c <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	60da      	str	r2, [r3, #12]
 8003c9a:	e001      	b.n	8003ca0 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003cac:	7ebb      	ldrb	r3, [r7, #26]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3720      	adds	r7, #32
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bdb0      	pop	{r4, r5, r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	00f42400 	.word	0x00f42400

08003cbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00a      	beq.n	8003ce6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	f003 0310 	and.w	r3, r3, #16
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00a      	beq.n	8003d6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	f003 0320 	and.w	r3, r3, #32
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d01a      	beq.n	8003dd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dba:	d10a      	bne.n	8003dd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	605a      	str	r2, [r3, #4]
  }
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e10:	f7fc ff44 	bl	8000c9c <HAL_GetTick>
 8003e14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d10e      	bne.n	8003e42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f82d 	bl	8003e92 <UART_WaitOnFlagUntilTimeout>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e023      	b.n	8003e8a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	d10e      	bne.n	8003e6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f817 	bl	8003e92 <UART_WaitOnFlagUntilTimeout>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e00d      	b.n	8003e8a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2220      	movs	r2, #32
 8003e78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b09c      	sub	sp, #112	; 0x70
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	60f8      	str	r0, [r7, #12]
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	603b      	str	r3, [r7, #0]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ea2:	e0a5      	b.n	8003ff0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ea4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ea6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eaa:	f000 80a1 	beq.w	8003ff0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eae:	f7fc fef5 	bl	8000c9c <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d302      	bcc.n	8003ec4 <UART_WaitOnFlagUntilTimeout+0x32>
 8003ebe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d13e      	bne.n	8003f42 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ecc:	e853 3f00 	ldrex	r3, [r3]
 8003ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ed4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ed8:	667b      	str	r3, [r7, #100]	; 0x64
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ee4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ee8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003eea:	e841 2300 	strex	r3, r2, [r1]
 8003eee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1e6      	bne.n	8003ec4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3308      	adds	r3, #8
 8003efc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f00:	e853 3f00 	ldrex	r3, [r3]
 8003f04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f08:	f023 0301 	bic.w	r3, r3, #1
 8003f0c:	663b      	str	r3, [r7, #96]	; 0x60
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	3308      	adds	r3, #8
 8003f14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f16:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f1e:	e841 2300 	strex	r3, r2, [r1]
 8003f22:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1e5      	bne.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2220      	movs	r2, #32
 8003f34:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e067      	b.n	8004012 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d04f      	beq.n	8003ff0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f5e:	d147      	bne.n	8003ff0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f68:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f72:	e853 3f00 	ldrex	r3, [r3]
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	461a      	mov	r2, r3
 8003f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f88:	637b      	str	r3, [r7, #52]	; 0x34
 8003f8a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f90:	e841 2300 	strex	r3, r2, [r1]
 8003f94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1e6      	bne.n	8003f6a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3308      	adds	r3, #8
 8003fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	e853 3f00 	ldrex	r3, [r3]
 8003faa:	613b      	str	r3, [r7, #16]
   return(result);
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	f023 0301 	bic.w	r3, r3, #1
 8003fb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	3308      	adds	r3, #8
 8003fba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003fbc:	623a      	str	r2, [r7, #32]
 8003fbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc0:	69f9      	ldr	r1, [r7, #28]
 8003fc2:	6a3a      	ldr	r2, [r7, #32]
 8003fc4:	e841 2300 	strex	r3, r2, [r1]
 8003fc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1e5      	bne.n	8003f9c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e010      	b.n	8004012 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	69da      	ldr	r2, [r3, #28]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	bf0c      	ite	eq
 8004000:	2301      	moveq	r3, #1
 8004002:	2300      	movne	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	461a      	mov	r2, r3
 8004008:	79fb      	ldrb	r3, [r7, #7]
 800400a:	429a      	cmp	r2, r3
 800400c:	f43f af4a 	beq.w	8003ea4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3770      	adds	r7, #112	; 0x70
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
	...

0800401c <__NVIC_SetPriority>:
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	4603      	mov	r3, r0
 8004024:	6039      	str	r1, [r7, #0]
 8004026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402c:	2b00      	cmp	r3, #0
 800402e:	db0a      	blt.n	8004046 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	b2da      	uxtb	r2, r3
 8004034:	490c      	ldr	r1, [pc, #48]	; (8004068 <__NVIC_SetPriority+0x4c>)
 8004036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403a:	0112      	lsls	r2, r2, #4
 800403c:	b2d2      	uxtb	r2, r2
 800403e:	440b      	add	r3, r1
 8004040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004044:	e00a      	b.n	800405c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	b2da      	uxtb	r2, r3
 800404a:	4908      	ldr	r1, [pc, #32]	; (800406c <__NVIC_SetPriority+0x50>)
 800404c:	79fb      	ldrb	r3, [r7, #7]
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	3b04      	subs	r3, #4
 8004054:	0112      	lsls	r2, r2, #4
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	440b      	add	r3, r1
 800405a:	761a      	strb	r2, [r3, #24]
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	e000e100 	.word	0xe000e100
 800406c:	e000ed00 	.word	0xe000ed00

08004070 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004074:	4b05      	ldr	r3, [pc, #20]	; (800408c <SysTick_Handler+0x1c>)
 8004076:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004078:	f001 fd22 	bl	8005ac0 <xTaskGetSchedulerState>
 800407c:	4603      	mov	r3, r0
 800407e:	2b01      	cmp	r3, #1
 8004080:	d001      	beq.n	8004086 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004082:	f002 fb09 	bl	8006698 <xPortSysTickHandler>
  }
}
 8004086:	bf00      	nop
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	e000e010 	.word	0xe000e010

08004090 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004094:	2100      	movs	r1, #0
 8004096:	f06f 0004 	mvn.w	r0, #4
 800409a:	f7ff ffbf 	bl	800401c <__NVIC_SetPriority>
#endif
}
 800409e:	bf00      	nop
 80040a0:	bd80      	pop	{r7, pc}
	...

080040a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040aa:	f3ef 8305 	mrs	r3, IPSR
 80040ae:	603b      	str	r3, [r7, #0]
  return(result);
 80040b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80040b6:	f06f 0305 	mvn.w	r3, #5
 80040ba:	607b      	str	r3, [r7, #4]
 80040bc:	e00c      	b.n	80040d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80040be:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <osKernelInitialize+0x44>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d105      	bne.n	80040d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80040c6:	4b08      	ldr	r3, [pc, #32]	; (80040e8 <osKernelInitialize+0x44>)
 80040c8:	2201      	movs	r2, #1
 80040ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80040cc:	2300      	movs	r3, #0
 80040ce:	607b      	str	r3, [r7, #4]
 80040d0:	e002      	b.n	80040d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80040d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80040d8:	687b      	ldr	r3, [r7, #4]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	20000034 	.word	0x20000034

080040ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040f2:	f3ef 8305 	mrs	r3, IPSR
 80040f6:	603b      	str	r3, [r7, #0]
  return(result);
 80040f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <osKernelStart+0x1a>
    stat = osErrorISR;
 80040fe:	f06f 0305 	mvn.w	r3, #5
 8004102:	607b      	str	r3, [r7, #4]
 8004104:	e010      	b.n	8004128 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004106:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <osKernelStart+0x48>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d109      	bne.n	8004122 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800410e:	f7ff ffbf 	bl	8004090 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004112:	4b08      	ldr	r3, [pc, #32]	; (8004134 <osKernelStart+0x48>)
 8004114:	2202      	movs	r2, #2
 8004116:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004118:	f001 f866 	bl	80051e8 <vTaskStartScheduler>
      stat = osOK;
 800411c:	2300      	movs	r3, #0
 800411e:	607b      	str	r3, [r7, #4]
 8004120:	e002      	b.n	8004128 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004126:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004128:	687b      	ldr	r3, [r7, #4]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	20000034 	.word	0x20000034

08004138 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004138:	b580      	push	{r7, lr}
 800413a:	b08e      	sub	sp, #56	; 0x38
 800413c:	af04      	add	r7, sp, #16
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004144:	2300      	movs	r3, #0
 8004146:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004148:	f3ef 8305 	mrs	r3, IPSR
 800414c:	617b      	str	r3, [r7, #20]
  return(result);
 800414e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004150:	2b00      	cmp	r3, #0
 8004152:	d17e      	bne.n	8004252 <osThreadNew+0x11a>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d07b      	beq.n	8004252 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800415a:	2380      	movs	r3, #128	; 0x80
 800415c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800415e:	2318      	movs	r3, #24
 8004160:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004162:	2300      	movs	r3, #0
 8004164:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004166:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800416a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d045      	beq.n	80041fe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d002      	beq.n	8004180 <osThreadNew+0x48>
        name = attr->name;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d002      	beq.n	800418e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d008      	beq.n	80041a6 <osThreadNew+0x6e>
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	2b38      	cmp	r3, #56	; 0x38
 8004198:	d805      	bhi.n	80041a6 <osThreadNew+0x6e>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <osThreadNew+0x72>
        return (NULL);
 80041a6:	2300      	movs	r3, #0
 80041a8:	e054      	b.n	8004254 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	089b      	lsrs	r3, r3, #2
 80041b8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00e      	beq.n	80041e0 <osThreadNew+0xa8>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	2b5b      	cmp	r3, #91	; 0x5b
 80041c8:	d90a      	bls.n	80041e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d006      	beq.n	80041e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <osThreadNew+0xa8>
        mem = 1;
 80041da:	2301      	movs	r3, #1
 80041dc:	61bb      	str	r3, [r7, #24]
 80041de:	e010      	b.n	8004202 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10c      	bne.n	8004202 <osThreadNew+0xca>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d108      	bne.n	8004202 <osThreadNew+0xca>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d104      	bne.n	8004202 <osThreadNew+0xca>
          mem = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	61bb      	str	r3, [r7, #24]
 80041fc:	e001      	b.n	8004202 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d110      	bne.n	800422a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004210:	9202      	str	r2, [sp, #8]
 8004212:	9301      	str	r3, [sp, #4]
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	6a3a      	ldr	r2, [r7, #32]
 800421c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 fe0c 	bl	8004e3c <xTaskCreateStatic>
 8004224:	4603      	mov	r3, r0
 8004226:	613b      	str	r3, [r7, #16]
 8004228:	e013      	b.n	8004252 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d110      	bne.n	8004252 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	b29a      	uxth	r2, r3
 8004234:	f107 0310 	add.w	r3, r7, #16
 8004238:	9301      	str	r3, [sp, #4]
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 fe57 	bl	8004ef6 <xTaskCreate>
 8004248:	4603      	mov	r3, r0
 800424a:	2b01      	cmp	r3, #1
 800424c:	d001      	beq.n	8004252 <osThreadNew+0x11a>
            hTask = NULL;
 800424e:	2300      	movs	r3, #0
 8004250:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004252:	693b      	ldr	r3, [r7, #16]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3728      	adds	r7, #40	; 0x28
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004264:	f3ef 8305 	mrs	r3, IPSR
 8004268:	60bb      	str	r3, [r7, #8]
  return(result);
 800426a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <osDelay+0x1c>
    stat = osErrorISR;
 8004270:	f06f 0305 	mvn.w	r3, #5
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	e007      	b.n	8004288 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004278:	2300      	movs	r3, #0
 800427a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 ff7c 	bl	8005180 <vTaskDelay>
    }
  }

  return (stat);
 8004288:	68fb      	ldr	r3, [r7, #12]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
	...

08004294 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4a07      	ldr	r2, [pc, #28]	; (80042c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80042a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	4a06      	ldr	r2, [pc, #24]	; (80042c4 <vApplicationGetIdleTaskMemory+0x30>)
 80042aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2280      	movs	r2, #128	; 0x80
 80042b0:	601a      	str	r2, [r3, #0]
}
 80042b2:	bf00      	nop
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	20000038 	.word	0x20000038
 80042c4:	20000094 	.word	0x20000094

080042c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4a07      	ldr	r2, [pc, #28]	; (80042f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80042d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	4a06      	ldr	r2, [pc, #24]	; (80042f8 <vApplicationGetTimerTaskMemory+0x30>)
 80042de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042e6:	601a      	str	r2, [r3, #0]
}
 80042e8:	bf00      	nop
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	20000294 	.word	0x20000294
 80042f8:	200002f0 	.word	0x200002f0

080042fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f103 0208 	add.w	r2, r3, #8
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004314:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f103 0208 	add.w	r2, r3, #8
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f103 0208 	add.w	r2, r3, #8
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004356:	b480      	push	{r7}
 8004358:	b085      	sub	sp, #20
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
 800435e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	601a      	str	r2, [r3, #0]
}
 8004392:	bf00      	nop
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800439e:	b480      	push	{r7}
 80043a0:	b085      	sub	sp, #20
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
 80043a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043b4:	d103      	bne.n	80043be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	e00c      	b.n	80043d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	3308      	adds	r3, #8
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	e002      	b.n	80043cc <vListInsert+0x2e>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d2f6      	bcs.n	80043c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	1c5a      	adds	r2, r3, #1
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	601a      	str	r2, [r3, #0]
}
 8004404:	bf00      	nop
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6892      	ldr	r2, [r2, #8]
 8004426:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6852      	ldr	r2, [r2, #4]
 8004430:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	429a      	cmp	r2, r3
 800443a:	d103      	bne.n	8004444 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	1e5a      	subs	r2, r3, #1
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10a      	bne.n	800448e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800448a:	bf00      	nop
 800448c:	e7fe      	b.n	800448c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800448e:	f002 f871 	bl	8006574 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449a:	68f9      	ldr	r1, [r7, #12]
 800449c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800449e:	fb01 f303 	mul.w	r3, r1, r3
 80044a2:	441a      	add	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044be:	3b01      	subs	r3, #1
 80044c0:	68f9      	ldr	r1, [r7, #12]
 80044c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044c4:	fb01 f303 	mul.w	r3, r1, r3
 80044c8:	441a      	add	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	22ff      	movs	r2, #255	; 0xff
 80044d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	22ff      	movs	r2, #255	; 0xff
 80044da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d114      	bne.n	800450e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01a      	beq.n	8004522 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	3310      	adds	r3, #16
 80044f0:	4618      	mov	r0, r3
 80044f2:	f001 f927 	bl	8005744 <xTaskRemoveFromEventList>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d012      	beq.n	8004522 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80044fc:	4b0c      	ldr	r3, [pc, #48]	; (8004530 <xQueueGenericReset+0xcc>)
 80044fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	f3bf 8f4f 	dsb	sy
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	e009      	b.n	8004522 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	3310      	adds	r3, #16
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff fef2 	bl	80042fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	3324      	adds	r3, #36	; 0x24
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff feed 	bl	80042fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004522:	f002 f857 	bl	80065d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004526:	2301      	movs	r3, #1
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	e000ed04 	.word	0xe000ed04

08004534 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004534:	b580      	push	{r7, lr}
 8004536:	b08e      	sub	sp, #56	; 0x38
 8004538:	af02      	add	r7, sp, #8
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
 8004540:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10a      	bne.n	800455e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454c:	f383 8811 	msr	BASEPRI, r3
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800455a:	bf00      	nop
 800455c:	e7fe      	b.n	800455c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10a      	bne.n	800457a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004576:	bf00      	nop
 8004578:	e7fe      	b.n	8004578 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d002      	beq.n	8004586 <xQueueGenericCreateStatic+0x52>
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <xQueueGenericCreateStatic+0x56>
 8004586:	2301      	movs	r3, #1
 8004588:	e000      	b.n	800458c <xQueueGenericCreateStatic+0x58>
 800458a:	2300      	movs	r3, #0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10a      	bne.n	80045a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	623b      	str	r3, [r7, #32]
}
 80045a2:	bf00      	nop
 80045a4:	e7fe      	b.n	80045a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d102      	bne.n	80045b2 <xQueueGenericCreateStatic+0x7e>
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <xQueueGenericCreateStatic+0x82>
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <xQueueGenericCreateStatic+0x84>
 80045b6:	2300      	movs	r3, #0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10a      	bne.n	80045d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80045bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	61fb      	str	r3, [r7, #28]
}
 80045ce:	bf00      	nop
 80045d0:	e7fe      	b.n	80045d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80045d2:	2350      	movs	r3, #80	; 0x50
 80045d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2b50      	cmp	r3, #80	; 0x50
 80045da:	d00a      	beq.n	80045f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80045dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	61bb      	str	r3, [r7, #24]
}
 80045ee:	bf00      	nop
 80045f0:	e7fe      	b.n	80045f0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80045f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80045f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00d      	beq.n	800461a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80045fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004606:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800460a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	4613      	mov	r3, r2
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	68b9      	ldr	r1, [r7, #8]
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 f805 	bl	8004624 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800461a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800461c:	4618      	mov	r0, r3
 800461e:	3730      	adds	r7, #48	; 0x30
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
 8004630:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d103      	bne.n	8004640 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	e002      	b.n	8004646 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004652:	2101      	movs	r1, #1
 8004654:	69b8      	ldr	r0, [r7, #24]
 8004656:	f7ff ff05 	bl	8004464 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	78fa      	ldrb	r2, [r7, #3]
 800465e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004662:	bf00      	nop
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
	...

0800466c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b08e      	sub	sp, #56	; 0x38
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
 8004678:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800467a:	2300      	movs	r3, #0
 800467c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10a      	bne.n	800469e <xQueueGenericSend+0x32>
	__asm volatile
 8004688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468c:	f383 8811 	msr	BASEPRI, r3
 8004690:	f3bf 8f6f 	isb	sy
 8004694:	f3bf 8f4f 	dsb	sy
 8004698:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800469a:	bf00      	nop
 800469c:	e7fe      	b.n	800469c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d103      	bne.n	80046ac <xQueueGenericSend+0x40>
 80046a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <xQueueGenericSend+0x44>
 80046ac:	2301      	movs	r3, #1
 80046ae:	e000      	b.n	80046b2 <xQueueGenericSend+0x46>
 80046b0:	2300      	movs	r3, #0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10a      	bne.n	80046cc <xQueueGenericSend+0x60>
	__asm volatile
 80046b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ba:	f383 8811 	msr	BASEPRI, r3
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f3bf 8f4f 	dsb	sy
 80046c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80046c8:	bf00      	nop
 80046ca:	e7fe      	b.n	80046ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d103      	bne.n	80046da <xQueueGenericSend+0x6e>
 80046d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d101      	bne.n	80046de <xQueueGenericSend+0x72>
 80046da:	2301      	movs	r3, #1
 80046dc:	e000      	b.n	80046e0 <xQueueGenericSend+0x74>
 80046de:	2300      	movs	r3, #0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10a      	bne.n	80046fa <xQueueGenericSend+0x8e>
	__asm volatile
 80046e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e8:	f383 8811 	msr	BASEPRI, r3
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	623b      	str	r3, [r7, #32]
}
 80046f6:	bf00      	nop
 80046f8:	e7fe      	b.n	80046f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046fa:	f001 f9e1 	bl	8005ac0 <xTaskGetSchedulerState>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d102      	bne.n	800470a <xQueueGenericSend+0x9e>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <xQueueGenericSend+0xa2>
 800470a:	2301      	movs	r3, #1
 800470c:	e000      	b.n	8004710 <xQueueGenericSend+0xa4>
 800470e:	2300      	movs	r3, #0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10a      	bne.n	800472a <xQueueGenericSend+0xbe>
	__asm volatile
 8004714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004718:	f383 8811 	msr	BASEPRI, r3
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	61fb      	str	r3, [r7, #28]
}
 8004726:	bf00      	nop
 8004728:	e7fe      	b.n	8004728 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800472a:	f001 ff23 	bl	8006574 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800472e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004736:	429a      	cmp	r2, r3
 8004738:	d302      	bcc.n	8004740 <xQueueGenericSend+0xd4>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b02      	cmp	r3, #2
 800473e:	d129      	bne.n	8004794 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	68b9      	ldr	r1, [r7, #8]
 8004744:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004746:	f000 fa0b 	bl	8004b60 <prvCopyDataToQueue>
 800474a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800474c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004750:	2b00      	cmp	r3, #0
 8004752:	d010      	beq.n	8004776 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004756:	3324      	adds	r3, #36	; 0x24
 8004758:	4618      	mov	r0, r3
 800475a:	f000 fff3 	bl	8005744 <xTaskRemoveFromEventList>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d013      	beq.n	800478c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004764:	4b3f      	ldr	r3, [pc, #252]	; (8004864 <xQueueGenericSend+0x1f8>)
 8004766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	e00a      	b.n	800478c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004778:	2b00      	cmp	r3, #0
 800477a:	d007      	beq.n	800478c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800477c:	4b39      	ldr	r3, [pc, #228]	; (8004864 <xQueueGenericSend+0x1f8>)
 800477e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	f3bf 8f4f 	dsb	sy
 8004788:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800478c:	f001 ff22 	bl	80065d4 <vPortExitCritical>
				return pdPASS;
 8004790:	2301      	movs	r3, #1
 8004792:	e063      	b.n	800485c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d103      	bne.n	80047a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800479a:	f001 ff1b 	bl	80065d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	e05c      	b.n	800485c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d106      	bne.n	80047b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047a8:	f107 0314 	add.w	r3, r7, #20
 80047ac:	4618      	mov	r0, r3
 80047ae:	f001 f82d 	bl	800580c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047b2:	2301      	movs	r3, #1
 80047b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047b6:	f001 ff0d 	bl	80065d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047ba:	f000 fd7b 	bl	80052b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047be:	f001 fed9 	bl	8006574 <vPortEnterCritical>
 80047c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047c8:	b25b      	sxtb	r3, r3
 80047ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047ce:	d103      	bne.n	80047d8 <xQueueGenericSend+0x16c>
 80047d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047de:	b25b      	sxtb	r3, r3
 80047e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047e4:	d103      	bne.n	80047ee <xQueueGenericSend+0x182>
 80047e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047ee:	f001 fef1 	bl	80065d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047f2:	1d3a      	adds	r2, r7, #4
 80047f4:	f107 0314 	add.w	r3, r7, #20
 80047f8:	4611      	mov	r1, r2
 80047fa:	4618      	mov	r0, r3
 80047fc:	f001 f81c 	bl	8005838 <xTaskCheckForTimeOut>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d124      	bne.n	8004850 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004806:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004808:	f000 faa2 	bl	8004d50 <prvIsQueueFull>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d018      	beq.n	8004844 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	3310      	adds	r3, #16
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	4611      	mov	r1, r2
 800481a:	4618      	mov	r0, r3
 800481c:	f000 ff42 	bl	80056a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004820:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004822:	f000 fa2d 	bl	8004c80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004826:	f000 fd53 	bl	80052d0 <xTaskResumeAll>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	f47f af7c 	bne.w	800472a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004832:	4b0c      	ldr	r3, [pc, #48]	; (8004864 <xQueueGenericSend+0x1f8>)
 8004834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	e772      	b.n	800472a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004846:	f000 fa1b 	bl	8004c80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800484a:	f000 fd41 	bl	80052d0 <xTaskResumeAll>
 800484e:	e76c      	b.n	800472a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004850:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004852:	f000 fa15 	bl	8004c80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004856:	f000 fd3b 	bl	80052d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800485a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800485c:	4618      	mov	r0, r3
 800485e:	3738      	adds	r7, #56	; 0x38
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	e000ed04 	.word	0xe000ed04

08004868 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b090      	sub	sp, #64	; 0x40
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
 8004874:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800487a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10a      	bne.n	8004896 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004892:	bf00      	nop
 8004894:	e7fe      	b.n	8004894 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d103      	bne.n	80048a4 <xQueueGenericSendFromISR+0x3c>
 800489c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <xQueueGenericSendFromISR+0x40>
 80048a4:	2301      	movs	r3, #1
 80048a6:	e000      	b.n	80048aa <xQueueGenericSendFromISR+0x42>
 80048a8:	2300      	movs	r3, #0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10a      	bne.n	80048c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80048ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80048c0:	bf00      	nop
 80048c2:	e7fe      	b.n	80048c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d103      	bne.n	80048d2 <xQueueGenericSendFromISR+0x6a>
 80048ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d101      	bne.n	80048d6 <xQueueGenericSendFromISR+0x6e>
 80048d2:	2301      	movs	r3, #1
 80048d4:	e000      	b.n	80048d8 <xQueueGenericSendFromISR+0x70>
 80048d6:	2300      	movs	r3, #0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10a      	bne.n	80048f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80048dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e0:	f383 8811 	msr	BASEPRI, r3
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	623b      	str	r3, [r7, #32]
}
 80048ee:	bf00      	nop
 80048f0:	e7fe      	b.n	80048f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80048f2:	f001 ff21 	bl	8006738 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80048f6:	f3ef 8211 	mrs	r2, BASEPRI
 80048fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	61fa      	str	r2, [r7, #28]
 800490c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800490e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004910:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004914:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491a:	429a      	cmp	r2, r3
 800491c:	d302      	bcc.n	8004924 <xQueueGenericSendFromISR+0xbc>
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	2b02      	cmp	r3, #2
 8004922:	d12f      	bne.n	8004984 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004926:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800492a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800492e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004932:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	68b9      	ldr	r1, [r7, #8]
 8004938:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800493a:	f000 f911 	bl	8004b60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800493e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004942:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004946:	d112      	bne.n	800496e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	2b00      	cmp	r3, #0
 800494e:	d016      	beq.n	800497e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004952:	3324      	adds	r3, #36	; 0x24
 8004954:	4618      	mov	r0, r3
 8004956:	f000 fef5 	bl	8005744 <xTaskRemoveFromEventList>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00e      	beq.n	800497e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00b      	beq.n	800497e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	e007      	b.n	800497e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800496e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004972:	3301      	adds	r3, #1
 8004974:	b2db      	uxtb	r3, r3
 8004976:	b25a      	sxtb	r2, r3
 8004978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800497e:	2301      	movs	r3, #1
 8004980:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004982:	e001      	b.n	8004988 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004984:	2300      	movs	r3, #0
 8004986:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800498a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004992:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004996:	4618      	mov	r0, r3
 8004998:	3740      	adds	r7, #64	; 0x40
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b08c      	sub	sp, #48	; 0x30
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80049ac:	2300      	movs	r3, #0
 80049ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80049b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10a      	bne.n	80049d0 <xQueueReceive+0x30>
	__asm volatile
 80049ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	623b      	str	r3, [r7, #32]
}
 80049cc:	bf00      	nop
 80049ce:	e7fe      	b.n	80049ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d103      	bne.n	80049de <xQueueReceive+0x3e>
 80049d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <xQueueReceive+0x42>
 80049de:	2301      	movs	r3, #1
 80049e0:	e000      	b.n	80049e4 <xQueueReceive+0x44>
 80049e2:	2300      	movs	r3, #0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10a      	bne.n	80049fe <xQueueReceive+0x5e>
	__asm volatile
 80049e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ec:	f383 8811 	msr	BASEPRI, r3
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	61fb      	str	r3, [r7, #28]
}
 80049fa:	bf00      	nop
 80049fc:	e7fe      	b.n	80049fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049fe:	f001 f85f 	bl	8005ac0 <xTaskGetSchedulerState>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d102      	bne.n	8004a0e <xQueueReceive+0x6e>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <xQueueReceive+0x72>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e000      	b.n	8004a14 <xQueueReceive+0x74>
 8004a12:	2300      	movs	r3, #0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10a      	bne.n	8004a2e <xQueueReceive+0x8e>
	__asm volatile
 8004a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1c:	f383 8811 	msr	BASEPRI, r3
 8004a20:	f3bf 8f6f 	isb	sy
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	61bb      	str	r3, [r7, #24]
}
 8004a2a:	bf00      	nop
 8004a2c:	e7fe      	b.n	8004a2c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a2e:	f001 fda1 	bl	8006574 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a36:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d01f      	beq.n	8004a7e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a3e:	68b9      	ldr	r1, [r7, #8]
 8004a40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a42:	f000 f8f7 	bl	8004c34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	1e5a      	subs	r2, r3, #1
 8004a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00f      	beq.n	8004a76 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a58:	3310      	adds	r3, #16
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 fe72 	bl	8005744 <xTaskRemoveFromEventList>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d007      	beq.n	8004a76 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a66:	4b3d      	ldr	r3, [pc, #244]	; (8004b5c <xQueueReceive+0x1bc>)
 8004a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a76:	f001 fdad 	bl	80065d4 <vPortExitCritical>
				return pdPASS;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e069      	b.n	8004b52 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d103      	bne.n	8004a8c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a84:	f001 fda6 	bl	80065d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	e062      	b.n	8004b52 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d106      	bne.n	8004aa0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a92:	f107 0310 	add.w	r3, r7, #16
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 feb8 	bl	800580c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004aa0:	f001 fd98 	bl	80065d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004aa4:	f000 fc06 	bl	80052b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004aa8:	f001 fd64 	bl	8006574 <vPortEnterCritical>
 8004aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ab2:	b25b      	sxtb	r3, r3
 8004ab4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ab8:	d103      	bne.n	8004ac2 <xQueueReceive+0x122>
 8004aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ac8:	b25b      	sxtb	r3, r3
 8004aca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ace:	d103      	bne.n	8004ad8 <xQueueReceive+0x138>
 8004ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ad8:	f001 fd7c 	bl	80065d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004adc:	1d3a      	adds	r2, r7, #4
 8004ade:	f107 0310 	add.w	r3, r7, #16
 8004ae2:	4611      	mov	r1, r2
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 fea7 	bl	8005838 <xTaskCheckForTimeOut>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d123      	bne.n	8004b38 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004af0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004af2:	f000 f917 	bl	8004d24 <prvIsQueueEmpty>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d017      	beq.n	8004b2c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afe:	3324      	adds	r3, #36	; 0x24
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	4611      	mov	r1, r2
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 fdcd 	bl	80056a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b0c:	f000 f8b8 	bl	8004c80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b10:	f000 fbde 	bl	80052d0 <xTaskResumeAll>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d189      	bne.n	8004a2e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004b1a:	4b10      	ldr	r3, [pc, #64]	; (8004b5c <xQueueReceive+0x1bc>)
 8004b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b20:	601a      	str	r2, [r3, #0]
 8004b22:	f3bf 8f4f 	dsb	sy
 8004b26:	f3bf 8f6f 	isb	sy
 8004b2a:	e780      	b.n	8004a2e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004b2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b2e:	f000 f8a7 	bl	8004c80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b32:	f000 fbcd 	bl	80052d0 <xTaskResumeAll>
 8004b36:	e77a      	b.n	8004a2e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004b38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b3a:	f000 f8a1 	bl	8004c80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b3e:	f000 fbc7 	bl	80052d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b44:	f000 f8ee 	bl	8004d24 <prvIsQueueEmpty>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f43f af6f 	beq.w	8004a2e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3730      	adds	r7, #48	; 0x30
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	e000ed04 	.word	0xe000ed04

08004b60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10d      	bne.n	8004b9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d14d      	bne.n	8004c22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 ffb6 	bl	8005afc <xTaskPriorityDisinherit>
 8004b90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	609a      	str	r2, [r3, #8]
 8004b98:	e043      	b.n	8004c22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d119      	bne.n	8004bd4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6858      	ldr	r0, [r3, #4]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba8:	461a      	mov	r2, r3
 8004baa:	68b9      	ldr	r1, [r7, #8]
 8004bac:	f002 f812 	bl	8006bd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb8:	441a      	add	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d32b      	bcc.n	8004c22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	605a      	str	r2, [r3, #4]
 8004bd2:	e026      	b.n	8004c22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	68d8      	ldr	r0, [r3, #12]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	461a      	mov	r2, r3
 8004bde:	68b9      	ldr	r1, [r7, #8]
 8004be0:	f001 fff8 	bl	8006bd4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	68da      	ldr	r2, [r3, #12]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bec:	425b      	negs	r3, r3
 8004bee:	441a      	add	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	68da      	ldr	r2, [r3, #12]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d207      	bcs.n	8004c10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c08:	425b      	negs	r3, r3
 8004c0a:	441a      	add	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d105      	bne.n	8004c22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1c5a      	adds	r2, r3, #1
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004c2a:	697b      	ldr	r3, [r7, #20]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3718      	adds	r7, #24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d018      	beq.n	8004c78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	441a      	add	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68da      	ldr	r2, [r3, #12]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d303      	bcc.n	8004c68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68d9      	ldr	r1, [r3, #12]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c70:	461a      	mov	r2, r3
 8004c72:	6838      	ldr	r0, [r7, #0]
 8004c74:	f001 ffae 	bl	8006bd4 <memcpy>
	}
}
 8004c78:	bf00      	nop
 8004c7a:	3708      	adds	r7, #8
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c88:	f001 fc74 	bl	8006574 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c94:	e011      	b.n	8004cba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d012      	beq.n	8004cc4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	3324      	adds	r3, #36	; 0x24
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 fd4e 	bl	8005744 <xTaskRemoveFromEventList>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004cae:	f000 fe25 	bl	80058fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004cb2:	7bfb      	ldrb	r3, [r7, #15]
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	dce9      	bgt.n	8004c96 <prvUnlockQueue+0x16>
 8004cc2:	e000      	b.n	8004cc6 <prvUnlockQueue+0x46>
					break;
 8004cc4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	22ff      	movs	r2, #255	; 0xff
 8004cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004cce:	f001 fc81 	bl	80065d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004cd2:	f001 fc4f 	bl	8006574 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cdc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004cde:	e011      	b.n	8004d04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d012      	beq.n	8004d0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3310      	adds	r3, #16
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 fd29 	bl	8005744 <xTaskRemoveFromEventList>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004cf8:	f000 fe00 	bl	80058fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004cfc:	7bbb      	ldrb	r3, [r7, #14]
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	dce9      	bgt.n	8004ce0 <prvUnlockQueue+0x60>
 8004d0c:	e000      	b.n	8004d10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004d0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	22ff      	movs	r2, #255	; 0xff
 8004d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004d18:	f001 fc5c 	bl	80065d4 <vPortExitCritical>
}
 8004d1c:	bf00      	nop
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d2c:	f001 fc22 	bl	8006574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d102      	bne.n	8004d3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	e001      	b.n	8004d42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d42:	f001 fc47 	bl	80065d4 <vPortExitCritical>

	return xReturn;
 8004d46:	68fb      	ldr	r3, [r7, #12]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d58:	f001 fc0c 	bl	8006574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d102      	bne.n	8004d6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	e001      	b.n	8004d72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d72:	f001 fc2f 	bl	80065d4 <vPortExitCritical>

	return xReturn;
 8004d76:	68fb      	ldr	r3, [r7, #12]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60fb      	str	r3, [r7, #12]
 8004d8e:	e014      	b.n	8004dba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004d90:	4a0f      	ldr	r2, [pc, #60]	; (8004dd0 <vQueueAddToRegistry+0x50>)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10b      	bne.n	8004db4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004d9c:	490c      	ldr	r1, [pc, #48]	; (8004dd0 <vQueueAddToRegistry+0x50>)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004da6:	4a0a      	ldr	r2, [pc, #40]	; (8004dd0 <vQueueAddToRegistry+0x50>)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	4413      	add	r3, r2
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004db2:	e006      	b.n	8004dc2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	3301      	adds	r3, #1
 8004db8:	60fb      	str	r3, [r7, #12]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2b07      	cmp	r3, #7
 8004dbe:	d9e7      	bls.n	8004d90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004dc0:	bf00      	nop
 8004dc2:	bf00      	nop
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	20003b28 	.word	0x20003b28

08004dd4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004de4:	f001 fbc6 	bl	8006574 <vPortEnterCritical>
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dee:	b25b      	sxtb	r3, r3
 8004df0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004df4:	d103      	bne.n	8004dfe <vQueueWaitForMessageRestricted+0x2a>
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e04:	b25b      	sxtb	r3, r3
 8004e06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e0a:	d103      	bne.n	8004e14 <vQueueWaitForMessageRestricted+0x40>
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e14:	f001 fbde 	bl	80065d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d106      	bne.n	8004e2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	3324      	adds	r3, #36	; 0x24
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	68b9      	ldr	r1, [r7, #8]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 fc5f 	bl	80056ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004e2e:	6978      	ldr	r0, [r7, #20]
 8004e30:	f7ff ff26 	bl	8004c80 <prvUnlockQueue>
	}
 8004e34:	bf00      	nop
 8004e36:	3718      	adds	r7, #24
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b08e      	sub	sp, #56	; 0x38
 8004e40:	af04      	add	r7, sp, #16
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
 8004e48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10a      	bne.n	8004e66 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	623b      	str	r3, [r7, #32]
}
 8004e62:	bf00      	nop
 8004e64:	e7fe      	b.n	8004e64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10a      	bne.n	8004e82 <xTaskCreateStatic+0x46>
	__asm volatile
 8004e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e70:	f383 8811 	msr	BASEPRI, r3
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	61fb      	str	r3, [r7, #28]
}
 8004e7e:	bf00      	nop
 8004e80:	e7fe      	b.n	8004e80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e82:	235c      	movs	r3, #92	; 0x5c
 8004e84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	2b5c      	cmp	r3, #92	; 0x5c
 8004e8a:	d00a      	beq.n	8004ea2 <xTaskCreateStatic+0x66>
	__asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	61bb      	str	r3, [r7, #24]
}
 8004e9e:	bf00      	nop
 8004ea0:	e7fe      	b.n	8004ea0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004ea2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d01e      	beq.n	8004ee8 <xTaskCreateStatic+0xac>
 8004eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d01b      	beq.n	8004ee8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eb8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	2202      	movs	r2, #2
 8004ebe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	9303      	str	r3, [sp, #12]
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	9302      	str	r3, [sp, #8]
 8004eca:	f107 0314 	add.w	r3, r7, #20
 8004ece:	9301      	str	r3, [sp, #4]
 8004ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	68b9      	ldr	r1, [r7, #8]
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 f850 	bl	8004f80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ee0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ee2:	f000 f8dd 	bl	80050a0 <prvAddNewTaskToReadyList>
 8004ee6:	e001      	b.n	8004eec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004eec:	697b      	ldr	r3, [r7, #20]
	}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3728      	adds	r7, #40	; 0x28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b08c      	sub	sp, #48	; 0x30
 8004efa:	af04      	add	r7, sp, #16
 8004efc:	60f8      	str	r0, [r7, #12]
 8004efe:	60b9      	str	r1, [r7, #8]
 8004f00:	603b      	str	r3, [r7, #0]
 8004f02:	4613      	mov	r3, r2
 8004f04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f06:	88fb      	ldrh	r3, [r7, #6]
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f001 fc54 	bl	80067b8 <pvPortMalloc>
 8004f10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00e      	beq.n	8004f36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f18:	205c      	movs	r0, #92	; 0x5c
 8004f1a:	f001 fc4d 	bl	80067b8 <pvPortMalloc>
 8004f1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	631a      	str	r2, [r3, #48]	; 0x30
 8004f2c:	e005      	b.n	8004f3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f2e:	6978      	ldr	r0, [r7, #20]
 8004f30:	f001 fd0e 	bl	8006950 <vPortFree>
 8004f34:	e001      	b.n	8004f3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f36:	2300      	movs	r3, #0
 8004f38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d017      	beq.n	8004f70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f48:	88fa      	ldrh	r2, [r7, #6]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	9303      	str	r3, [sp, #12]
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	9302      	str	r3, [sp, #8]
 8004f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f54:	9301      	str	r3, [sp, #4]
 8004f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	68b9      	ldr	r1, [r7, #8]
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 f80e 	bl	8004f80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f64:	69f8      	ldr	r0, [r7, #28]
 8004f66:	f000 f89b 	bl	80050a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	61bb      	str	r3, [r7, #24]
 8004f6e:	e002      	b.n	8004f76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f76:	69bb      	ldr	r3, [r7, #24]
	}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3720      	adds	r7, #32
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b088      	sub	sp, #32
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
 8004f8c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f90:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	461a      	mov	r2, r3
 8004f98:	21a5      	movs	r1, #165	; 0xa5
 8004f9a:	f001 fe29 	bl	8006bf0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	f023 0307 	bic.w	r3, r3, #7
 8004fb6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00a      	beq.n	8004fd8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc6:	f383 8811 	msr	BASEPRI, r3
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	617b      	str	r3, [r7, #20]
}
 8004fd4:	bf00      	nop
 8004fd6:	e7fe      	b.n	8004fd6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d01f      	beq.n	800501e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fde:	2300      	movs	r3, #0
 8004fe0:	61fb      	str	r3, [r7, #28]
 8004fe2:	e012      	b.n	800500a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	4413      	add	r3, r2
 8004fea:	7819      	ldrb	r1, [r3, #0]
 8004fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	3334      	adds	r3, #52	; 0x34
 8004ff4:	460a      	mov	r2, r1
 8004ff6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d006      	beq.n	8005012 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	3301      	adds	r3, #1
 8005008:	61fb      	str	r3, [r7, #28]
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	2b0f      	cmp	r3, #15
 800500e:	d9e9      	bls.n	8004fe4 <prvInitialiseNewTask+0x64>
 8005010:	e000      	b.n	8005014 <prvInitialiseNewTask+0x94>
			{
				break;
 8005012:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800501c:	e003      	b.n	8005026 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005028:	2b37      	cmp	r3, #55	; 0x37
 800502a:	d901      	bls.n	8005030 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800502c:	2337      	movs	r3, #55	; 0x37
 800502e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005034:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800503a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800503c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503e:	2200      	movs	r2, #0
 8005040:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005044:	3304      	adds	r3, #4
 8005046:	4618      	mov	r0, r3
 8005048:	f7ff f978 	bl	800433c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800504c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504e:	3318      	adds	r3, #24
 8005050:	4618      	mov	r0, r3
 8005052:	f7ff f973 	bl	800433c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800505a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800505c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005064:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800506a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800506c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506e:	2200      	movs	r2, #0
 8005070:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	68f9      	ldr	r1, [r7, #12]
 800507e:	69b8      	ldr	r0, [r7, #24]
 8005080:	f001 f94c 	bl	800631c <pxPortInitialiseStack>
 8005084:	4602      	mov	r2, r0
 8005086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005088:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800508a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005094:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005096:	bf00      	nop
 8005098:	3720      	adds	r7, #32
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
	...

080050a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80050a8:	f001 fa64 	bl	8006574 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80050ac:	4b2d      	ldr	r3, [pc, #180]	; (8005164 <prvAddNewTaskToReadyList+0xc4>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3301      	adds	r3, #1
 80050b2:	4a2c      	ldr	r2, [pc, #176]	; (8005164 <prvAddNewTaskToReadyList+0xc4>)
 80050b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80050b6:	4b2c      	ldr	r3, [pc, #176]	; (8005168 <prvAddNewTaskToReadyList+0xc8>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d109      	bne.n	80050d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80050be:	4a2a      	ldr	r2, [pc, #168]	; (8005168 <prvAddNewTaskToReadyList+0xc8>)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80050c4:	4b27      	ldr	r3, [pc, #156]	; (8005164 <prvAddNewTaskToReadyList+0xc4>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d110      	bne.n	80050ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80050cc:	f000 fc3a 	bl	8005944 <prvInitialiseTaskLists>
 80050d0:	e00d      	b.n	80050ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80050d2:	4b26      	ldr	r3, [pc, #152]	; (800516c <prvAddNewTaskToReadyList+0xcc>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d109      	bne.n	80050ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80050da:	4b23      	ldr	r3, [pc, #140]	; (8005168 <prvAddNewTaskToReadyList+0xc8>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d802      	bhi.n	80050ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80050e8:	4a1f      	ldr	r2, [pc, #124]	; (8005168 <prvAddNewTaskToReadyList+0xc8>)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80050ee:	4b20      	ldr	r3, [pc, #128]	; (8005170 <prvAddNewTaskToReadyList+0xd0>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	3301      	adds	r3, #1
 80050f4:	4a1e      	ldr	r2, [pc, #120]	; (8005170 <prvAddNewTaskToReadyList+0xd0>)
 80050f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80050f8:	4b1d      	ldr	r3, [pc, #116]	; (8005170 <prvAddNewTaskToReadyList+0xd0>)
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005104:	4b1b      	ldr	r3, [pc, #108]	; (8005174 <prvAddNewTaskToReadyList+0xd4>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	429a      	cmp	r2, r3
 800510a:	d903      	bls.n	8005114 <prvAddNewTaskToReadyList+0x74>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005110:	4a18      	ldr	r2, [pc, #96]	; (8005174 <prvAddNewTaskToReadyList+0xd4>)
 8005112:	6013      	str	r3, [r2, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005118:	4613      	mov	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4a15      	ldr	r2, [pc, #84]	; (8005178 <prvAddNewTaskToReadyList+0xd8>)
 8005122:	441a      	add	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3304      	adds	r3, #4
 8005128:	4619      	mov	r1, r3
 800512a:	4610      	mov	r0, r2
 800512c:	f7ff f913 	bl	8004356 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005130:	f001 fa50 	bl	80065d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005134:	4b0d      	ldr	r3, [pc, #52]	; (800516c <prvAddNewTaskToReadyList+0xcc>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00e      	beq.n	800515a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800513c:	4b0a      	ldr	r3, [pc, #40]	; (8005168 <prvAddNewTaskToReadyList+0xc8>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005146:	429a      	cmp	r2, r3
 8005148:	d207      	bcs.n	800515a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800514a:	4b0c      	ldr	r3, [pc, #48]	; (800517c <prvAddNewTaskToReadyList+0xdc>)
 800514c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800515a:	bf00      	nop
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	20000bc4 	.word	0x20000bc4
 8005168:	200006f0 	.word	0x200006f0
 800516c:	20000bd0 	.word	0x20000bd0
 8005170:	20000be0 	.word	0x20000be0
 8005174:	20000bcc 	.word	0x20000bcc
 8005178:	200006f4 	.word	0x200006f4
 800517c:	e000ed04 	.word	0xe000ed04

08005180 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005188:	2300      	movs	r3, #0
 800518a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d017      	beq.n	80051c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005192:	4b13      	ldr	r3, [pc, #76]	; (80051e0 <vTaskDelay+0x60>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <vTaskDelay+0x30>
	__asm volatile
 800519a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	60bb      	str	r3, [r7, #8]
}
 80051ac:	bf00      	nop
 80051ae:	e7fe      	b.n	80051ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80051b0:	f000 f880 	bl	80052b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80051b4:	2100      	movs	r1, #0
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 fd0e 	bl	8005bd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80051bc:	f000 f888 	bl	80052d0 <xTaskResumeAll>
 80051c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d107      	bne.n	80051d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80051c8:	4b06      	ldr	r3, [pc, #24]	; (80051e4 <vTaskDelay+0x64>)
 80051ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80051d8:	bf00      	nop
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	20000bec 	.word	0x20000bec
 80051e4:	e000ed04 	.word	0xe000ed04

080051e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b08a      	sub	sp, #40	; 0x28
 80051ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80051ee:	2300      	movs	r3, #0
 80051f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80051f2:	2300      	movs	r3, #0
 80051f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80051f6:	463a      	mov	r2, r7
 80051f8:	1d39      	adds	r1, r7, #4
 80051fa:	f107 0308 	add.w	r3, r7, #8
 80051fe:	4618      	mov	r0, r3
 8005200:	f7ff f848 	bl	8004294 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005204:	6839      	ldr	r1, [r7, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	9202      	str	r2, [sp, #8]
 800520c:	9301      	str	r3, [sp, #4]
 800520e:	2300      	movs	r3, #0
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	2300      	movs	r3, #0
 8005214:	460a      	mov	r2, r1
 8005216:	4921      	ldr	r1, [pc, #132]	; (800529c <vTaskStartScheduler+0xb4>)
 8005218:	4821      	ldr	r0, [pc, #132]	; (80052a0 <vTaskStartScheduler+0xb8>)
 800521a:	f7ff fe0f 	bl	8004e3c <xTaskCreateStatic>
 800521e:	4603      	mov	r3, r0
 8005220:	4a20      	ldr	r2, [pc, #128]	; (80052a4 <vTaskStartScheduler+0xbc>)
 8005222:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005224:	4b1f      	ldr	r3, [pc, #124]	; (80052a4 <vTaskStartScheduler+0xbc>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d002      	beq.n	8005232 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800522c:	2301      	movs	r3, #1
 800522e:	617b      	str	r3, [r7, #20]
 8005230:	e001      	b.n	8005236 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005232:	2300      	movs	r3, #0
 8005234:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d102      	bne.n	8005242 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800523c:	f000 fd20 	bl	8005c80 <xTimerCreateTimerTask>
 8005240:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d116      	bne.n	8005276 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	613b      	str	r3, [r7, #16]
}
 800525a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800525c:	4b12      	ldr	r3, [pc, #72]	; (80052a8 <vTaskStartScheduler+0xc0>)
 800525e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005262:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005264:	4b11      	ldr	r3, [pc, #68]	; (80052ac <vTaskStartScheduler+0xc4>)
 8005266:	2201      	movs	r2, #1
 8005268:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800526a:	4b11      	ldr	r3, [pc, #68]	; (80052b0 <vTaskStartScheduler+0xc8>)
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005270:	f001 f8de 	bl	8006430 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005274:	e00e      	b.n	8005294 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800527c:	d10a      	bne.n	8005294 <vTaskStartScheduler+0xac>
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	60fb      	str	r3, [r7, #12]
}
 8005290:	bf00      	nop
 8005292:	e7fe      	b.n	8005292 <vTaskStartScheduler+0xaa>
}
 8005294:	bf00      	nop
 8005296:	3718      	adds	r7, #24
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	08006c40 	.word	0x08006c40
 80052a0:	08005915 	.word	0x08005915
 80052a4:	20000be8 	.word	0x20000be8
 80052a8:	20000be4 	.word	0x20000be4
 80052ac:	20000bd0 	.word	0x20000bd0
 80052b0:	20000bc8 	.word	0x20000bc8

080052b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80052b4:	b480      	push	{r7}
 80052b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80052b8:	4b04      	ldr	r3, [pc, #16]	; (80052cc <vTaskSuspendAll+0x18>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3301      	adds	r3, #1
 80052be:	4a03      	ldr	r2, [pc, #12]	; (80052cc <vTaskSuspendAll+0x18>)
 80052c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80052c2:	bf00      	nop
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	20000bec 	.word	0x20000bec

080052d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80052d6:	2300      	movs	r3, #0
 80052d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80052da:	2300      	movs	r3, #0
 80052dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80052de:	4b42      	ldr	r3, [pc, #264]	; (80053e8 <xTaskResumeAll+0x118>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10a      	bne.n	80052fc <xTaskResumeAll+0x2c>
	__asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	603b      	str	r3, [r7, #0]
}
 80052f8:	bf00      	nop
 80052fa:	e7fe      	b.n	80052fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80052fc:	f001 f93a 	bl	8006574 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005300:	4b39      	ldr	r3, [pc, #228]	; (80053e8 <xTaskResumeAll+0x118>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	3b01      	subs	r3, #1
 8005306:	4a38      	ldr	r2, [pc, #224]	; (80053e8 <xTaskResumeAll+0x118>)
 8005308:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800530a:	4b37      	ldr	r3, [pc, #220]	; (80053e8 <xTaskResumeAll+0x118>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d162      	bne.n	80053d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005312:	4b36      	ldr	r3, [pc, #216]	; (80053ec <xTaskResumeAll+0x11c>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d05e      	beq.n	80053d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800531a:	e02f      	b.n	800537c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800531c:	4b34      	ldr	r3, [pc, #208]	; (80053f0 <xTaskResumeAll+0x120>)
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	3318      	adds	r3, #24
 8005328:	4618      	mov	r0, r3
 800532a:	f7ff f871 	bl	8004410 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	3304      	adds	r3, #4
 8005332:	4618      	mov	r0, r3
 8005334:	f7ff f86c 	bl	8004410 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800533c:	4b2d      	ldr	r3, [pc, #180]	; (80053f4 <xTaskResumeAll+0x124>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	429a      	cmp	r2, r3
 8005342:	d903      	bls.n	800534c <xTaskResumeAll+0x7c>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005348:	4a2a      	ldr	r2, [pc, #168]	; (80053f4 <xTaskResumeAll+0x124>)
 800534a:	6013      	str	r3, [r2, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005350:	4613      	mov	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4a27      	ldr	r2, [pc, #156]	; (80053f8 <xTaskResumeAll+0x128>)
 800535a:	441a      	add	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	3304      	adds	r3, #4
 8005360:	4619      	mov	r1, r3
 8005362:	4610      	mov	r0, r2
 8005364:	f7fe fff7 	bl	8004356 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800536c:	4b23      	ldr	r3, [pc, #140]	; (80053fc <xTaskResumeAll+0x12c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005372:	429a      	cmp	r2, r3
 8005374:	d302      	bcc.n	800537c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005376:	4b22      	ldr	r3, [pc, #136]	; (8005400 <xTaskResumeAll+0x130>)
 8005378:	2201      	movs	r2, #1
 800537a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800537c:	4b1c      	ldr	r3, [pc, #112]	; (80053f0 <xTaskResumeAll+0x120>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1cb      	bne.n	800531c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800538a:	f000 fb79 	bl	8005a80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800538e:	4b1d      	ldr	r3, [pc, #116]	; (8005404 <xTaskResumeAll+0x134>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d010      	beq.n	80053bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800539a:	f000 f847 	bl	800542c <xTaskIncrementTick>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d002      	beq.n	80053aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80053a4:	4b16      	ldr	r3, [pc, #88]	; (8005400 <xTaskResumeAll+0x130>)
 80053a6:	2201      	movs	r2, #1
 80053a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	3b01      	subs	r3, #1
 80053ae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1f1      	bne.n	800539a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80053b6:	4b13      	ldr	r3, [pc, #76]	; (8005404 <xTaskResumeAll+0x134>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80053bc:	4b10      	ldr	r3, [pc, #64]	; (8005400 <xTaskResumeAll+0x130>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d009      	beq.n	80053d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80053c4:	2301      	movs	r3, #1
 80053c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80053c8:	4b0f      	ldr	r3, [pc, #60]	; (8005408 <xTaskResumeAll+0x138>)
 80053ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ce:	601a      	str	r2, [r3, #0]
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053d8:	f001 f8fc 	bl	80065d4 <vPortExitCritical>

	return xAlreadyYielded;
 80053dc:	68bb      	ldr	r3, [r7, #8]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	20000bec 	.word	0x20000bec
 80053ec:	20000bc4 	.word	0x20000bc4
 80053f0:	20000b84 	.word	0x20000b84
 80053f4:	20000bcc 	.word	0x20000bcc
 80053f8:	200006f4 	.word	0x200006f4
 80053fc:	200006f0 	.word	0x200006f0
 8005400:	20000bd8 	.word	0x20000bd8
 8005404:	20000bd4 	.word	0x20000bd4
 8005408:	e000ed04 	.word	0xe000ed04

0800540c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005412:	4b05      	ldr	r3, [pc, #20]	; (8005428 <xTaskGetTickCount+0x1c>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005418:	687b      	ldr	r3, [r7, #4]
}
 800541a:	4618      	mov	r0, r3
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	20000bc8 	.word	0x20000bc8

0800542c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005432:	2300      	movs	r3, #0
 8005434:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005436:	4b4f      	ldr	r3, [pc, #316]	; (8005574 <xTaskIncrementTick+0x148>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	f040 808f 	bne.w	800555e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005440:	4b4d      	ldr	r3, [pc, #308]	; (8005578 <xTaskIncrementTick+0x14c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	3301      	adds	r3, #1
 8005446:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005448:	4a4b      	ldr	r2, [pc, #300]	; (8005578 <xTaskIncrementTick+0x14c>)
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d120      	bne.n	8005496 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005454:	4b49      	ldr	r3, [pc, #292]	; (800557c <xTaskIncrementTick+0x150>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00a      	beq.n	8005474 <xTaskIncrementTick+0x48>
	__asm volatile
 800545e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	603b      	str	r3, [r7, #0]
}
 8005470:	bf00      	nop
 8005472:	e7fe      	b.n	8005472 <xTaskIncrementTick+0x46>
 8005474:	4b41      	ldr	r3, [pc, #260]	; (800557c <xTaskIncrementTick+0x150>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	4b41      	ldr	r3, [pc, #260]	; (8005580 <xTaskIncrementTick+0x154>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a3f      	ldr	r2, [pc, #252]	; (800557c <xTaskIncrementTick+0x150>)
 8005480:	6013      	str	r3, [r2, #0]
 8005482:	4a3f      	ldr	r2, [pc, #252]	; (8005580 <xTaskIncrementTick+0x154>)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6013      	str	r3, [r2, #0]
 8005488:	4b3e      	ldr	r3, [pc, #248]	; (8005584 <xTaskIncrementTick+0x158>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	3301      	adds	r3, #1
 800548e:	4a3d      	ldr	r2, [pc, #244]	; (8005584 <xTaskIncrementTick+0x158>)
 8005490:	6013      	str	r3, [r2, #0]
 8005492:	f000 faf5 	bl	8005a80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005496:	4b3c      	ldr	r3, [pc, #240]	; (8005588 <xTaskIncrementTick+0x15c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	429a      	cmp	r2, r3
 800549e:	d349      	bcc.n	8005534 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054a0:	4b36      	ldr	r3, [pc, #216]	; (800557c <xTaskIncrementTick+0x150>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d104      	bne.n	80054b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054aa:	4b37      	ldr	r3, [pc, #220]	; (8005588 <xTaskIncrementTick+0x15c>)
 80054ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054b0:	601a      	str	r2, [r3, #0]
					break;
 80054b2:	e03f      	b.n	8005534 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054b4:	4b31      	ldr	r3, [pc, #196]	; (800557c <xTaskIncrementTick+0x150>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d203      	bcs.n	80054d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80054cc:	4a2e      	ldr	r2, [pc, #184]	; (8005588 <xTaskIncrementTick+0x15c>)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80054d2:	e02f      	b.n	8005534 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	3304      	adds	r3, #4
 80054d8:	4618      	mov	r0, r3
 80054da:	f7fe ff99 	bl	8004410 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d004      	beq.n	80054f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	3318      	adds	r3, #24
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fe ff90 	bl	8004410 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f4:	4b25      	ldr	r3, [pc, #148]	; (800558c <xTaskIncrementTick+0x160>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d903      	bls.n	8005504 <xTaskIncrementTick+0xd8>
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005500:	4a22      	ldr	r2, [pc, #136]	; (800558c <xTaskIncrementTick+0x160>)
 8005502:	6013      	str	r3, [r2, #0]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005508:	4613      	mov	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4a1f      	ldr	r2, [pc, #124]	; (8005590 <xTaskIncrementTick+0x164>)
 8005512:	441a      	add	r2, r3
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	3304      	adds	r3, #4
 8005518:	4619      	mov	r1, r3
 800551a:	4610      	mov	r0, r2
 800551c:	f7fe ff1b 	bl	8004356 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005524:	4b1b      	ldr	r3, [pc, #108]	; (8005594 <xTaskIncrementTick+0x168>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552a:	429a      	cmp	r2, r3
 800552c:	d3b8      	bcc.n	80054a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800552e:	2301      	movs	r3, #1
 8005530:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005532:	e7b5      	b.n	80054a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005534:	4b17      	ldr	r3, [pc, #92]	; (8005594 <xTaskIncrementTick+0x168>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800553a:	4915      	ldr	r1, [pc, #84]	; (8005590 <xTaskIncrementTick+0x164>)
 800553c:	4613      	mov	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	440b      	add	r3, r1
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d901      	bls.n	8005550 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800554c:	2301      	movs	r3, #1
 800554e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005550:	4b11      	ldr	r3, [pc, #68]	; (8005598 <xTaskIncrementTick+0x16c>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d007      	beq.n	8005568 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005558:	2301      	movs	r3, #1
 800555a:	617b      	str	r3, [r7, #20]
 800555c:	e004      	b.n	8005568 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800555e:	4b0f      	ldr	r3, [pc, #60]	; (800559c <xTaskIncrementTick+0x170>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	3301      	adds	r3, #1
 8005564:	4a0d      	ldr	r2, [pc, #52]	; (800559c <xTaskIncrementTick+0x170>)
 8005566:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005568:	697b      	ldr	r3, [r7, #20]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3718      	adds	r7, #24
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	20000bec 	.word	0x20000bec
 8005578:	20000bc8 	.word	0x20000bc8
 800557c:	20000b7c 	.word	0x20000b7c
 8005580:	20000b80 	.word	0x20000b80
 8005584:	20000bdc 	.word	0x20000bdc
 8005588:	20000be4 	.word	0x20000be4
 800558c:	20000bcc 	.word	0x20000bcc
 8005590:	200006f4 	.word	0x200006f4
 8005594:	200006f0 	.word	0x200006f0
 8005598:	20000bd8 	.word	0x20000bd8
 800559c:	20000bd4 	.word	0x20000bd4

080055a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80055a6:	4b3a      	ldr	r3, [pc, #232]	; (8005690 <vTaskSwitchContext+0xf0>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80055ae:	4b39      	ldr	r3, [pc, #228]	; (8005694 <vTaskSwitchContext+0xf4>)
 80055b0:	2201      	movs	r2, #1
 80055b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80055b4:	e068      	b.n	8005688 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 80055b6:	4b37      	ldr	r3, [pc, #220]	; (8005694 <vTaskSwitchContext+0xf4>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80055bc:	4b36      	ldr	r3, [pc, #216]	; (8005698 <vTaskSwitchContext+0xf8>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c2:	613b      	str	r3, [r7, #16]
 80055c4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d111      	bne.n	80055f8 <vTaskSwitchContext+0x58>
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	3304      	adds	r3, #4
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d10b      	bne.n	80055f8 <vTaskSwitchContext+0x58>
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	3308      	adds	r3, #8
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d105      	bne.n	80055f8 <vTaskSwitchContext+0x58>
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	330c      	adds	r3, #12
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d008      	beq.n	800560a <vTaskSwitchContext+0x6a>
 80055f8:	4b27      	ldr	r3, [pc, #156]	; (8005698 <vTaskSwitchContext+0xf8>)
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	4b26      	ldr	r3, [pc, #152]	; (8005698 <vTaskSwitchContext+0xf8>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3334      	adds	r3, #52	; 0x34
 8005602:	4619      	mov	r1, r3
 8005604:	4610      	mov	r0, r2
 8005606:	f7fa ffcf 	bl	80005a8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800560a:	4b24      	ldr	r3, [pc, #144]	; (800569c <vTaskSwitchContext+0xfc>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	617b      	str	r3, [r7, #20]
 8005610:	e010      	b.n	8005634 <vTaskSwitchContext+0x94>
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10a      	bne.n	800562e <vTaskSwitchContext+0x8e>
	__asm volatile
 8005618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561c:	f383 8811 	msr	BASEPRI, r3
 8005620:	f3bf 8f6f 	isb	sy
 8005624:	f3bf 8f4f 	dsb	sy
 8005628:	607b      	str	r3, [r7, #4]
}
 800562a:	bf00      	nop
 800562c:	e7fe      	b.n	800562c <vTaskSwitchContext+0x8c>
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	3b01      	subs	r3, #1
 8005632:	617b      	str	r3, [r7, #20]
 8005634:	491a      	ldr	r1, [pc, #104]	; (80056a0 <vTaskSwitchContext+0x100>)
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	4613      	mov	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	440b      	add	r3, r1
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d0e4      	beq.n	8005612 <vTaskSwitchContext+0x72>
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	4613      	mov	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4a13      	ldr	r2, [pc, #76]	; (80056a0 <vTaskSwitchContext+0x100>)
 8005654:	4413      	add	r3, r2
 8005656:	60bb      	str	r3, [r7, #8]
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	605a      	str	r2, [r3, #4]
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	3308      	adds	r3, #8
 800566a:	429a      	cmp	r2, r3
 800566c:	d104      	bne.n	8005678 <vTaskSwitchContext+0xd8>
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	605a      	str	r2, [r3, #4]
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	4a06      	ldr	r2, [pc, #24]	; (8005698 <vTaskSwitchContext+0xf8>)
 8005680:	6013      	str	r3, [r2, #0]
 8005682:	4a06      	ldr	r2, [pc, #24]	; (800569c <vTaskSwitchContext+0xfc>)
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	6013      	str	r3, [r2, #0]
}
 8005688:	bf00      	nop
 800568a:	3718      	adds	r7, #24
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	20000bec 	.word	0x20000bec
 8005694:	20000bd8 	.word	0x20000bd8
 8005698:	200006f0 	.word	0x200006f0
 800569c:	20000bcc 	.word	0x20000bcc
 80056a0:	200006f4 	.word	0x200006f4

080056a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10a      	bne.n	80056ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80056b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b8:	f383 8811 	msr	BASEPRI, r3
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	60fb      	str	r3, [r7, #12]
}
 80056c6:	bf00      	nop
 80056c8:	e7fe      	b.n	80056c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056ca:	4b07      	ldr	r3, [pc, #28]	; (80056e8 <vTaskPlaceOnEventList+0x44>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	3318      	adds	r3, #24
 80056d0:	4619      	mov	r1, r3
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7fe fe63 	bl	800439e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80056d8:	2101      	movs	r1, #1
 80056da:	6838      	ldr	r0, [r7, #0]
 80056dc:	f000 fa7c 	bl	8005bd8 <prvAddCurrentTaskToDelayedList>
}
 80056e0:	bf00      	nop
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	200006f0 	.word	0x200006f0

080056ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b086      	sub	sp, #24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10a      	bne.n	8005714 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80056fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	617b      	str	r3, [r7, #20]
}
 8005710:	bf00      	nop
 8005712:	e7fe      	b.n	8005712 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005714:	4b0a      	ldr	r3, [pc, #40]	; (8005740 <vTaskPlaceOnEventListRestricted+0x54>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3318      	adds	r3, #24
 800571a:	4619      	mov	r1, r3
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f7fe fe1a 	bl	8004356 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d002      	beq.n	800572e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005728:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800572c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800572e:	6879      	ldr	r1, [r7, #4]
 8005730:	68b8      	ldr	r0, [r7, #8]
 8005732:	f000 fa51 	bl	8005bd8 <prvAddCurrentTaskToDelayedList>
	}
 8005736:	bf00      	nop
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	200006f0 	.word	0x200006f0

08005744 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10a      	bne.n	8005770 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800575a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	60fb      	str	r3, [r7, #12]
}
 800576c:	bf00      	nop
 800576e:	e7fe      	b.n	800576e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	3318      	adds	r3, #24
 8005774:	4618      	mov	r0, r3
 8005776:	f7fe fe4b 	bl	8004410 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800577a:	4b1e      	ldr	r3, [pc, #120]	; (80057f4 <xTaskRemoveFromEventList+0xb0>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d11d      	bne.n	80057be <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	3304      	adds	r3, #4
 8005786:	4618      	mov	r0, r3
 8005788:	f7fe fe42 	bl	8004410 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005790:	4b19      	ldr	r3, [pc, #100]	; (80057f8 <xTaskRemoveFromEventList+0xb4>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	429a      	cmp	r2, r3
 8005796:	d903      	bls.n	80057a0 <xTaskRemoveFromEventList+0x5c>
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579c:	4a16      	ldr	r2, [pc, #88]	; (80057f8 <xTaskRemoveFromEventList+0xb4>)
 800579e:	6013      	str	r3, [r2, #0]
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a4:	4613      	mov	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4a13      	ldr	r2, [pc, #76]	; (80057fc <xTaskRemoveFromEventList+0xb8>)
 80057ae:	441a      	add	r2, r3
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	3304      	adds	r3, #4
 80057b4:	4619      	mov	r1, r3
 80057b6:	4610      	mov	r0, r2
 80057b8:	f7fe fdcd 	bl	8004356 <vListInsertEnd>
 80057bc:	e005      	b.n	80057ca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	3318      	adds	r3, #24
 80057c2:	4619      	mov	r1, r3
 80057c4:	480e      	ldr	r0, [pc, #56]	; (8005800 <xTaskRemoveFromEventList+0xbc>)
 80057c6:	f7fe fdc6 	bl	8004356 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ce:	4b0d      	ldr	r3, [pc, #52]	; (8005804 <xTaskRemoveFromEventList+0xc0>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d905      	bls.n	80057e4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80057d8:	2301      	movs	r3, #1
 80057da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80057dc:	4b0a      	ldr	r3, [pc, #40]	; (8005808 <xTaskRemoveFromEventList+0xc4>)
 80057de:	2201      	movs	r2, #1
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	e001      	b.n	80057e8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80057e4:	2300      	movs	r3, #0
 80057e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80057e8:	697b      	ldr	r3, [r7, #20]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3718      	adds	r7, #24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	20000bec 	.word	0x20000bec
 80057f8:	20000bcc 	.word	0x20000bcc
 80057fc:	200006f4 	.word	0x200006f4
 8005800:	20000b84 	.word	0x20000b84
 8005804:	200006f0 	.word	0x200006f0
 8005808:	20000bd8 	.word	0x20000bd8

0800580c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005814:	4b06      	ldr	r3, [pc, #24]	; (8005830 <vTaskInternalSetTimeOutState+0x24>)
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800581c:	4b05      	ldr	r3, [pc, #20]	; (8005834 <vTaskInternalSetTimeOutState+0x28>)
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	605a      	str	r2, [r3, #4]
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	20000bdc 	.word	0x20000bdc
 8005834:	20000bc8 	.word	0x20000bc8

08005838 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b088      	sub	sp, #32
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10a      	bne.n	800585e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584c:	f383 8811 	msr	BASEPRI, r3
 8005850:	f3bf 8f6f 	isb	sy
 8005854:	f3bf 8f4f 	dsb	sy
 8005858:	613b      	str	r3, [r7, #16]
}
 800585a:	bf00      	nop
 800585c:	e7fe      	b.n	800585c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10a      	bne.n	800587a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	60fb      	str	r3, [r7, #12]
}
 8005876:	bf00      	nop
 8005878:	e7fe      	b.n	8005878 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800587a:	f000 fe7b 	bl	8006574 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800587e:	4b1d      	ldr	r3, [pc, #116]	; (80058f4 <xTaskCheckForTimeOut+0xbc>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005896:	d102      	bne.n	800589e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005898:	2300      	movs	r3, #0
 800589a:	61fb      	str	r3, [r7, #28]
 800589c:	e023      	b.n	80058e6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	4b15      	ldr	r3, [pc, #84]	; (80058f8 <xTaskCheckForTimeOut+0xc0>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d007      	beq.n	80058ba <xTaskCheckForTimeOut+0x82>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d302      	bcc.n	80058ba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80058b4:	2301      	movs	r3, #1
 80058b6:	61fb      	str	r3, [r7, #28]
 80058b8:	e015      	b.n	80058e6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d20b      	bcs.n	80058dc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	1ad2      	subs	r2, r2, r3
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f7ff ff9b 	bl	800580c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80058d6:	2300      	movs	r3, #0
 80058d8:	61fb      	str	r3, [r7, #28]
 80058da:	e004      	b.n	80058e6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	2200      	movs	r2, #0
 80058e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80058e2:	2301      	movs	r3, #1
 80058e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80058e6:	f000 fe75 	bl	80065d4 <vPortExitCritical>

	return xReturn;
 80058ea:	69fb      	ldr	r3, [r7, #28]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3720      	adds	r7, #32
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	20000bc8 	.word	0x20000bc8
 80058f8:	20000bdc 	.word	0x20000bdc

080058fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005900:	4b03      	ldr	r3, [pc, #12]	; (8005910 <vTaskMissedYield+0x14>)
 8005902:	2201      	movs	r2, #1
 8005904:	601a      	str	r2, [r3, #0]
}
 8005906:	bf00      	nop
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr
 8005910:	20000bd8 	.word	0x20000bd8

08005914 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800591c:	f000 f852 	bl	80059c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005920:	4b06      	ldr	r3, [pc, #24]	; (800593c <prvIdleTask+0x28>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d9f9      	bls.n	800591c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005928:	4b05      	ldr	r3, [pc, #20]	; (8005940 <prvIdleTask+0x2c>)
 800592a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005938:	e7f0      	b.n	800591c <prvIdleTask+0x8>
 800593a:	bf00      	nop
 800593c:	200006f4 	.word	0x200006f4
 8005940:	e000ed04 	.word	0xe000ed04

08005944 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800594a:	2300      	movs	r3, #0
 800594c:	607b      	str	r3, [r7, #4]
 800594e:	e00c      	b.n	800596a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	4613      	mov	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4a12      	ldr	r2, [pc, #72]	; (80059a4 <prvInitialiseTaskLists+0x60>)
 800595c:	4413      	add	r3, r2
 800595e:	4618      	mov	r0, r3
 8005960:	f7fe fccc 	bl	80042fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	3301      	adds	r3, #1
 8005968:	607b      	str	r3, [r7, #4]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b37      	cmp	r3, #55	; 0x37
 800596e:	d9ef      	bls.n	8005950 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005970:	480d      	ldr	r0, [pc, #52]	; (80059a8 <prvInitialiseTaskLists+0x64>)
 8005972:	f7fe fcc3 	bl	80042fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005976:	480d      	ldr	r0, [pc, #52]	; (80059ac <prvInitialiseTaskLists+0x68>)
 8005978:	f7fe fcc0 	bl	80042fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800597c:	480c      	ldr	r0, [pc, #48]	; (80059b0 <prvInitialiseTaskLists+0x6c>)
 800597e:	f7fe fcbd 	bl	80042fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005982:	480c      	ldr	r0, [pc, #48]	; (80059b4 <prvInitialiseTaskLists+0x70>)
 8005984:	f7fe fcba 	bl	80042fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005988:	480b      	ldr	r0, [pc, #44]	; (80059b8 <prvInitialiseTaskLists+0x74>)
 800598a:	f7fe fcb7 	bl	80042fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800598e:	4b0b      	ldr	r3, [pc, #44]	; (80059bc <prvInitialiseTaskLists+0x78>)
 8005990:	4a05      	ldr	r2, [pc, #20]	; (80059a8 <prvInitialiseTaskLists+0x64>)
 8005992:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005994:	4b0a      	ldr	r3, [pc, #40]	; (80059c0 <prvInitialiseTaskLists+0x7c>)
 8005996:	4a05      	ldr	r2, [pc, #20]	; (80059ac <prvInitialiseTaskLists+0x68>)
 8005998:	601a      	str	r2, [r3, #0]
}
 800599a:	bf00      	nop
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	200006f4 	.word	0x200006f4
 80059a8:	20000b54 	.word	0x20000b54
 80059ac:	20000b68 	.word	0x20000b68
 80059b0:	20000b84 	.word	0x20000b84
 80059b4:	20000b98 	.word	0x20000b98
 80059b8:	20000bb0 	.word	0x20000bb0
 80059bc:	20000b7c 	.word	0x20000b7c
 80059c0:	20000b80 	.word	0x20000b80

080059c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059ca:	e019      	b.n	8005a00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80059cc:	f000 fdd2 	bl	8006574 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059d0:	4b10      	ldr	r3, [pc, #64]	; (8005a14 <prvCheckTasksWaitingTermination+0x50>)
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3304      	adds	r3, #4
 80059dc:	4618      	mov	r0, r3
 80059de:	f7fe fd17 	bl	8004410 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80059e2:	4b0d      	ldr	r3, [pc, #52]	; (8005a18 <prvCheckTasksWaitingTermination+0x54>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	3b01      	subs	r3, #1
 80059e8:	4a0b      	ldr	r2, [pc, #44]	; (8005a18 <prvCheckTasksWaitingTermination+0x54>)
 80059ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80059ec:	4b0b      	ldr	r3, [pc, #44]	; (8005a1c <prvCheckTasksWaitingTermination+0x58>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	3b01      	subs	r3, #1
 80059f2:	4a0a      	ldr	r2, [pc, #40]	; (8005a1c <prvCheckTasksWaitingTermination+0x58>)
 80059f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80059f6:	f000 fded 	bl	80065d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f810 	bl	8005a20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a00:	4b06      	ldr	r3, [pc, #24]	; (8005a1c <prvCheckTasksWaitingTermination+0x58>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1e1      	bne.n	80059cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a08:	bf00      	nop
 8005a0a:	bf00      	nop
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	20000b98 	.word	0x20000b98
 8005a18:	20000bc4 	.word	0x20000bc4
 8005a1c:	20000bac 	.word	0x20000bac

08005a20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d108      	bne.n	8005a44 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 ff8a 	bl	8006950 <vPortFree>
				vPortFree( pxTCB );
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 ff87 	bl	8006950 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a42:	e018      	b.n	8005a76 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d103      	bne.n	8005a56 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 ff7e 	bl	8006950 <vPortFree>
	}
 8005a54:	e00f      	b.n	8005a76 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d00a      	beq.n	8005a76 <prvDeleteTCB+0x56>
	__asm volatile
 8005a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a64:	f383 8811 	msr	BASEPRI, r3
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	60fb      	str	r3, [r7, #12]
}
 8005a72:	bf00      	nop
 8005a74:	e7fe      	b.n	8005a74 <prvDeleteTCB+0x54>
	}
 8005a76:	bf00      	nop
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
	...

08005a80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a86:	4b0c      	ldr	r3, [pc, #48]	; (8005ab8 <prvResetNextTaskUnblockTime+0x38>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d104      	bne.n	8005a9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a90:	4b0a      	ldr	r3, [pc, #40]	; (8005abc <prvResetNextTaskUnblockTime+0x3c>)
 8005a92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a98:	e008      	b.n	8005aac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a9a:	4b07      	ldr	r3, [pc, #28]	; (8005ab8 <prvResetNextTaskUnblockTime+0x38>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	4a04      	ldr	r2, [pc, #16]	; (8005abc <prvResetNextTaskUnblockTime+0x3c>)
 8005aaa:	6013      	str	r3, [r2, #0]
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	20000b7c 	.word	0x20000b7c
 8005abc:	20000be4 	.word	0x20000be4

08005ac0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ac6:	4b0b      	ldr	r3, [pc, #44]	; (8005af4 <xTaskGetSchedulerState+0x34>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d102      	bne.n	8005ad4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	607b      	str	r3, [r7, #4]
 8005ad2:	e008      	b.n	8005ae6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ad4:	4b08      	ldr	r3, [pc, #32]	; (8005af8 <xTaskGetSchedulerState+0x38>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d102      	bne.n	8005ae2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005adc:	2302      	movs	r3, #2
 8005ade:	607b      	str	r3, [r7, #4]
 8005ae0:	e001      	b.n	8005ae6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ae6:	687b      	ldr	r3, [r7, #4]
	}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	20000bd0 	.word	0x20000bd0
 8005af8:	20000bec 	.word	0x20000bec

08005afc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d056      	beq.n	8005bc0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b12:	4b2e      	ldr	r3, [pc, #184]	; (8005bcc <xTaskPriorityDisinherit+0xd0>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d00a      	beq.n	8005b32 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b20:	f383 8811 	msr	BASEPRI, r3
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	60fb      	str	r3, [r7, #12]
}
 8005b2e:	bf00      	nop
 8005b30:	e7fe      	b.n	8005b30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10a      	bne.n	8005b50 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3e:	f383 8811 	msr	BASEPRI, r3
 8005b42:	f3bf 8f6f 	isb	sy
 8005b46:	f3bf 8f4f 	dsb	sy
 8005b4a:	60bb      	str	r3, [r7, #8]
}
 8005b4c:	bf00      	nop
 8005b4e:	e7fe      	b.n	8005b4e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b54:	1e5a      	subs	r2, r3, #1
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d02c      	beq.n	8005bc0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d128      	bne.n	8005bc0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	3304      	adds	r3, #4
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7fe fc4c 	bl	8004410 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b84:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b90:	4b0f      	ldr	r3, [pc, #60]	; (8005bd0 <xTaskPriorityDisinherit+0xd4>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d903      	bls.n	8005ba0 <xTaskPriorityDisinherit+0xa4>
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9c:	4a0c      	ldr	r2, [pc, #48]	; (8005bd0 <xTaskPriorityDisinherit+0xd4>)
 8005b9e:	6013      	str	r3, [r2, #0]
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4a09      	ldr	r2, [pc, #36]	; (8005bd4 <xTaskPriorityDisinherit+0xd8>)
 8005bae:	441a      	add	r2, r3
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	4610      	mov	r0, r2
 8005bb8:	f7fe fbcd 	bl	8004356 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005bc0:	697b      	ldr	r3, [r7, #20]
	}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3718      	adds	r7, #24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	200006f0 	.word	0x200006f0
 8005bd0:	20000bcc 	.word	0x20000bcc
 8005bd4:	200006f4 	.word	0x200006f4

08005bd8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005be2:	4b21      	ldr	r3, [pc, #132]	; (8005c68 <prvAddCurrentTaskToDelayedList+0x90>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005be8:	4b20      	ldr	r3, [pc, #128]	; (8005c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	3304      	adds	r3, #4
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fe fc0e 	bl	8004410 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bfa:	d10a      	bne.n	8005c12 <prvAddCurrentTaskToDelayedList+0x3a>
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d007      	beq.n	8005c12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c02:	4b1a      	ldr	r3, [pc, #104]	; (8005c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	3304      	adds	r3, #4
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4819      	ldr	r0, [pc, #100]	; (8005c70 <prvAddCurrentTaskToDelayedList+0x98>)
 8005c0c:	f7fe fba3 	bl	8004356 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c10:	e026      	b.n	8005c60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4413      	add	r3, r2
 8005c18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c1a:	4b14      	ldr	r3, [pc, #80]	; (8005c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d209      	bcs.n	8005c3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c2a:	4b12      	ldr	r3, [pc, #72]	; (8005c74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	4b0f      	ldr	r3, [pc, #60]	; (8005c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	3304      	adds	r3, #4
 8005c34:	4619      	mov	r1, r3
 8005c36:	4610      	mov	r0, r2
 8005c38:	f7fe fbb1 	bl	800439e <vListInsert>
}
 8005c3c:	e010      	b.n	8005c60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c3e:	4b0e      	ldr	r3, [pc, #56]	; (8005c78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	4b0a      	ldr	r3, [pc, #40]	; (8005c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3304      	adds	r3, #4
 8005c48:	4619      	mov	r1, r3
 8005c4a:	4610      	mov	r0, r2
 8005c4c:	f7fe fba7 	bl	800439e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c50:	4b0a      	ldr	r3, [pc, #40]	; (8005c7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d202      	bcs.n	8005c60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005c5a:	4a08      	ldr	r2, [pc, #32]	; (8005c7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	6013      	str	r3, [r2, #0]
}
 8005c60:	bf00      	nop
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	20000bc8 	.word	0x20000bc8
 8005c6c:	200006f0 	.word	0x200006f0
 8005c70:	20000bb0 	.word	0x20000bb0
 8005c74:	20000b80 	.word	0x20000b80
 8005c78:	20000b7c 	.word	0x20000b7c
 8005c7c:	20000be4 	.word	0x20000be4

08005c80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b08a      	sub	sp, #40	; 0x28
 8005c84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005c86:	2300      	movs	r3, #0
 8005c88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005c8a:	f000 fb07 	bl	800629c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005c8e:	4b1c      	ldr	r3, [pc, #112]	; (8005d00 <xTimerCreateTimerTask+0x80>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d021      	beq.n	8005cda <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005c96:	2300      	movs	r3, #0
 8005c98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005c9e:	1d3a      	adds	r2, r7, #4
 8005ca0:	f107 0108 	add.w	r1, r7, #8
 8005ca4:	f107 030c 	add.w	r3, r7, #12
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7fe fb0d 	bl	80042c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005cae:	6879      	ldr	r1, [r7, #4]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	9202      	str	r2, [sp, #8]
 8005cb6:	9301      	str	r3, [sp, #4]
 8005cb8:	2302      	movs	r3, #2
 8005cba:	9300      	str	r3, [sp, #0]
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	460a      	mov	r2, r1
 8005cc0:	4910      	ldr	r1, [pc, #64]	; (8005d04 <xTimerCreateTimerTask+0x84>)
 8005cc2:	4811      	ldr	r0, [pc, #68]	; (8005d08 <xTimerCreateTimerTask+0x88>)
 8005cc4:	f7ff f8ba 	bl	8004e3c <xTaskCreateStatic>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	4a10      	ldr	r2, [pc, #64]	; (8005d0c <xTimerCreateTimerTask+0x8c>)
 8005ccc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005cce:	4b0f      	ldr	r3, [pc, #60]	; (8005d0c <xTimerCreateTimerTask+0x8c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10a      	bne.n	8005cf6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	613b      	str	r3, [r7, #16]
}
 8005cf2:	bf00      	nop
 8005cf4:	e7fe      	b.n	8005cf4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005cf6:	697b      	ldr	r3, [r7, #20]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3718      	adds	r7, #24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	20000c20 	.word	0x20000c20
 8005d04:	08006c48 	.word	0x08006c48
 8005d08:	08005e45 	.word	0x08005e45
 8005d0c:	20000c24 	.word	0x20000c24

08005d10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b08a      	sub	sp, #40	; 0x28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
 8005d1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10a      	bne.n	8005d3e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2c:	f383 8811 	msr	BASEPRI, r3
 8005d30:	f3bf 8f6f 	isb	sy
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	623b      	str	r3, [r7, #32]
}
 8005d3a:	bf00      	nop
 8005d3c:	e7fe      	b.n	8005d3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005d3e:	4b1a      	ldr	r3, [pc, #104]	; (8005da8 <xTimerGenericCommand+0x98>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d02a      	beq.n	8005d9c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2b05      	cmp	r3, #5
 8005d56:	dc18      	bgt.n	8005d8a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005d58:	f7ff feb2 	bl	8005ac0 <xTaskGetSchedulerState>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d109      	bne.n	8005d76 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005d62:	4b11      	ldr	r3, [pc, #68]	; (8005da8 <xTimerGenericCommand+0x98>)
 8005d64:	6818      	ldr	r0, [r3, #0]
 8005d66:	f107 0110 	add.w	r1, r7, #16
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d6e:	f7fe fc7d 	bl	800466c <xQueueGenericSend>
 8005d72:	6278      	str	r0, [r7, #36]	; 0x24
 8005d74:	e012      	b.n	8005d9c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005d76:	4b0c      	ldr	r3, [pc, #48]	; (8005da8 <xTimerGenericCommand+0x98>)
 8005d78:	6818      	ldr	r0, [r3, #0]
 8005d7a:	f107 0110 	add.w	r1, r7, #16
 8005d7e:	2300      	movs	r3, #0
 8005d80:	2200      	movs	r2, #0
 8005d82:	f7fe fc73 	bl	800466c <xQueueGenericSend>
 8005d86:	6278      	str	r0, [r7, #36]	; 0x24
 8005d88:	e008      	b.n	8005d9c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d8a:	4b07      	ldr	r3, [pc, #28]	; (8005da8 <xTimerGenericCommand+0x98>)
 8005d8c:	6818      	ldr	r0, [r3, #0]
 8005d8e:	f107 0110 	add.w	r1, r7, #16
 8005d92:	2300      	movs	r3, #0
 8005d94:	683a      	ldr	r2, [r7, #0]
 8005d96:	f7fe fd67 	bl	8004868 <xQueueGenericSendFromISR>
 8005d9a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3728      	adds	r7, #40	; 0x28
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20000c20 	.word	0x20000c20

08005dac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b088      	sub	sp, #32
 8005db0:	af02      	add	r7, sp, #8
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005db6:	4b22      	ldr	r3, [pc, #136]	; (8005e40 <prvProcessExpiredTimer+0x94>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	3304      	adds	r3, #4
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7fe fb23 	bl	8004410 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dd0:	f003 0304 	and.w	r3, r3, #4
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d022      	beq.n	8005e1e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	699a      	ldr	r2, [r3, #24]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	18d1      	adds	r1, r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	6978      	ldr	r0, [r7, #20]
 8005de6:	f000 f8d1 	bl	8005f8c <prvInsertTimerInActiveList>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d01f      	beq.n	8005e30 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005df0:	2300      	movs	r3, #0
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	2300      	movs	r3, #0
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	2100      	movs	r1, #0
 8005dfa:	6978      	ldr	r0, [r7, #20]
 8005dfc:	f7ff ff88 	bl	8005d10 <xTimerGenericCommand>
 8005e00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d113      	bne.n	8005e30 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0c:	f383 8811 	msr	BASEPRI, r3
 8005e10:	f3bf 8f6f 	isb	sy
 8005e14:	f3bf 8f4f 	dsb	sy
 8005e18:	60fb      	str	r3, [r7, #12]
}
 8005e1a:	bf00      	nop
 8005e1c:	e7fe      	b.n	8005e1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e24:	f023 0301 	bic.w	r3, r3, #1
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	6978      	ldr	r0, [r7, #20]
 8005e36:	4798      	blx	r3
}
 8005e38:	bf00      	nop
 8005e3a:	3718      	adds	r7, #24
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	20000c18 	.word	0x20000c18

08005e44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e4c:	f107 0308 	add.w	r3, r7, #8
 8005e50:	4618      	mov	r0, r3
 8005e52:	f000 f857 	bl	8005f04 <prvGetNextExpireTime>
 8005e56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 f803 	bl	8005e68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005e62:	f000 f8d5 	bl	8006010 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e66:	e7f1      	b.n	8005e4c <prvTimerTask+0x8>

08005e68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005e72:	f7ff fa1f 	bl	80052b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e76:	f107 0308 	add.w	r3, r7, #8
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 f866 	bl	8005f4c <prvSampleTimeNow>
 8005e80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d130      	bne.n	8005eea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10a      	bne.n	8005ea4 <prvProcessTimerOrBlockTask+0x3c>
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d806      	bhi.n	8005ea4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005e96:	f7ff fa1b 	bl	80052d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005e9a:	68f9      	ldr	r1, [r7, #12]
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f7ff ff85 	bl	8005dac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005ea2:	e024      	b.n	8005eee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d008      	beq.n	8005ebc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005eaa:	4b13      	ldr	r3, [pc, #76]	; (8005ef8 <prvProcessTimerOrBlockTask+0x90>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <prvProcessTimerOrBlockTask+0x50>
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e000      	b.n	8005eba <prvProcessTimerOrBlockTask+0x52>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005ebc:	4b0f      	ldr	r3, [pc, #60]	; (8005efc <prvProcessTimerOrBlockTask+0x94>)
 8005ebe:	6818      	ldr	r0, [r3, #0]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	4619      	mov	r1, r3
 8005eca:	f7fe ff83 	bl	8004dd4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005ece:	f7ff f9ff 	bl	80052d0 <xTaskResumeAll>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10a      	bne.n	8005eee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005ed8:	4b09      	ldr	r3, [pc, #36]	; (8005f00 <prvProcessTimerOrBlockTask+0x98>)
 8005eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ede:	601a      	str	r2, [r3, #0]
 8005ee0:	f3bf 8f4f 	dsb	sy
 8005ee4:	f3bf 8f6f 	isb	sy
}
 8005ee8:	e001      	b.n	8005eee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005eea:	f7ff f9f1 	bl	80052d0 <xTaskResumeAll>
}
 8005eee:	bf00      	nop
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	20000c1c 	.word	0x20000c1c
 8005efc:	20000c20 	.word	0x20000c20
 8005f00:	e000ed04 	.word	0xe000ed04

08005f04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f0c:	4b0e      	ldr	r3, [pc, #56]	; (8005f48 <prvGetNextExpireTime+0x44>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d101      	bne.n	8005f1a <prvGetNextExpireTime+0x16>
 8005f16:	2201      	movs	r2, #1
 8005f18:	e000      	b.n	8005f1c <prvGetNextExpireTime+0x18>
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d105      	bne.n	8005f34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f28:	4b07      	ldr	r3, [pc, #28]	; (8005f48 <prvGetNextExpireTime+0x44>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	60fb      	str	r3, [r7, #12]
 8005f32:	e001      	b.n	8005f38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005f34:	2300      	movs	r3, #0
 8005f36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005f38:	68fb      	ldr	r3, [r7, #12]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	20000c18 	.word	0x20000c18

08005f4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005f54:	f7ff fa5a 	bl	800540c <xTaskGetTickCount>
 8005f58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005f5a:	4b0b      	ldr	r3, [pc, #44]	; (8005f88 <prvSampleTimeNow+0x3c>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d205      	bcs.n	8005f70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005f64:	f000 f936 	bl	80061d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	601a      	str	r2, [r3, #0]
 8005f6e:	e002      	b.n	8005f76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005f76:	4a04      	ldr	r2, [pc, #16]	; (8005f88 <prvSampleTimeNow+0x3c>)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3710      	adds	r7, #16
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	20000c28 	.word	0x20000c28

08005f8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
 8005f98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	68ba      	ldr	r2, [r7, #8]
 8005fa2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d812      	bhi.n	8005fd8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	1ad2      	subs	r2, r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d302      	bcc.n	8005fc6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	617b      	str	r3, [r7, #20]
 8005fc4:	e01b      	b.n	8005ffe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005fc6:	4b10      	ldr	r3, [pc, #64]	; (8006008 <prvInsertTimerInActiveList+0x7c>)
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	3304      	adds	r3, #4
 8005fce:	4619      	mov	r1, r3
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	f7fe f9e4 	bl	800439e <vListInsert>
 8005fd6:	e012      	b.n	8005ffe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d206      	bcs.n	8005fee <prvInsertTimerInActiveList+0x62>
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d302      	bcc.n	8005fee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	617b      	str	r3, [r7, #20]
 8005fec:	e007      	b.n	8005ffe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005fee:	4b07      	ldr	r3, [pc, #28]	; (800600c <prvInsertTimerInActiveList+0x80>)
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	f7fe f9d0 	bl	800439e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005ffe:	697b      	ldr	r3, [r7, #20]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3718      	adds	r7, #24
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	20000c1c 	.word	0x20000c1c
 800600c:	20000c18 	.word	0x20000c18

08006010 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b08e      	sub	sp, #56	; 0x38
 8006014:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006016:	e0ca      	b.n	80061ae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	da18      	bge.n	8006050 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800601e:	1d3b      	adds	r3, r7, #4
 8006020:	3304      	adds	r3, #4
 8006022:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10a      	bne.n	8006040 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800602a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	61fb      	str	r3, [r7, #28]
}
 800603c:	bf00      	nop
 800603e:	e7fe      	b.n	800603e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006046:	6850      	ldr	r0, [r2, #4]
 8006048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800604a:	6892      	ldr	r2, [r2, #8]
 800604c:	4611      	mov	r1, r2
 800604e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	f2c0 80aa 	blt.w	80061ac <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800605c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d004      	beq.n	800606e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006066:	3304      	adds	r3, #4
 8006068:	4618      	mov	r0, r3
 800606a:	f7fe f9d1 	bl	8004410 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800606e:	463b      	mov	r3, r7
 8006070:	4618      	mov	r0, r3
 8006072:	f7ff ff6b 	bl	8005f4c <prvSampleTimeNow>
 8006076:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b09      	cmp	r3, #9
 800607c:	f200 8097 	bhi.w	80061ae <prvProcessReceivedCommands+0x19e>
 8006080:	a201      	add	r2, pc, #4	; (adr r2, 8006088 <prvProcessReceivedCommands+0x78>)
 8006082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006086:	bf00      	nop
 8006088:	080060b1 	.word	0x080060b1
 800608c:	080060b1 	.word	0x080060b1
 8006090:	080060b1 	.word	0x080060b1
 8006094:	08006125 	.word	0x08006125
 8006098:	08006139 	.word	0x08006139
 800609c:	08006183 	.word	0x08006183
 80060a0:	080060b1 	.word	0x080060b1
 80060a4:	080060b1 	.word	0x080060b1
 80060a8:	08006125 	.word	0x08006125
 80060ac:	08006139 	.word	0x08006139
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060b6:	f043 0301 	orr.w	r3, r3, #1
 80060ba:	b2da      	uxtb	r2, r3
 80060bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	18d1      	adds	r1, r2, r3
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060d0:	f7ff ff5c 	bl	8005f8c <prvInsertTimerInActiveList>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d069      	beq.n	80061ae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060e8:	f003 0304 	and.w	r3, r3, #4
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d05e      	beq.n	80061ae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	441a      	add	r2, r3
 80060f8:	2300      	movs	r3, #0
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	2300      	movs	r3, #0
 80060fe:	2100      	movs	r1, #0
 8006100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006102:	f7ff fe05 	bl	8005d10 <xTimerGenericCommand>
 8006106:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006108:	6a3b      	ldr	r3, [r7, #32]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d14f      	bne.n	80061ae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800610e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	61bb      	str	r3, [r7, #24]
}
 8006120:	bf00      	nop
 8006122:	e7fe      	b.n	8006122 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006126:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800612a:	f023 0301 	bic.w	r3, r3, #1
 800612e:	b2da      	uxtb	r2, r3
 8006130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006132:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006136:	e03a      	b.n	80061ae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800613e:	f043 0301 	orr.w	r3, r3, #1
 8006142:	b2da      	uxtb	r2, r3
 8006144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006146:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10a      	bne.n	800616e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615c:	f383 8811 	msr	BASEPRI, r3
 8006160:	f3bf 8f6f 	isb	sy
 8006164:	f3bf 8f4f 	dsb	sy
 8006168:	617b      	str	r3, [r7, #20]
}
 800616a:	bf00      	nop
 800616c:	e7fe      	b.n	800616c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800616e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006170:	699a      	ldr	r2, [r3, #24]
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	18d1      	adds	r1, r2, r3
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800617a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800617c:	f7ff ff06 	bl	8005f8c <prvInsertTimerInActiveList>
					break;
 8006180:	e015      	b.n	80061ae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006184:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006188:	f003 0302 	and.w	r3, r3, #2
 800618c:	2b00      	cmp	r3, #0
 800618e:	d103      	bne.n	8006198 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006192:	f000 fbdd 	bl	8006950 <vPortFree>
 8006196:	e00a      	b.n	80061ae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800619e:	f023 0301 	bic.w	r3, r3, #1
 80061a2:	b2da      	uxtb	r2, r3
 80061a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80061aa:	e000      	b.n	80061ae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80061ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061ae:	4b08      	ldr	r3, [pc, #32]	; (80061d0 <prvProcessReceivedCommands+0x1c0>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	1d39      	adds	r1, r7, #4
 80061b4:	2200      	movs	r2, #0
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fe fbf2 	bl	80049a0 <xQueueReceive>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f47f af2a 	bne.w	8006018 <prvProcessReceivedCommands+0x8>
	}
}
 80061c4:	bf00      	nop
 80061c6:	bf00      	nop
 80061c8:	3730      	adds	r7, #48	; 0x30
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	20000c20 	.word	0x20000c20

080061d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b088      	sub	sp, #32
 80061d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061da:	e048      	b.n	800626e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061dc:	4b2d      	ldr	r3, [pc, #180]	; (8006294 <prvSwitchTimerLists+0xc0>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061e6:	4b2b      	ldr	r3, [pc, #172]	; (8006294 <prvSwitchTimerLists+0xc0>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	3304      	adds	r3, #4
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7fe f90b 	bl	8004410 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006208:	f003 0304 	and.w	r3, r3, #4
 800620c:	2b00      	cmp	r3, #0
 800620e:	d02e      	beq.n	800626e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	4413      	add	r3, r2
 8006218:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	429a      	cmp	r2, r3
 8006220:	d90e      	bls.n	8006240 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800622e:	4b19      	ldr	r3, [pc, #100]	; (8006294 <prvSwitchTimerLists+0xc0>)
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	3304      	adds	r3, #4
 8006236:	4619      	mov	r1, r3
 8006238:	4610      	mov	r0, r2
 800623a:	f7fe f8b0 	bl	800439e <vListInsert>
 800623e:	e016      	b.n	800626e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006240:	2300      	movs	r3, #0
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	2300      	movs	r3, #0
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	2100      	movs	r1, #0
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f7ff fd60 	bl	8005d10 <xTimerGenericCommand>
 8006250:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10a      	bne.n	800626e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625c:	f383 8811 	msr	BASEPRI, r3
 8006260:	f3bf 8f6f 	isb	sy
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	603b      	str	r3, [r7, #0]
}
 800626a:	bf00      	nop
 800626c:	e7fe      	b.n	800626c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800626e:	4b09      	ldr	r3, [pc, #36]	; (8006294 <prvSwitchTimerLists+0xc0>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1b1      	bne.n	80061dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006278:	4b06      	ldr	r3, [pc, #24]	; (8006294 <prvSwitchTimerLists+0xc0>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800627e:	4b06      	ldr	r3, [pc, #24]	; (8006298 <prvSwitchTimerLists+0xc4>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a04      	ldr	r2, [pc, #16]	; (8006294 <prvSwitchTimerLists+0xc0>)
 8006284:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006286:	4a04      	ldr	r2, [pc, #16]	; (8006298 <prvSwitchTimerLists+0xc4>)
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	6013      	str	r3, [r2, #0]
}
 800628c:	bf00      	nop
 800628e:	3718      	adds	r7, #24
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	20000c18 	.word	0x20000c18
 8006298:	20000c1c 	.word	0x20000c1c

0800629c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80062a2:	f000 f967 	bl	8006574 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80062a6:	4b15      	ldr	r3, [pc, #84]	; (80062fc <prvCheckForValidListAndQueue+0x60>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d120      	bne.n	80062f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80062ae:	4814      	ldr	r0, [pc, #80]	; (8006300 <prvCheckForValidListAndQueue+0x64>)
 80062b0:	f7fe f824 	bl	80042fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80062b4:	4813      	ldr	r0, [pc, #76]	; (8006304 <prvCheckForValidListAndQueue+0x68>)
 80062b6:	f7fe f821 	bl	80042fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80062ba:	4b13      	ldr	r3, [pc, #76]	; (8006308 <prvCheckForValidListAndQueue+0x6c>)
 80062bc:	4a10      	ldr	r2, [pc, #64]	; (8006300 <prvCheckForValidListAndQueue+0x64>)
 80062be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80062c0:	4b12      	ldr	r3, [pc, #72]	; (800630c <prvCheckForValidListAndQueue+0x70>)
 80062c2:	4a10      	ldr	r2, [pc, #64]	; (8006304 <prvCheckForValidListAndQueue+0x68>)
 80062c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80062c6:	2300      	movs	r3, #0
 80062c8:	9300      	str	r3, [sp, #0]
 80062ca:	4b11      	ldr	r3, [pc, #68]	; (8006310 <prvCheckForValidListAndQueue+0x74>)
 80062cc:	4a11      	ldr	r2, [pc, #68]	; (8006314 <prvCheckForValidListAndQueue+0x78>)
 80062ce:	2110      	movs	r1, #16
 80062d0:	200a      	movs	r0, #10
 80062d2:	f7fe f92f 	bl	8004534 <xQueueGenericCreateStatic>
 80062d6:	4603      	mov	r3, r0
 80062d8:	4a08      	ldr	r2, [pc, #32]	; (80062fc <prvCheckForValidListAndQueue+0x60>)
 80062da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80062dc:	4b07      	ldr	r3, [pc, #28]	; (80062fc <prvCheckForValidListAndQueue+0x60>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d005      	beq.n	80062f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80062e4:	4b05      	ldr	r3, [pc, #20]	; (80062fc <prvCheckForValidListAndQueue+0x60>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	490b      	ldr	r1, [pc, #44]	; (8006318 <prvCheckForValidListAndQueue+0x7c>)
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7fe fd48 	bl	8004d80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062f0:	f000 f970 	bl	80065d4 <vPortExitCritical>
}
 80062f4:	bf00      	nop
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	20000c20 	.word	0x20000c20
 8006300:	20000bf0 	.word	0x20000bf0
 8006304:	20000c04 	.word	0x20000c04
 8006308:	20000c18 	.word	0x20000c18
 800630c:	20000c1c 	.word	0x20000c1c
 8006310:	20000ccc 	.word	0x20000ccc
 8006314:	20000c2c 	.word	0x20000c2c
 8006318:	08006c50 	.word	0x08006c50

0800631c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	3b04      	subs	r3, #4
 800632c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006334:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	3b04      	subs	r3, #4
 800633a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	f023 0201 	bic.w	r2, r3, #1
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	3b04      	subs	r3, #4
 800634a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800634c:	4a0c      	ldr	r2, [pc, #48]	; (8006380 <pxPortInitialiseStack+0x64>)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	3b14      	subs	r3, #20
 8006356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	3b04      	subs	r3, #4
 8006362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f06f 0202 	mvn.w	r2, #2
 800636a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	3b20      	subs	r3, #32
 8006370:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006372:	68fb      	ldr	r3, [r7, #12]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3714      	adds	r7, #20
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr
 8006380:	08006385 	.word	0x08006385

08006384 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800638a:	2300      	movs	r3, #0
 800638c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800638e:	4b12      	ldr	r3, [pc, #72]	; (80063d8 <prvTaskExitError+0x54>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006396:	d00a      	beq.n	80063ae <prvTaskExitError+0x2a>
	__asm volatile
 8006398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639c:	f383 8811 	msr	BASEPRI, r3
 80063a0:	f3bf 8f6f 	isb	sy
 80063a4:	f3bf 8f4f 	dsb	sy
 80063a8:	60fb      	str	r3, [r7, #12]
}
 80063aa:	bf00      	nop
 80063ac:	e7fe      	b.n	80063ac <prvTaskExitError+0x28>
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	60bb      	str	r3, [r7, #8]
}
 80063c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80063c2:	bf00      	nop
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d0fc      	beq.n	80063c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80063ca:	bf00      	nop
 80063cc:	bf00      	nop
 80063ce:	3714      	adds	r7, #20
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr
 80063d8:	2000000c 	.word	0x2000000c
 80063dc:	00000000 	.word	0x00000000

080063e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80063e0:	4b07      	ldr	r3, [pc, #28]	; (8006400 <pxCurrentTCBConst2>)
 80063e2:	6819      	ldr	r1, [r3, #0]
 80063e4:	6808      	ldr	r0, [r1, #0]
 80063e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ea:	f380 8809 	msr	PSP, r0
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f04f 0000 	mov.w	r0, #0
 80063f6:	f380 8811 	msr	BASEPRI, r0
 80063fa:	4770      	bx	lr
 80063fc:	f3af 8000 	nop.w

08006400 <pxCurrentTCBConst2>:
 8006400:	200006f0 	.word	0x200006f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006404:	bf00      	nop
 8006406:	bf00      	nop

08006408 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006408:	4808      	ldr	r0, [pc, #32]	; (800642c <prvPortStartFirstTask+0x24>)
 800640a:	6800      	ldr	r0, [r0, #0]
 800640c:	6800      	ldr	r0, [r0, #0]
 800640e:	f380 8808 	msr	MSP, r0
 8006412:	f04f 0000 	mov.w	r0, #0
 8006416:	f380 8814 	msr	CONTROL, r0
 800641a:	b662      	cpsie	i
 800641c:	b661      	cpsie	f
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	df00      	svc	0
 8006428:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800642a:	bf00      	nop
 800642c:	e000ed08 	.word	0xe000ed08

08006430 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006436:	4b46      	ldr	r3, [pc, #280]	; (8006550 <xPortStartScheduler+0x120>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a46      	ldr	r2, [pc, #280]	; (8006554 <xPortStartScheduler+0x124>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d10a      	bne.n	8006456 <xPortStartScheduler+0x26>
	__asm volatile
 8006440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006444:	f383 8811 	msr	BASEPRI, r3
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	f3bf 8f4f 	dsb	sy
 8006450:	613b      	str	r3, [r7, #16]
}
 8006452:	bf00      	nop
 8006454:	e7fe      	b.n	8006454 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006456:	4b3e      	ldr	r3, [pc, #248]	; (8006550 <xPortStartScheduler+0x120>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a3f      	ldr	r2, [pc, #252]	; (8006558 <xPortStartScheduler+0x128>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d10a      	bne.n	8006476 <xPortStartScheduler+0x46>
	__asm volatile
 8006460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006464:	f383 8811 	msr	BASEPRI, r3
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	f3bf 8f4f 	dsb	sy
 8006470:	60fb      	str	r3, [r7, #12]
}
 8006472:	bf00      	nop
 8006474:	e7fe      	b.n	8006474 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006476:	4b39      	ldr	r3, [pc, #228]	; (800655c <xPortStartScheduler+0x12c>)
 8006478:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	b2db      	uxtb	r3, r3
 8006480:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	22ff      	movs	r2, #255	; 0xff
 8006486:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	b2db      	uxtb	r3, r3
 800648e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006490:	78fb      	ldrb	r3, [r7, #3]
 8006492:	b2db      	uxtb	r3, r3
 8006494:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006498:	b2da      	uxtb	r2, r3
 800649a:	4b31      	ldr	r3, [pc, #196]	; (8006560 <xPortStartScheduler+0x130>)
 800649c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800649e:	4b31      	ldr	r3, [pc, #196]	; (8006564 <xPortStartScheduler+0x134>)
 80064a0:	2207      	movs	r2, #7
 80064a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064a4:	e009      	b.n	80064ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80064a6:	4b2f      	ldr	r3, [pc, #188]	; (8006564 <xPortStartScheduler+0x134>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	3b01      	subs	r3, #1
 80064ac:	4a2d      	ldr	r2, [pc, #180]	; (8006564 <xPortStartScheduler+0x134>)
 80064ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80064b0:	78fb      	ldrb	r3, [r7, #3]
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	005b      	lsls	r3, r3, #1
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064ba:	78fb      	ldrb	r3, [r7, #3]
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c2:	2b80      	cmp	r3, #128	; 0x80
 80064c4:	d0ef      	beq.n	80064a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80064c6:	4b27      	ldr	r3, [pc, #156]	; (8006564 <xPortStartScheduler+0x134>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f1c3 0307 	rsb	r3, r3, #7
 80064ce:	2b04      	cmp	r3, #4
 80064d0:	d00a      	beq.n	80064e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80064d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d6:	f383 8811 	msr	BASEPRI, r3
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	60bb      	str	r3, [r7, #8]
}
 80064e4:	bf00      	nop
 80064e6:	e7fe      	b.n	80064e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80064e8:	4b1e      	ldr	r3, [pc, #120]	; (8006564 <xPortStartScheduler+0x134>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	021b      	lsls	r3, r3, #8
 80064ee:	4a1d      	ldr	r2, [pc, #116]	; (8006564 <xPortStartScheduler+0x134>)
 80064f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80064f2:	4b1c      	ldr	r3, [pc, #112]	; (8006564 <xPortStartScheduler+0x134>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064fa:	4a1a      	ldr	r2, [pc, #104]	; (8006564 <xPortStartScheduler+0x134>)
 80064fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	b2da      	uxtb	r2, r3
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006506:	4b18      	ldr	r3, [pc, #96]	; (8006568 <xPortStartScheduler+0x138>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a17      	ldr	r2, [pc, #92]	; (8006568 <xPortStartScheduler+0x138>)
 800650c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006510:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006512:	4b15      	ldr	r3, [pc, #84]	; (8006568 <xPortStartScheduler+0x138>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a14      	ldr	r2, [pc, #80]	; (8006568 <xPortStartScheduler+0x138>)
 8006518:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800651c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800651e:	f000 f8dd 	bl	80066dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006522:	4b12      	ldr	r3, [pc, #72]	; (800656c <xPortStartScheduler+0x13c>)
 8006524:	2200      	movs	r2, #0
 8006526:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006528:	f000 f8fc 	bl	8006724 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800652c:	4b10      	ldr	r3, [pc, #64]	; (8006570 <xPortStartScheduler+0x140>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a0f      	ldr	r2, [pc, #60]	; (8006570 <xPortStartScheduler+0x140>)
 8006532:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006536:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006538:	f7ff ff66 	bl	8006408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800653c:	f7ff f830 	bl	80055a0 <vTaskSwitchContext>
	prvTaskExitError();
 8006540:	f7ff ff20 	bl	8006384 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	e000ed00 	.word	0xe000ed00
 8006554:	410fc271 	.word	0x410fc271
 8006558:	410fc270 	.word	0x410fc270
 800655c:	e000e400 	.word	0xe000e400
 8006560:	20000d1c 	.word	0x20000d1c
 8006564:	20000d20 	.word	0x20000d20
 8006568:	e000ed20 	.word	0xe000ed20
 800656c:	2000000c 	.word	0x2000000c
 8006570:	e000ef34 	.word	0xe000ef34

08006574 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
	__asm volatile
 800657a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657e:	f383 8811 	msr	BASEPRI, r3
 8006582:	f3bf 8f6f 	isb	sy
 8006586:	f3bf 8f4f 	dsb	sy
 800658a:	607b      	str	r3, [r7, #4]
}
 800658c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800658e:	4b0f      	ldr	r3, [pc, #60]	; (80065cc <vPortEnterCritical+0x58>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3301      	adds	r3, #1
 8006594:	4a0d      	ldr	r2, [pc, #52]	; (80065cc <vPortEnterCritical+0x58>)
 8006596:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006598:	4b0c      	ldr	r3, [pc, #48]	; (80065cc <vPortEnterCritical+0x58>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d10f      	bne.n	80065c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065a0:	4b0b      	ldr	r3, [pc, #44]	; (80065d0 <vPortEnterCritical+0x5c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00a      	beq.n	80065c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80065aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ae:	f383 8811 	msr	BASEPRI, r3
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	603b      	str	r3, [r7, #0]
}
 80065bc:	bf00      	nop
 80065be:	e7fe      	b.n	80065be <vPortEnterCritical+0x4a>
	}
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	2000000c 	.word	0x2000000c
 80065d0:	e000ed04 	.word	0xe000ed04

080065d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80065da:	4b12      	ldr	r3, [pc, #72]	; (8006624 <vPortExitCritical+0x50>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10a      	bne.n	80065f8 <vPortExitCritical+0x24>
	__asm volatile
 80065e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e6:	f383 8811 	msr	BASEPRI, r3
 80065ea:	f3bf 8f6f 	isb	sy
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	607b      	str	r3, [r7, #4]
}
 80065f4:	bf00      	nop
 80065f6:	e7fe      	b.n	80065f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80065f8:	4b0a      	ldr	r3, [pc, #40]	; (8006624 <vPortExitCritical+0x50>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3b01      	subs	r3, #1
 80065fe:	4a09      	ldr	r2, [pc, #36]	; (8006624 <vPortExitCritical+0x50>)
 8006600:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006602:	4b08      	ldr	r3, [pc, #32]	; (8006624 <vPortExitCritical+0x50>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d105      	bne.n	8006616 <vPortExitCritical+0x42>
 800660a:	2300      	movs	r3, #0
 800660c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	f383 8811 	msr	BASEPRI, r3
}
 8006614:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006616:	bf00      	nop
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	2000000c 	.word	0x2000000c
	...

08006630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006630:	f3ef 8009 	mrs	r0, PSP
 8006634:	f3bf 8f6f 	isb	sy
 8006638:	4b15      	ldr	r3, [pc, #84]	; (8006690 <pxCurrentTCBConst>)
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	f01e 0f10 	tst.w	lr, #16
 8006640:	bf08      	it	eq
 8006642:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006646:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800664a:	6010      	str	r0, [r2, #0]
 800664c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006650:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006654:	f380 8811 	msr	BASEPRI, r0
 8006658:	f3bf 8f4f 	dsb	sy
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f7fe ff9e 	bl	80055a0 <vTaskSwitchContext>
 8006664:	f04f 0000 	mov.w	r0, #0
 8006668:	f380 8811 	msr	BASEPRI, r0
 800666c:	bc09      	pop	{r0, r3}
 800666e:	6819      	ldr	r1, [r3, #0]
 8006670:	6808      	ldr	r0, [r1, #0]
 8006672:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006676:	f01e 0f10 	tst.w	lr, #16
 800667a:	bf08      	it	eq
 800667c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006680:	f380 8809 	msr	PSP, r0
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	f3af 8000 	nop.w

08006690 <pxCurrentTCBConst>:
 8006690:	200006f0 	.word	0x200006f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop

08006698 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
	__asm volatile
 800669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	607b      	str	r3, [r7, #4]
}
 80066b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80066b2:	f7fe febb 	bl	800542c <xTaskIncrementTick>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d003      	beq.n	80066c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066bc:	4b06      	ldr	r3, [pc, #24]	; (80066d8 <xPortSysTickHandler+0x40>)
 80066be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066c2:	601a      	str	r2, [r3, #0]
 80066c4:	2300      	movs	r3, #0
 80066c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	f383 8811 	msr	BASEPRI, r3
}
 80066ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80066d0:	bf00      	nop
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	e000ed04 	.word	0xe000ed04

080066dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80066dc:	b480      	push	{r7}
 80066de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80066e0:	4b0b      	ldr	r3, [pc, #44]	; (8006710 <vPortSetupTimerInterrupt+0x34>)
 80066e2:	2200      	movs	r2, #0
 80066e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80066e6:	4b0b      	ldr	r3, [pc, #44]	; (8006714 <vPortSetupTimerInterrupt+0x38>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80066ec:	4b0a      	ldr	r3, [pc, #40]	; (8006718 <vPortSetupTimerInterrupt+0x3c>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a0a      	ldr	r2, [pc, #40]	; (800671c <vPortSetupTimerInterrupt+0x40>)
 80066f2:	fba2 2303 	umull	r2, r3, r2, r3
 80066f6:	099b      	lsrs	r3, r3, #6
 80066f8:	4a09      	ldr	r2, [pc, #36]	; (8006720 <vPortSetupTimerInterrupt+0x44>)
 80066fa:	3b01      	subs	r3, #1
 80066fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80066fe:	4b04      	ldr	r3, [pc, #16]	; (8006710 <vPortSetupTimerInterrupt+0x34>)
 8006700:	2207      	movs	r2, #7
 8006702:	601a      	str	r2, [r3, #0]
}
 8006704:	bf00      	nop
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	e000e010 	.word	0xe000e010
 8006714:	e000e018 	.word	0xe000e018
 8006718:	20000000 	.word	0x20000000
 800671c:	10624dd3 	.word	0x10624dd3
 8006720:	e000e014 	.word	0xe000e014

08006724 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006724:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006734 <vPortEnableVFP+0x10>
 8006728:	6801      	ldr	r1, [r0, #0]
 800672a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800672e:	6001      	str	r1, [r0, #0]
 8006730:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006732:	bf00      	nop
 8006734:	e000ed88 	.word	0xe000ed88

08006738 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800673e:	f3ef 8305 	mrs	r3, IPSR
 8006742:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2b0f      	cmp	r3, #15
 8006748:	d914      	bls.n	8006774 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800674a:	4a17      	ldr	r2, [pc, #92]	; (80067a8 <vPortValidateInterruptPriority+0x70>)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	4413      	add	r3, r2
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006754:	4b15      	ldr	r3, [pc, #84]	; (80067ac <vPortValidateInterruptPriority+0x74>)
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	7afa      	ldrb	r2, [r7, #11]
 800675a:	429a      	cmp	r2, r3
 800675c:	d20a      	bcs.n	8006774 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800675e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	607b      	str	r3, [r7, #4]
}
 8006770:	bf00      	nop
 8006772:	e7fe      	b.n	8006772 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006774:	4b0e      	ldr	r3, [pc, #56]	; (80067b0 <vPortValidateInterruptPriority+0x78>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800677c:	4b0d      	ldr	r3, [pc, #52]	; (80067b4 <vPortValidateInterruptPriority+0x7c>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	429a      	cmp	r2, r3
 8006782:	d90a      	bls.n	800679a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	603b      	str	r3, [r7, #0]
}
 8006796:	bf00      	nop
 8006798:	e7fe      	b.n	8006798 <vPortValidateInterruptPriority+0x60>
	}
 800679a:	bf00      	nop
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	e000e3f0 	.word	0xe000e3f0
 80067ac:	20000d1c 	.word	0x20000d1c
 80067b0:	e000ed0c 	.word	0xe000ed0c
 80067b4:	20000d20 	.word	0x20000d20

080067b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b08a      	sub	sp, #40	; 0x28
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80067c0:	2300      	movs	r3, #0
 80067c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80067c4:	f7fe fd76 	bl	80052b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80067c8:	4b5b      	ldr	r3, [pc, #364]	; (8006938 <pvPortMalloc+0x180>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d101      	bne.n	80067d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80067d0:	f000 f920 	bl	8006a14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80067d4:	4b59      	ldr	r3, [pc, #356]	; (800693c <pvPortMalloc+0x184>)
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4013      	ands	r3, r2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f040 8093 	bne.w	8006908 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d01d      	beq.n	8006824 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80067e8:	2208      	movs	r2, #8
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4413      	add	r3, r2
 80067ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d014      	beq.n	8006824 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f023 0307 	bic.w	r3, r3, #7
 8006800:	3308      	adds	r3, #8
 8006802:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f003 0307 	and.w	r3, r3, #7
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00a      	beq.n	8006824 <pvPortMalloc+0x6c>
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	617b      	str	r3, [r7, #20]
}
 8006820:	bf00      	nop
 8006822:	e7fe      	b.n	8006822 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d06e      	beq.n	8006908 <pvPortMalloc+0x150>
 800682a:	4b45      	ldr	r3, [pc, #276]	; (8006940 <pvPortMalloc+0x188>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	429a      	cmp	r2, r3
 8006832:	d869      	bhi.n	8006908 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006834:	4b43      	ldr	r3, [pc, #268]	; (8006944 <pvPortMalloc+0x18c>)
 8006836:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006838:	4b42      	ldr	r3, [pc, #264]	; (8006944 <pvPortMalloc+0x18c>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800683e:	e004      	b.n	800684a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006842:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	429a      	cmp	r2, r3
 8006852:	d903      	bls.n	800685c <pvPortMalloc+0xa4>
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1f1      	bne.n	8006840 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800685c:	4b36      	ldr	r3, [pc, #216]	; (8006938 <pvPortMalloc+0x180>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006862:	429a      	cmp	r2, r3
 8006864:	d050      	beq.n	8006908 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2208      	movs	r2, #8
 800686c:	4413      	add	r3, r2
 800686e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	6a3b      	ldr	r3, [r7, #32]
 8006876:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	1ad2      	subs	r2, r2, r3
 8006880:	2308      	movs	r3, #8
 8006882:	005b      	lsls	r3, r3, #1
 8006884:	429a      	cmp	r2, r3
 8006886:	d91f      	bls.n	80068c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4413      	add	r3, r2
 800688e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	f003 0307 	and.w	r3, r3, #7
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <pvPortMalloc+0xf8>
	__asm volatile
 800689a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	613b      	str	r3, [r7, #16]
}
 80068ac:	bf00      	nop
 80068ae:	e7fe      	b.n	80068ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	1ad2      	subs	r2, r2, r3
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80068bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80068c2:	69b8      	ldr	r0, [r7, #24]
 80068c4:	f000 f908 	bl	8006ad8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80068c8:	4b1d      	ldr	r3, [pc, #116]	; (8006940 <pvPortMalloc+0x188>)
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	4a1b      	ldr	r2, [pc, #108]	; (8006940 <pvPortMalloc+0x188>)
 80068d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80068d6:	4b1a      	ldr	r3, [pc, #104]	; (8006940 <pvPortMalloc+0x188>)
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	4b1b      	ldr	r3, [pc, #108]	; (8006948 <pvPortMalloc+0x190>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d203      	bcs.n	80068ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80068e2:	4b17      	ldr	r3, [pc, #92]	; (8006940 <pvPortMalloc+0x188>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a18      	ldr	r2, [pc, #96]	; (8006948 <pvPortMalloc+0x190>)
 80068e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	4b13      	ldr	r3, [pc, #76]	; (800693c <pvPortMalloc+0x184>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	431a      	orrs	r2, r3
 80068f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	2200      	movs	r2, #0
 80068fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80068fe:	4b13      	ldr	r3, [pc, #76]	; (800694c <pvPortMalloc+0x194>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3301      	adds	r3, #1
 8006904:	4a11      	ldr	r2, [pc, #68]	; (800694c <pvPortMalloc+0x194>)
 8006906:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006908:	f7fe fce2 	bl	80052d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	f003 0307 	and.w	r3, r3, #7
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00a      	beq.n	800692c <pvPortMalloc+0x174>
	__asm volatile
 8006916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	60fb      	str	r3, [r7, #12]
}
 8006928:	bf00      	nop
 800692a:	e7fe      	b.n	800692a <pvPortMalloc+0x172>
	return pvReturn;
 800692c:	69fb      	ldr	r3, [r7, #28]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3728      	adds	r7, #40	; 0x28
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	200018e4 	.word	0x200018e4
 800693c:	200018f8 	.word	0x200018f8
 8006940:	200018e8 	.word	0x200018e8
 8006944:	200018dc 	.word	0x200018dc
 8006948:	200018ec 	.word	0x200018ec
 800694c:	200018f0 	.word	0x200018f0

08006950 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d04d      	beq.n	80069fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006962:	2308      	movs	r3, #8
 8006964:	425b      	negs	r3, r3
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	4413      	add	r3, r2
 800696a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	4b24      	ldr	r3, [pc, #144]	; (8006a08 <vPortFree+0xb8>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4013      	ands	r3, r2
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10a      	bne.n	8006994 <vPortFree+0x44>
	__asm volatile
 800697e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006982:	f383 8811 	msr	BASEPRI, r3
 8006986:	f3bf 8f6f 	isb	sy
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	60fb      	str	r3, [r7, #12]
}
 8006990:	bf00      	nop
 8006992:	e7fe      	b.n	8006992 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00a      	beq.n	80069b2 <vPortFree+0x62>
	__asm volatile
 800699c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a0:	f383 8811 	msr	BASEPRI, r3
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	60bb      	str	r3, [r7, #8]
}
 80069ae:	bf00      	nop
 80069b0:	e7fe      	b.n	80069b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	4b14      	ldr	r3, [pc, #80]	; (8006a08 <vPortFree+0xb8>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4013      	ands	r3, r2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d01e      	beq.n	80069fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d11a      	bne.n	80069fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	4b0e      	ldr	r3, [pc, #56]	; (8006a08 <vPortFree+0xb8>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	43db      	mvns	r3, r3
 80069d2:	401a      	ands	r2, r3
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80069d8:	f7fe fc6c 	bl	80052b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	685a      	ldr	r2, [r3, #4]
 80069e0:	4b0a      	ldr	r3, [pc, #40]	; (8006a0c <vPortFree+0xbc>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4413      	add	r3, r2
 80069e6:	4a09      	ldr	r2, [pc, #36]	; (8006a0c <vPortFree+0xbc>)
 80069e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069ea:	6938      	ldr	r0, [r7, #16]
 80069ec:	f000 f874 	bl	8006ad8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80069f0:	4b07      	ldr	r3, [pc, #28]	; (8006a10 <vPortFree+0xc0>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	3301      	adds	r3, #1
 80069f6:	4a06      	ldr	r2, [pc, #24]	; (8006a10 <vPortFree+0xc0>)
 80069f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80069fa:	f7fe fc69 	bl	80052d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80069fe:	bf00      	nop
 8006a00:	3718      	adds	r7, #24
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	200018f8 	.word	0x200018f8
 8006a0c:	200018e8 	.word	0x200018e8
 8006a10:	200018f4 	.word	0x200018f4

08006a14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a1a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006a1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a20:	4b27      	ldr	r3, [pc, #156]	; (8006ac0 <prvHeapInit+0xac>)
 8006a22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f003 0307 	and.w	r3, r3, #7
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00c      	beq.n	8006a48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	3307      	adds	r3, #7
 8006a32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f023 0307 	bic.w	r3, r3, #7
 8006a3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	4a1f      	ldr	r2, [pc, #124]	; (8006ac0 <prvHeapInit+0xac>)
 8006a44:	4413      	add	r3, r2
 8006a46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a4c:	4a1d      	ldr	r2, [pc, #116]	; (8006ac4 <prvHeapInit+0xb0>)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a52:	4b1c      	ldr	r3, [pc, #112]	; (8006ac4 <prvHeapInit+0xb0>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a60:	2208      	movs	r2, #8
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	1a9b      	subs	r3, r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f023 0307 	bic.w	r3, r3, #7
 8006a6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	4a15      	ldr	r2, [pc, #84]	; (8006ac8 <prvHeapInit+0xb4>)
 8006a74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a76:	4b14      	ldr	r3, [pc, #80]	; (8006ac8 <prvHeapInit+0xb4>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a7e:	4b12      	ldr	r3, [pc, #72]	; (8006ac8 <prvHeapInit+0xb4>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2200      	movs	r2, #0
 8006a84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	1ad2      	subs	r2, r2, r3
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a94:	4b0c      	ldr	r3, [pc, #48]	; (8006ac8 <prvHeapInit+0xb4>)
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	4a0a      	ldr	r2, [pc, #40]	; (8006acc <prvHeapInit+0xb8>)
 8006aa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	4a09      	ldr	r2, [pc, #36]	; (8006ad0 <prvHeapInit+0xbc>)
 8006aaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006aac:	4b09      	ldr	r3, [pc, #36]	; (8006ad4 <prvHeapInit+0xc0>)
 8006aae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ab2:	601a      	str	r2, [r3, #0]
}
 8006ab4:	bf00      	nop
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	20000d24 	.word	0x20000d24
 8006ac4:	200018dc 	.word	0x200018dc
 8006ac8:	200018e4 	.word	0x200018e4
 8006acc:	200018ec 	.word	0x200018ec
 8006ad0:	200018e8 	.word	0x200018e8
 8006ad4:	200018f8 	.word	0x200018f8

08006ad8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ae0:	4b28      	ldr	r3, [pc, #160]	; (8006b84 <prvInsertBlockIntoFreeList+0xac>)
 8006ae2:	60fb      	str	r3, [r7, #12]
 8006ae4:	e002      	b.n	8006aec <prvInsertBlockIntoFreeList+0x14>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d8f7      	bhi.n	8006ae6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	4413      	add	r3, r2
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d108      	bne.n	8006b1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	441a      	add	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	441a      	add	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d118      	bne.n	8006b60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	4b15      	ldr	r3, [pc, #84]	; (8006b88 <prvInsertBlockIntoFreeList+0xb0>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d00d      	beq.n	8006b56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	441a      	add	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	e008      	b.n	8006b68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b56:	4b0c      	ldr	r3, [pc, #48]	; (8006b88 <prvInsertBlockIntoFreeList+0xb0>)
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	601a      	str	r2, [r3, #0]
 8006b5e:	e003      	b.n	8006b68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d002      	beq.n	8006b76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b76:	bf00      	nop
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	200018dc 	.word	0x200018dc
 8006b88:	200018e4 	.word	0x200018e4

08006b8c <__libc_init_array>:
 8006b8c:	b570      	push	{r4, r5, r6, lr}
 8006b8e:	4d0d      	ldr	r5, [pc, #52]	; (8006bc4 <__libc_init_array+0x38>)
 8006b90:	4c0d      	ldr	r4, [pc, #52]	; (8006bc8 <__libc_init_array+0x3c>)
 8006b92:	1b64      	subs	r4, r4, r5
 8006b94:	10a4      	asrs	r4, r4, #2
 8006b96:	2600      	movs	r6, #0
 8006b98:	42a6      	cmp	r6, r4
 8006b9a:	d109      	bne.n	8006bb0 <__libc_init_array+0x24>
 8006b9c:	4d0b      	ldr	r5, [pc, #44]	; (8006bcc <__libc_init_array+0x40>)
 8006b9e:	4c0c      	ldr	r4, [pc, #48]	; (8006bd0 <__libc_init_array+0x44>)
 8006ba0:	f000 f82e 	bl	8006c00 <_init>
 8006ba4:	1b64      	subs	r4, r4, r5
 8006ba6:	10a4      	asrs	r4, r4, #2
 8006ba8:	2600      	movs	r6, #0
 8006baa:	42a6      	cmp	r6, r4
 8006bac:	d105      	bne.n	8006bba <__libc_init_array+0x2e>
 8006bae:	bd70      	pop	{r4, r5, r6, pc}
 8006bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bb4:	4798      	blx	r3
 8006bb6:	3601      	adds	r6, #1
 8006bb8:	e7ee      	b.n	8006b98 <__libc_init_array+0xc>
 8006bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bbe:	4798      	blx	r3
 8006bc0:	3601      	adds	r6, #1
 8006bc2:	e7f2      	b.n	8006baa <__libc_init_array+0x1e>
 8006bc4:	08006ccc 	.word	0x08006ccc
 8006bc8:	08006ccc 	.word	0x08006ccc
 8006bcc:	08006ccc 	.word	0x08006ccc
 8006bd0:	08006cd0 	.word	0x08006cd0

08006bd4 <memcpy>:
 8006bd4:	440a      	add	r2, r1
 8006bd6:	4291      	cmp	r1, r2
 8006bd8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006bdc:	d100      	bne.n	8006be0 <memcpy+0xc>
 8006bde:	4770      	bx	lr
 8006be0:	b510      	push	{r4, lr}
 8006be2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006be6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bea:	4291      	cmp	r1, r2
 8006bec:	d1f9      	bne.n	8006be2 <memcpy+0xe>
 8006bee:	bd10      	pop	{r4, pc}

08006bf0 <memset>:
 8006bf0:	4402      	add	r2, r0
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d100      	bne.n	8006bfa <memset+0xa>
 8006bf8:	4770      	bx	lr
 8006bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8006bfe:	e7f9      	b.n	8006bf4 <memset+0x4>

08006c00 <_init>:
 8006c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c02:	bf00      	nop
 8006c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c06:	bc08      	pop	{r3}
 8006c08:	469e      	mov	lr, r3
 8006c0a:	4770      	bx	lr

08006c0c <_fini>:
 8006c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0e:	bf00      	nop
 8006c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c12:	bc08      	pop	{r3}
 8006c14:	469e      	mov	lr, r3
 8006c16:	4770      	bx	lr
